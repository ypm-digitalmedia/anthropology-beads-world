var SpiderGL={};SpiderGL.TAG=0;SpiderGL.openNamespace=function(options){options=SpiderGL.Utility.getDefaultObject({globalObject:SpiderGL.openNamespace.DEFAULT_GLOBAL_OBJECT,constantPrefix:SpiderGL.openNamespace.DEFAULT_CONSTANT_PREFIX,functionPrefix:SpiderGL.openNamespace.DEFAULT_FUNCTION_PREFIX,classPrefix:SpiderGL.openNamespace.DEFAULT_CLASS_PREFIX},options);var constantRegExp=new RegExp("^(([_\$0-9A-Z])+)$");function isConstant(name){return constantRegExp.test(name);}
var namespaceOrClassRegExp=new RegExp("^([A-Z])");function isNamespaceOrClass(name){return(namespaceOrClassRegExp.test(name)&&!isConstant(name));}
var functionRegExp=new RegExp("^(([a-z])+([_\$0-9A-Za-z])*)$");function isFunction(name){return functionRegExp.test(name);}
function initialCap(name){return(name.substr(0,1).toUpperCase()+name.substr(1));}
var classes={};var functions={};var constants={};function collect(module){if(!module)return;for(var x in module){if(x.substr(0,1)=="_")continue;var y=module[x];if(isNamespaceOrClass(x)){classes[x]=y;}
else if(isFunction(x)){functions[x]=y;}
else if(isConstant(x)){constants[x]=y;}
else{}}}
var modules=["Core","DOM","IO","Math","Mesh","Model","Semantic","Space","Type","UserInterface","Utility","Version","WebGL"];for(var x in modules){collect(SpiderGL[modules[x]]);}
for(var x in classes){var name=options.classPrefix+initialCap(x);options.globalObject[name]=classes[x];}
for(var x in functions){var name=options.functionPrefix+initialCap(x);options.globalObject[name]=functions[x];}
for(var x in constants){var name=options.constantPrefix+initialCap(x);options.globalObject[name]=constants[x];}};SpiderGL.openNamespace.DEFAULT_GLOBAL_OBJECT=window;SpiderGL.openNamespace.DEFAULT_CONSTANT_PREFIX="SGL_";SpiderGL.openNamespace.DEFAULT_FUNCTION_PREFIX="sgl";SpiderGL.openNamespace.DEFAULT_CLASS_PREFIX="Sgl";SpiderGL.Version={};SpiderGL.Version.VERSION_MAJOR=0;SpiderGL.Version.VERSION_MINOR=2;SpiderGL.Version.VERSION_REVISION=0;SpiderGL.Version.VERSION_STRING=SpiderGL.Version.VERSION_MAJOR+"."+SpiderGL.Version.VERSION_MINOR+"."+SpiderGL.Version.VERSION_REVISION;SpiderGL.Core={};SpiderGL.Core.DEFAULT={};SpiderGL.Core.DONT_CARE={};SpiderGL.Core.EMPTY_STRING="";SpiderGL.Core.EMPTY_OBJECT={};SpiderGL.Core.EMPTY_ARRAY=[];SpiderGL.Core.EMPTY_FUNCTION=function(){};SpiderGL.Core.generateUID=function(){SpiderGL.Core.generateUID._lastUID++;return SpiderGL.Core.generateUID._lastUID;}
SpiderGL.Core.generateUID._lastUID=0;SpiderGL.Core.ObjectBase=function(){this._uid=SpiderGL.Core.generateUID();};SpiderGL.Core.ObjectBase.prototype={get uid(){return this._uid;}};SpiderGL.Type={};SpiderGL.Type.LITTLE_ENDIAN=(function(){var a=new Uint8Array([0x12,0x34]);var b=new Uint16Array(a.buffer);return(b[0]==0x3412);})();SpiderGL.Type.BIG_ENDIAN=!SpiderGL.Type.BIG_ENDIAN;SpiderGL.Type.NO_TYPE=0;SpiderGL.Type.INT8=1;SpiderGL.Type.UINT8=2;SpiderGL.Type.INT16=3;SpiderGL.Type.UINT16=4;SpiderGL.Type.INT32=5;SpiderGL.Type.UINT32=6;SpiderGL.Type.FLOAT32=7;SpiderGL.Type.SIZEOF_INT8=Int8Array.BYTES_PER_ELEMENT;SpiderGL.Type.SIZEOF_UINT8=Uint8Array.BYTES_PER_ELEMENT;SpiderGL.Type.SIZEOF_INT16=Int16Array.BYTES_PER_ELEMENT;SpiderGL.Type.SIZEOF_UINT16=Uint16Array.BYTES_PER_ELEMENT;SpiderGL.Type.SIZEOF_INT32=Int32Array.BYTES_PER_ELEMENT;SpiderGL.Type.SIZEOF_UINT32=Uint32Array.BYTES_PER_ELEMENT;SpiderGL.Type.SIZEOF_FLOAT32=Float32Array.BYTES_PER_ELEMENT;SpiderGL.Type.typeSize=(function(){var typeMap={};typeMap[SpiderGL.Type.NO_TYPE]=0;typeMap[SpiderGL.Type.INT8]=SpiderGL.Type.SIZEOF_INT8;typeMap[SpiderGL.Type.UINT8]=SpiderGL.Type.SIZEOF_UINT8;typeMap[SpiderGL.Type.INT16]=SpiderGL.Type.SIZEOF_INT16;typeMap[SpiderGL.Type.UINT16]=SpiderGL.Type.SIZEOF_UINT16;typeMap[SpiderGL.Type.INT32]=SpiderGL.Type.SIZEOF_INT32;typeMap[SpiderGL.Type.UINT32]=SpiderGL.Type.SIZEOF_UINT32;typeMap[SpiderGL.Type.FLOAT32]=SpiderGL.Type.SIZEOF_FLOAT32;return function(sglType){return typeMap[sglType];};})();SpiderGL.Type.typeToGL=(function(){var typeMap={};typeMap[SpiderGL.Type.NO_TYPE]=WebGLRenderingContext.NONE;typeMap[SpiderGL.Type.INT8]=WebGLRenderingContext.BYTE;typeMap[SpiderGL.Type.UINT8]=WebGLRenderingContext.UNSIGNED_BYTE;typeMap[SpiderGL.Type.INT16]=WebGLRenderingContext.SHORT;typeMap[SpiderGL.Type.UINT16]=WebGLRenderingContext.UNSIGNED_SHORT;typeMap[SpiderGL.Type.INT32]=WebGLRenderingContext.INT;typeMap[SpiderGL.Type.UINT32]=WebGLRenderingContext.UNSIGNED_INT;typeMap[SpiderGL.Type.FLOAT32]=WebGLRenderingContext.FLOAT;return function(sglType){return typeMap[sglType];};})();SpiderGL.Type.typeFromGL=(function(){var typeMap={};typeMap[WebGLRenderingContext.NONE]=SpiderGL.Type.NO_TYPE;typeMap[WebGLRenderingContext.BYTE]=SpiderGL.Type.INT8;typeMap[WebGLRenderingContext.UNSIGNED_BYTE]=SpiderGL.Type.UINT8;typeMap[WebGLRenderingContext.SHORT]=SpiderGL.Type.INT16;typeMap[WebGLRenderingContext.UNSIGNED_SHORT]=SpiderGL.Type.UINT16;typeMap[WebGLRenderingContext.INT]=SpiderGL.Type.INT32;typeMap[WebGLRenderingContext.UNSIGNED_INT]=SpiderGL.Type.UINT32;typeMap[WebGLRenderingContext.FLOAT]=SpiderGL.Type.FLOAT32;return function(glType){return typeMap[glType];};})();SpiderGL.Type.typeSizeFromGL=function(glType){var sglType=SpiderGL.Type.typeFromGL(glType);return SpiderGL.Type.typeSize(sglType);};SpiderGL.Type.typeToTypedArrayConstructor=(function(){var typeMap={};typeMap[SpiderGL.Type.NO_TYPE]=ArrayBuffer;typeMap[SpiderGL.Type.INT8]=Int8Array;typeMap[SpiderGL.Type.UINT8]=Uint8Array;typeMap[SpiderGL.Type.INT16]=Int16Array;typeMap[SpiderGL.Type.UINT16]=Uint16Array;typeMap[SpiderGL.Type.INT32]=Int32Array;typeMap[SpiderGL.Type.UINT32]=Uint32Array;typeMap[SpiderGL.Type.FLOAT32]=Float32Array;return function(sglType){return typeMap[sglType];};})();SpiderGL.Type.POINTS=0;SpiderGL.Type.LINES=1;SpiderGL.Type.LINE_LOOP=2;SpiderGL.Type.LINE_STRIP=3;SpiderGL.Type.TRIANGLES=4;SpiderGL.Type.TRIANGLE_FAN=5;SpiderGL.Type.TRIANGLE_STRIP=6;SpiderGL.Type.primitiveToGL=(function(){var enumMap={};enumMap[SpiderGL.Type.POINTS]=WebGLRenderingContext.POINTS;enumMap[SpiderGL.Type.LINES]=WebGLRenderingContext.LINES;enumMap[SpiderGL.Type.LINE_LOOP]=WebGLRenderingContext.LINE_LOOP;enumMap[SpiderGL.Type.LINE_STRIP]=WebGLRenderingContext.LINE_STRIP;enumMap[SpiderGL.Type.TRIANGLES]=WebGLRenderingContext.TRIANGLES;enumMap[SpiderGL.Type.TRIANGLE_FAN]=WebGLRenderingContext.TRIANGLE_FAN;enumMap[SpiderGL.Type.TRIANGLE_STRIP]=WebGLRenderingContext.TRIANGLE_STRIP;return function(sglEnum){return enumMap[sglEnum];};})();SpiderGL.Type.instanceOf=function(arg,ctor){return(arg instanceof ctor);}
SpiderGL.Type.isNumber=function(arg){return(typeof arg=="number");}
SpiderGL.Type.isString=function(arg){return(typeof arg=="string");}
SpiderGL.Type.isFunction=function(arg){return(typeof arg=="function");}
SpiderGL.Type.isArray=function(arg){return(arg&&arg.constructor===Array);}
SpiderGL.Type.isTypedArray=function(arg){return(arg&&(typeof arg.buffer!="undefined")&&(arg.buffer instanceof ArrayBuffer));}
SpiderGL.Type.extend=function(derived,base){function inheritance(){}
inheritance.prototype=base.prototype;var dproto=derived.prototype;var iproto=new inheritance();iproto.constructor=derived;var getter=null;var setter=null;for(var p in dproto){getter=dproto.__lookupGetter__(p);if(getter){iproto.__defineGetter__(p,getter);}
setter=dproto.__lookupSetter__(p);if(setter){iproto.__defineSetter__(p,setter);}
if(!getter&&!setter){iproto[p]=dproto[p];}}
derived.prototype=iproto;}
SpiderGL.Type.defineClassGetter=function(ctor,name,func){ctor.prototype.__defineGetter__(name,func);}
SpiderGL.Type.defineClassSetter=function(ctor,name,func){ctor.prototype.__defineSetter__(name,func);}
SpiderGL.Type.defineObjectGetter=function(obj,name,func){obj.__defineGetter__(name,func);}
SpiderGL.Type.defineObjectSetter=function(obj,name,func){obj.__defineSetter__(name,func);}
SpiderGL.Utility={};SpiderGL.Utility.getDefaultValue=function(arg,defaultValue){if((arg===undefined)||(arg===SpiderGL.Core.DEFAULT)){return defaultValue;}
return arg;}
SpiderGL.Utility.getDefaultObject=function(defaultObj,obj){if(obj){var sDefault=SpiderGL.Core.DEFAULT;for(var p in obj){if(obj[p]!=sDefault){defaultObj[p]=obj[p];}}}
return defaultObj;};SpiderGL.Utility.setDefaultValues=function(defaultObj,obj){if(!obj)return defaultObj;var sDefault=SpiderGL.Core.DEFAULT;for(var p in obj){if(obj[p]==sDefault){if(typeof defaultObj[p]!="undefined"){obj[p]=defaultObj[p];}}}
for(var p in defaultObj){if(typeof obj[p]=="undefined"){obj[p]=defaultObj[p];}}
return obj;};SpiderGL.Utility.getAttrib4fv=function(x){if(SpiderGL.Type.isNumber(x))return[x,0,0,1];if(!x)return[0,0,0,1];return[(x[0]!=undefined)?x[0]:0,(x[1]!=undefined)?x[1]:0,(x[2]!=undefined)?x[2]:0,(x[3]!=undefined)?x[3]:1];}
SpiderGL.Utility.getTime=function(){return(new Date()).getTime();};SpiderGL.Utility.Timer=function(){this._tStart=-1;this._tElapsed=0;}
SpiderGL.Utility.Timer.prototype={_accumElapsed:function(){this._tElapsed+=this.now-this._tStart;},get now(){return Date.now();},start:function(){if(this.isStarted)return;if(this.isPaused)return;this._tStart=this.now;this._tElapsed=0;},restart:function(){var r=this.elapsed;this._tStart=this.now;this._tElapsed=0;return r;},stop:function(){if(!this.isStarted)return;if(this.isPaused)return;this._accumElapsed();this._tStart=-1;},get isStarted(){return(this._tStart>=0);},pause:function(){if(!this.isStarted)return;if(this.isPaused)return;this._accumElapsed();this._tStart=-2;},resume:function(){if(!this.isStarted)return;if(!this.isPaused)return;this._tStart=this.now;},get isPaused(){return(this._tStart==-2);},get elapsed(){return((this.isStarted)?(this._tElapsed+(this.now-this._tStart)):(this._tElapsed))}};SpiderGL.DOM={};SpiderGL.DOM.getElementById=function(elementId){return document.getElementById(elementId);}
SpiderGL.DOM.getElementText=function(elementId){var elem=document.getElementById(elementId);if(!elem)return null;var str="";elem=elem.firstChild;while(elem){if(elem.nodeType==3){str+=elem.textContent;}
elem=elem.nextSibling;}
return str;}
SpiderGL.IO={};SpiderGL.IO.Request=function(url,options){SpiderGL.Core.ObjectBase.call(this);options=SpiderGL.Utility.getDefaultObject({async:SpiderGL.IO.Request.DEFAULT_ASYNC,send:SpiderGL.IO.Request.DEFAULT_SEND,onProgress:null,onCancel:null,onError:null,onSuccess:null,onFinish:null},options);this._url=url;this._async=options.async;this._status=SpiderGL.IO.Request.NONE;this._sent=false;this._aborted=false;this._data=null;this._loaded=0;this._total=0;this._events={progress:{main:null,listeners:[]},cancel:{main:null,listeners:[]},error:{main:null,listeners:[]},success:{main:null,listeners:[]},finish:{main:null,listeners:[]}};this.onProgress=options.onProgress;this.onCancel=options.onCancel;this.onError=options.onError;this.onSuccess=options.onSuccess;this.onFinish=options.onFinish;};SpiderGL.IO.Request.NONE=0;SpiderGL.IO.Request.ONGOING=1;SpiderGL.IO.Request.CANCELLED=2;SpiderGL.IO.Request.FAILED=3;SpiderGL.IO.Request.SUCCEEDED=4;SpiderGL.IO.Request.DEFAULT_ASYNC=true;SpiderGL.IO.Request.DEFAULT_SEND=true;SpiderGL.IO.Request.prototype={_indexOf:function(handlers,h){for(var i=0,n=handlers.length;i<n;++i){if(handlers[i]==h){return i;}}
return-1;},_setMainListener:function(eventName,eventHandler){var evt=this._events[eventName];if(!evt)return;if(evt.main==eventHandler)return;if(eventHandler){this.addEventListener(eventName,eventHandler);}
else{this.removeEventListener(eventName,eventHandler);}
evt.main=eventHandler;},_dispatch:function(){var name=arguments[0];var evt=this._events[name];if(!evt)return;var args=Array.prototype.slice.call(arguments,1);args.push(this);var lst=evt.listeners;for(var i=0,n=lst.length;i<n;++i){lst[i].apply(null,args);}},_doPostProgress:function(){},_doPostCancel:function(){},_doPostError:function(){},_doPostSuccess:function(){},_doPostFinish:function(){},_doOnProgress:function(loaded,total){if(this._aborted)return;this._loaded=loaded;this._total=total;this._doPostProgress();this._dispatch("progress",this._loaded,this._total);},_doOnCancel:function(){if(this._aborted)return;this._status=SpiderGL.IO.Request.CANCELLED;this._finishTime=SpiderGL.Utility.getTime();this._doPostCancel();this._dispatch("cancel");},_doOnError:function(){if(this._aborted)return;this._status=SpiderGL.IO.Request.FAILED;this._finishTime=SpiderGL.Utility.getTime();this._doPostError();this._dispatch("error");},_doOnSuccess:function(){if(this._aborted)return;this._status=SpiderGL.IO.Request.SUCCEEDED;this._finishTime=SpiderGL.Utility.getTime();this._doPostSuccess();this._dispatch("success");},_doOnFinish:function(){this._doPostFinish();this._dispatch("finish");},_doSend:function(){return false;},_doCancel:function(){return false;},get canSend(){return(this._url&&!this._sent);},get url(){return this._url;},set url(s){this.cancel();this._url=s;},get status(){return this._status;},get data(){return this._data;},get bytesLoaded(){return this._loaded;},get bytesTotal(){return this._total;},get sent(){return this._sent;},get ongoing(){return(this._status==SpiderGL.IO.Request.ONGOING);},get cancelled(){return(this._status==SpiderGL.IO.Request.CANCELLED);},get failed(){return(this._status==SpiderGL.IO.Request.FAILED);},get succeeded(){return(this._status==SpiderGL.IO.Request.SUCCEEDED);},get finished(){return(this.succeeded||this.failed||this.cancelled);},get startTime(){return this._startTime;},get finishTime(){return this._finishTime;},get elapsedTime(){if(this._startTime<0)return 0;if(this._finishTime<0)return(SpiderGL.Utility.getTime()-this._startTime);return(this._finishTime-this._startTime);},addEventListener:function(eventName,eventHandler){if(!eventHandler)return;var evt=this._events[eventName];if(!evt)return;var idx=this._indexOf(evt.listeners,eventHandler);if(idx>=0)return;evt.listeners.push(eventHandler);},removeEventListener:function(eventName,eventHandler){var evt=this._events[eventName];if(!evt)return;var idx=this._indexOf(evt.listeners,eventHandler);if(idx<0)return;evt.listeners.splice(idx,1);},get onProgress(){return this._events.progress.main;},set onProgress(f){this._setMainListener("progress",f);},get onCancel(){return this._events.cancel.main;},set onCancel(f){this._setMainListener("cancel",f);},get onError(){return this._events.error.main;},set onError(f){this._setMainListener("error",f);},get onSuccess(){return this._events.success.main;},set onSuccess(f){this._setMainListener("success",f);},get onFinish(){return this._events.finish.main;},set onFinish(f){this._setMainListener("finish",f);},cancel:function(){if(!this.ongoing){return false;}
this._status=SpiderGL.IO.Request.CANCELLED;this._aborted=true;var r=this._doCancel();this._finishTime=SpiderGL.Utility.getTime();return r;},send:function(){if(!this.canSend){return false;}
this._data=null;this._status=SpiderGL.IO.Request.ONGOING;this._aborted=false;this._sent=true;this._finishTime=-1;this._startTime=SpiderGL.Utility.getTime();var r=this._doSend();if(!r){this._startTime=-1;this._status=SpiderGL.IO.Request.NONE;this._sent=false;};return r;}};SpiderGL.Type.extend(SpiderGL.IO.Request,SpiderGL.Core.ObjectBase);SpiderGL.IO.XHRRequestBase=function(url,options){options=options||{};SpiderGL.IO.Request.call(this,url,options);var that=this;var xhr=new XMLHttpRequest();this._xhr=xhr;xhr.onprogress=function(evt){that._xhrOnProgress(evt);};xhr.onabort=function(){that._doOnCancel();that._doOnFinish();};xhr.onerror=function(){that._doOnError();that._doOnFinish();};xhr.onload=function(){var status=xhr.status;if((status===0)||(status===200)||(!!that._range&&(status==206))){that._doOnSuccess();}
else{that._doOnError();}
that._doOnFinish();};this._range=null;this._xhr.open("GET",this._url,this._async);if("range"in options){this._range=[options.range[0],options.range[1]];var rangeStr="bytes="+options.range[0]+"-"+options.range[1];xhr.setRequestHeader("Range",rangeStr);}
this._prepareXHR();var send=SpiderGL.Utility.getDefaultValue(options.send,SpiderGL.IO.Request.DEFAULT_SEND);if(send){this.send();}};SpiderGL.IO.XHRRequestBase.prototype={_prepareXHR:function(){},_doCancel:function(){this._xhr.abort();this._xhr=new XMLHttpRequest();this._xhr.open("GET",this._url,this._async);this._prepareXHR();return true;},_doSend:function(){this._xhr.send();return true;},_xhrOnProgress:function(evt){var loaded=0;var total=0;if(evt&&evt.lengthComputable){loaded=evt.loaded;total=evt.total;}
this._doOnProgress(loaded,total);}};SpiderGL.Type.extend(SpiderGL.IO.XHRRequestBase,SpiderGL.IO.Request);SpiderGL.IO.XHRRequest=function(url,options){SpiderGL.IO.XHRRequestBase.call(this,url,options);};SpiderGL.IO.XHRRequest.prototype={_doPostSuccess:function(){this._data=this._xhr.responseText;},get xhr(){return this._xhr;},get response(){return this.data;}};SpiderGL.Type.extend(SpiderGL.IO.XHRRequest,SpiderGL.IO.XHRRequestBase);SpiderGL.IO.TextRequest=function(url,options){SpiderGL.IO.XHRRequestBase.call(this,url,options);};SpiderGL.IO.TextRequest.prototype={_doPostSuccess:function(){this._data=this._xhr.responseText;},get text(){return this.data;}};SpiderGL.Type.extend(SpiderGL.IO.TextRequest,SpiderGL.IO.XHRRequestBase);SpiderGL.IO.readText=function(url){var r=new SpiderGL.IO.TextRequest(url,{async:false});return r.text;};SpiderGL.IO.requestText=function(url,options){options=SpiderGL.Utility.getDefaultObject({},options);options.async=true;options.send=true;var r=new SpiderGL.IO.TextRequest(url,options);return r;};SpiderGL.IO.JSONRequest=function(url,options){SpiderGL.IO.XHRRequestBase.call(this,url,options);};SpiderGL.IO.JSONRequest.prototype={_doPostSuccess:function(){this._data=JSON.parse(this._xhr.responseText);},get text(){return this._xhr.responseText;},get json(){return this.data;}};SpiderGL.Type.extend(SpiderGL.IO.JSONRequest,SpiderGL.IO.XHRRequestBase);SpiderGL.IO.readJSON=function(url){var r=new SpiderGL.IO.JSONRequest(url,{async:false});return r.json;};SpiderGL.IO.requestJSON=function(url,options){options=SpiderGL.Utility.getDefaultObject({},options);options.async=true;options.send=true;var r=new SpiderGL.IO.JSONRequest(url,options);return r;};SpiderGL.IO.BinaryRequest=function(url,options){SpiderGL.IO.XHRRequestBase.call(this,url,options);};SpiderGL.IO.BinaryRequest.prototype={_prepareXHR:function(){var xhr=this._xhr;var overrideMime=false;if(overrideMime){xhr.overrideMimeType("text/plain; charset=x-user-defined");}
xhr.responseType="arraybuffer";},_setArrayBuffer:function(){var xhr=this._xhr;if(xhr.responseType=="arraybuffer"){this._data=xhr.response;}
else if(xhr.mozResponseArrayBuffer!=null){this._data=xhr.mozResponseArrayBuffer;}
else if(xhr.responseText!=null){var data=new String(xhr.responseText);var arr=new Array(data.length);for(var i=0,n=data.length;i<n;++i){arr[i]=data.charCodeAt(i)&0xff;}
this._data=(new Uint8Array(arr)).buffer;}
else{this._data=null;}},_doPostSuccess:function(){this._setArrayBuffer();},get data(){if(this.ongoing){this._setArrayBuffer();}
return this._data;},get buffer(){return this.data;}};SpiderGL.Type.extend(SpiderGL.IO.BinaryRequest,SpiderGL.IO.XHRRequestBase);SpiderGL.IO.readBinary=function(url){var r=new SpiderGL.IO.BinaryRequest(url,{async:false});return r.buffer;};SpiderGL.IO.requestBinary=function(url,options){options=SpiderGL.Utility.getDefaultObject({},options);options.async=true;options.send=true;var r=new SpiderGL.IO.BinaryRequest(url,options);return r;};SpiderGL.IO.ImageRequest=function(url,options){options=options||{};SpiderGL.IO.Request.call(this,url,options);var that=this;var img=new Image();this._img=img;this._data=img;img.onabort=function(){that._doOnCancel();that._doOnFinish();};img.onerror=function(){that._doOnError();that._doOnFinish();};img.onload=function(){that._doOnSuccess();that._doOnFinish();};if(typeof img.onprogress!="undefined"){img.onprogress=function(evt){that._imgOnProgress(evt);};}
var send=SpiderGL.Utility.getDefaultValue(options.send,SpiderGL.IO.Request.DEFAULT_SEND);if(send){this.send();}};SpiderGL.IO.ImageRequest.prototype={_doPostSuccess:function(){this._data=this._img;},_doCancel:function(){this._img.src=null;this._img=new Image();return true;},_doSend:function(){this._img.src=this._url;return true;},_imgOnProgress:function(evt){var loaded=0;var total=0;if(evt&&evt.lengthComputable){loaded=evt.loaded;total=evt.total;}
this._doOnProgress(loaded,total);},get image(){return this.data;}};SpiderGL.Type.extend(SpiderGL.IO.ImageRequest,SpiderGL.IO.Request);SpiderGL.IO.requestImage=function(url,options){options=SpiderGL.Utility.getDefaultObject({},options);options.async=true;options.send=true;var r=new SpiderGL.IO.ImageRequest(url,options);return r;};SpiderGL.IO.AggregateRequest=function(options){options=options||{};SpiderGL.IO.Request.call(this,"*",options);var that=this;this._proxyOnProgress=function(loaded,total,req){that._reqOnProgress(loaded,total,req);};this._proxyOnCancel=function(req){that._reqOnCancel(req);};this._proxyOnError=function(req){that._reqOnError(req);};this._proxyOnSuccess=function(req){that._reqOnSuccess(req);};this._proxyOnFinish=function(req){that._reqOnFinish(req);};this._aggrStartTime=-1;this._aggrFinishTime=-1;this._eventReq=null;this._cancelledReqs=0;this._failedReqs=0;this._succeededReqs=0;this._requests=[];var requests=options.requests;if(requests){for(var i=0,n=requests.length;i<n;++i){var r=requests[i];if(r&&!r.sent){this._installProxies(r);this.addRequest(r);}}}
var send=SpiderGL.Utility.getDefaultValue(options.send,SpiderGL.IO.Request.DEFAULT_SEND);if(send){this.send();}};SpiderGL.IO.AggregateRequest.prototype={_doPostCancel:function(){if(!this._requestsFinished){this._status=SpiderGL.IO.Request.ONGOING;}},_doPostError:function(){if(!this._requestsFinished){this._status=SpiderGL.IO.Request.ONGOING;}},_doPostSuccess:function(){if(!this._requestsFinished){this._status=SpiderGL.IO.Request.ONGOING;}},_doCancel:function(){var requests=this._requests;for(var i=0,n=requests.length;i<n;++i){requests[i].cancel();}
this._aggrFinishTime=SpiderGL.Utility.getTime();},_doSend:function(){this._aggrStartTime=SpiderGL.Utility.getTime();var requests=this._requests;for(var i=0,n=requests.length;i<n;++i){requests[i].send();}},get _requestsFinished(){return((this._cancelledReqs+this._failedReqs+this._succeededReqs)==this._requests.length);},_installProxies:function(req){req.addEventListener("progress",this._proxyOnProgress);req.addEventListener("cancel",this._proxyOnCancel);req.addEventListener("error",this._proxyOnError);req.addEventListener("success",this._proxyOnSuccess);req.addEventListener("finish",this._proxyOnFinish);},_uninstallProxies:function(req){req.removeEventListener("progress",this._proxyOnProgress);req.removeEventListener("cancel",this._proxyOnCancel);req.removeEventListener("error",this._proxyOnError);req.removeEventListener("success",this._proxyOnSuccess);req.removeEventListener("finish",this._proxyOnFinish);},_reqOnProgress:function(loaded,total,req){var idx=this._indexOf(this._requests,req);if(idx<0)return;this._eventReq=req;this._doOnProgress(loaded,total);this._eventReq=null;},_reqOnCancel:function(req){var idx=this._indexOf(this._requests,req);if(idx<0)return;this._eventReq=req;this._cancelledReqs++;if(this._requestsFinished){this._aggrFinishTime=SpiderGL.Utility.getTime();if(this._cancelledReqs==this._requests.length){this._eventReq=this;this._doOnCancel();}}
else{}
this._eventReq=null;},_reqOnError:function(req){var idx=this._indexOf(this._requests,req);if(idx<0)return;this._eventReq=req;this._failedReqs++;if(this._requestsFinished){this._aggrFinishTime=SpiderGL.Utility.getTime();this._eventReq=this;this._doOnError();}
this._eventReq=null;},_reqOnSuccess:function(req){var idx=this._indexOf(this._requests,req);if(idx<0)return;this._eventReq=req;this._succeededReqs++;if(this._requestsFinished){this._aggrFinishTime=SpiderGL.Utility.getTime();this._eventReq=this;if(this._failedReqs>0){this._doOnError();}
else{this._doOnSuccess();}}
this._eventReq=null;},_reqOnFinish:function(req){var idx=this._indexOf(this._requests,req);if(idx<0)return;this._uninstallProxies(req);this._eventReq=req;if(this._requestsFinished){this._eventReq=this;this._doOnFinish();}
this._eventReq=null;},get eventSenderRequest(){return this._eventReq;},get requests(){return this._requests.slice();},get requests$(){return this._requests;},get startTime(){return this._aggrStartTime;},get finishTime(){return this._aggrFinishTime;},get elapsedTime(){if(this._aggrStartTime<0)return 0;if(this._aggrFinishTime<0)return(SpiderGL.Utility.getTime()-this._aggrStartTime);return(this._aggrFinishTime-this._aggrStartTime);},addRequest:function(r){if(!r||this._sent)return;var idx=this._indexOf(this._requests,r);if(idx>=0)return;this._requests.push(r);},removeRequest:function(r){if(!r||this._sent)return;var idx=this._indexOf(this._requests,r);if(idx<0)return;this._requests.splice(idx,1);}};SpiderGL.Type.extend(SpiderGL.IO.AggregateRequest,SpiderGL.IO.Request);SpiderGL.Math={};SpiderGL.Math.DEG_TO_RAD=(Math.PI/180.0);SpiderGL.Math.E=Math.E;SpiderGL.Math.LN2=Math.LN2;SpiderGL.Math.LN10=Math.LN10;SpiderGL.Math.LOG2E=Math.LOG2E;SpiderGL.Math.LOG10E=Math.LOG10E;SpiderGL.Math.PI=Math.PI;SpiderGL.Math.RAD_TO_DEG=(180.0/Math.PI);SpiderGL.Math.SQRT2=Math.SQRT2;SpiderGL.Math.MAX_VALUE=Number.MAX_VALUE;SpiderGL.Math.MIN_VALUE=Number.MIN_VALUE;SpiderGL.Math.MAX_NUMBER=SpiderGL.Math.MAX_VALUE;SpiderGL.Math.MIN_NUMBER=-SpiderGL.Math.MAX_VALUE;SpiderGL.Math.NAN=Number.NaN;SpiderGL.Math.INFINITY=Infinity;SpiderGL.Math.abs=function(x){return Math.abs(x);}
SpiderGL.Math.acos=function(x){return Math.acos(x);}
SpiderGL.Math.asin=function(x){return Math.asin(x);}
SpiderGL.Math.atan=function(x){return Math.atan(x);}
SpiderGL.Math.atan2=function(y,x){return Math.atan2(y,x);}
SpiderGL.Math.ceil=function(x){return Math.ceil(x);}
SpiderGL.Math.clamp=function(x,min,max){return((x<=min)?(min):((x>=max)?(max):(x)));}
SpiderGL.Math.cos=function(x){return Math.cos(x);}
SpiderGL.Math.degToRad=function(x){return(x*SpiderGL.Math.DEG_TO_RAD);}
SpiderGL.Math.exp=function(x){return Math.exp(x);}
SpiderGL.Math.floor=function(x){return Math.floor(x);}
SpiderGL.Math.lerp=function(x,y,t){return x+t*(y-x);}
SpiderGL.Math.ln=function(x){return Math.log(x);}
SpiderGL.Math.log=function(x){return Math.log(x);}
SpiderGL.Math.log2=function(x){return(SpiderGL.Math.log(x)/SpiderGL.Math.LN2);}
SpiderGL.Math.log10=function(x){return(SpiderGL.Math.log(x)/SpiderGL.Math.LN10);}
SpiderGL.Math.max=function(args){return Math.max.apply(Math,arguments);}
SpiderGL.Math.min=function(args){return Math.min.apply(Math,arguments);}
SpiderGL.Math.pow=function(x,y){return Math.pow(x,y);}
SpiderGL.Math.radToDeg=function(x){return(x*SpiderGL.Math.RAD_TO_DEG);}
SpiderGL.Math.random=function(){return Math.random();}
SpiderGL.Math.random01=function(){return SpiderGL.Math.random();}
SpiderGL.Math.random11=function(){return(SpiderGL.Math.random()*2-1);}
SpiderGL.Math.randomRange=function(min,max){return(min+SpiderGL.Math.random()*(max-min));}
SpiderGL.Math.round=function(x){return Math.sqrt(x);}
SpiderGL.Math.sin=function(x){return Math.sin(x);}
SpiderGL.Math.sqrt=function(x){return Math.sqrt(x);}
SpiderGL.Math.tan=function(x){return Math.tan(x);}
SpiderGL.Math.Vec2={};SpiderGL.Math.Vec2.dup=function(v){return v.slice(0,2);}
SpiderGL.Math.Vec2.scalar=function(s){return[s,s];}
SpiderGL.Math.Vec2.zero=function(){return[0,0];}
SpiderGL.Math.Vec2.one=function(){return[1,1];}
SpiderGL.Math.Vec2.maxNumber=function(){return[SpiderGL.Math.MAX_NUMBER,SpiderGL.Math.MAX_NUMBER];}
SpiderGL.Math.Vec2.minNumber=function(){return[SpiderGL.Math.MIN_NUMBER,SpiderGL.Math.MIN_NUMBER];}
SpiderGL.Math.Vec2.to3=function(v,z){return[v[0],v[1],(z!=undefined)?z:0];}
SpiderGL.Math.Vec2.to4=function(v,z,w){return[v[0],v[1],v[2],(z!=undefined)?z:0,(w!=undefined)?w:1];}
SpiderGL.Math.Vec2.neg=function(v){return[-v[0],-v[1]];}
SpiderGL.Math.Vec2.add=function(u,v){return[u[0]+v[0],u[1]+v[1]];}
SpiderGL.Math.Vec2.adds=function(v,s){return[v[0]+s,v[1]+s];}
SpiderGL.Math.Vec2.sub=function(u,v){return[u[0]-v[0],u[1]-v[1]];}
SpiderGL.Math.Vec2.subs=function(v,s){return[v[0]-s,v[1]-s];}
SpiderGL.Math.Vec2.ssub=function(s,v){return[s-v[0],s-v[1]];}
SpiderGL.Math.Vec2.mul=function(u,v){return[u[0]*v[0],u[1]*v[1]];}
SpiderGL.Math.Vec2.muls=function(v,s){return[v[0]*s,v[1]*s];}
SpiderGL.Math.Vec2.div=function(u,v){return[u[0]/v[0],u[1]/v[1]];}
SpiderGL.Math.Vec2.divs=function(v,s){return[v[0]/s,v[1]/s];}
SpiderGL.Math.Vec2.sdiv=function(s,v){return[s/v[0],s/v[1]];}
SpiderGL.Math.Vec2.rcp=function(v){return[1.0/v[0],1.0/v[1]];}
SpiderGL.Math.Vec2.dot=function(u,v){return(u[0]*v[0]+u[1]*v[1]);}
SpiderGL.Math.Vec2.cross=function(u,v){return(u[0]*v[1]-u[1]*v[0]);}
SpiderGL.Math.Vec2.perp=function(v){return[v[1],-v[0]];}
SpiderGL.Math.Vec2.sqLength=function(v){return SpiderGL.Math.Vec2.dot(v,v);}
SpiderGL.Math.Vec2.length=function(v){return SpiderGL.Math.sqrt(SpiderGL.Math.Vec2.sqLength(v));}
SpiderGL.Math.Vec2.normalize=function(v){var f=1.0/SpiderGL.Math.Vec2.length(v);return SpiderGL.Math.Vec2.muls(v,f);}
SpiderGL.Math.Vec2.abs=function(v){return[SpiderGL.Math.abs(v[0]),SpiderGL.Math.abs(v[1])];}
SpiderGL.Math.Vec2.acos=function(v){return[SpiderGL.Math.acos(v[0]),SpiderGL.Math.acos(v[1])];}
SpiderGL.Math.Vec2.asin=function(v){return[SpiderGL.Math.asin(v[0]),SpiderGL.Math.asin(v[1])];}
SpiderGL.Math.Vec2.atan=function(v){return[SpiderGL.Math.atan(v[0]),SpiderGL.Math.atan(v[1])];}
SpiderGL.Math.Vec2.atan2=function(y,x){return[SpiderGL.Math.atan2(y[0],x[0]),SpiderGL.Math.atan2(y[1],x[1])];}
SpiderGL.Math.Vec2.ceil=function(v){return[SpiderGL.Math.ceil(v[0]),SpiderGL.Math.ceil(v[1])];}
SpiderGL.Math.Vec2.clamp=function(v,min,max){return[SpiderGL.Math.clamp(v[0],min[0],max[0]),SpiderGL.Math.clamp(v[1],min[1],max[1])];}
SpiderGL.Math.Vec2.cos=function(v){return[SpiderGL.Math.cos(v[0]),SpiderGL.Math.cos(v[1])];}
SpiderGL.Math.Vec2.degToRad=function(v){return[SpiderGL.Math.degToRad(v[0]),SpiderGL.Math.degToRad(v[1])];}
SpiderGL.Math.Vec2.exp=function(v){return[SpiderGL.Math.exp(v[0]),SpiderGL.Math.exp(v[1])];}
SpiderGL.Math.Vec2.floor=function(v){return[SpiderGL.Math.floor(v[0]),SpiderGL.Math.floor(v[1])];}
SpiderGL.Math.Vec2.lerp=function(u,v,t){return[SpiderGL.Math.lerp(u[0],v[0],t),SpiderGL.Math.lerp(u[1],v[1],t)];}
SpiderGL.Math.Vec2.ln=function(v){return[SpiderGL.Math.ln(v[0]),SpiderGL.Math.ln(v[1])];}
SpiderGL.Math.Vec2.log=function(v){return[SpiderGL.Math.log(v[0]),SpiderGL.Math.log(v[1])];}
SpiderGL.Math.Vec2.log2=function(v){return[SpiderGL.Math.log2(v[0]),SpiderGL.Math.log2(v[1])];}
SpiderGL.Math.Vec2.log10=function(v){return[SpiderGL.Math.log10(v[0]),SpiderGL.Math.log10(v[1])];}
SpiderGL.Math.Vec2.max=function(u,v){return[SpiderGL.Math.max(u[0],v[0]),SpiderGL.Math.max(u[1],v[1])];}
SpiderGL.Math.Vec2.min=function(u,v){return[SpiderGL.Math.min(u[0],v[0]),SpiderGL.Math.min(u[1],v[1])];}
SpiderGL.Math.Vec2.pow=function(u,v){return[SpiderGL.Math.pow(u[0],v[0]),SpiderGL.Math.pow(u[1],v[1])];}
SpiderGL.Math.Vec2.radToDeg=function(v){return[SpiderGL.Math.radToDeg(v[0]),SpiderGL.Math.radToDeg(v[1])];}
SpiderGL.Math.Vec2.random=function(){return[SpiderGL.Math.random(),SpiderGL.Math.random()];}
SpiderGL.Math.Vec2.random01=function(){return[SpiderGL.Math.random01(),SpiderGL.Math.random01()];}
SpiderGL.Math.Vec2.random11=function(){return[SpiderGL.Math.random11(),SpiderGL.Math.random11()];}
SpiderGL.Math.Vec2.randomRange=function(min,max){return[SpiderGL.Math.randomRange(min[0],max[0]),SpiderGL.Math.randomRange(min[1],max[1])];}
SpiderGL.Math.Vec2.round=function(v){return[SpiderGL.Math.round(v[0]),SpiderGL.Math.round(v[1])];}
SpiderGL.Math.Vec2.sin=function(v){return[SpiderGL.Math.sin(v[0]),SpiderGL.Math.sin(v[1])];}
SpiderGL.Math.Vec2.sqrt=function(v){return[SpiderGL.Math.sqrt(v[0]),SpiderGL.Math.sqrt(v[1])];}
SpiderGL.Math.Vec2.tan=function(v){return[SpiderGL.Math.tan(v[0]),SpiderGL.Math.tan(v[1])];}
SpiderGL.Math.Vec2.copy$=function(u,v){u[0]=v[0];u[1]=v[1];return u;}
SpiderGL.Math.Vec2.neg$=function(v){v[0]=-v[0];v[1]=-v[1];return v;}
SpiderGL.Math.Vec2.add$=function(u,v){u[0]+=v[0];u[1]+=v[1];return u;}
SpiderGL.Math.Vec2.adds$=function(v,s){v[0]+=s;v[1]+=s;return v;}
SpiderGL.Math.Vec2.sub$=function(u,v){u[0]-=v[0];u[1]-=v[1];return u;}
SpiderGL.Math.Vec2.subs$=function(v,s){v[0]-=s;v[1]-=s;return v;}
SpiderGL.Math.Vec2.ssub$=function(s,v){v[0]=s-v[0];v[1]=s-v[1];return v;}
SpiderGL.Math.Vec2.mul$=function(u,v){u[0]*=v[0];u[1]*=v[1];return u;}
SpiderGL.Math.Vec2.muls$=function(v,s){v[0]*=s;v[1]*=s;return v;}
SpiderGL.Math.Vec2.div$=function(u,v){u[0]/=v[0];u[1]/=v[1];return u;}
SpiderGL.Math.Vec2.divs$=function(v,s){v[0]/=s;v[1]/=s;return v;}
SpiderGL.Math.Vec2.sdiv$=function(v,s){v[0]=s/v[0];v[1]=s/v[1];return v;}
SpiderGL.Math.Vec2.perp$=function(v){var v0=v[0];v[0]=v[1];v[1]=-v0;return v;}
SpiderGL.Math.Vec2.normalize$=function(v){var f=1.0/SpiderGL.Math.Vec2.length(v);return SpiderGL.Math.Vec2.muls$(v,f);}
SpiderGL.Math.Vec3={};SpiderGL.Math.Vec3.dup=function(v){return v.slice(0,3);}
SpiderGL.Math.Vec3.scalar=function(s){return[s,s,s];}
SpiderGL.Math.Vec3.zero=function(){return[0,0,0];}
SpiderGL.Math.Vec3.one=function(){return[1,1,1];}
SpiderGL.Math.Vec3.maxNumber=function(){return[SpiderGL.Math.MAX_NUMBER,SpiderGL.Math.MAX_NUMBER,SpiderGL.Math.MAX_NUMBER];}
SpiderGL.Math.Vec3.minNumber=function(){return[SpiderGL.Math.MIN_NUMBER,SpiderGL.Math.MIN_NUMBER,SpiderGL.Math.MIN_NUMBER];}
SpiderGL.Math.Vec3.to2=function(v){return[v[0],v[1]];}
SpiderGL.Math.Vec3.to4=function(v,w){return[v[0],v[1],v[2],(w!=undefined)?w:1];}
SpiderGL.Math.Vec3.neg=function(v){return[-v[0],-v[1],-v[2]];}
SpiderGL.Math.Vec3.add=function(u,v){return[u[0]+v[0],u[1]+v[1],u[2]+v[2]];}
SpiderGL.Math.Vec3.adds=function(v,s){return[v[0]+s,v[1]+s,v[2]+s];}
SpiderGL.Math.Vec3.sub=function(u,v){return[u[0]-v[0],u[1]-v[1],u[2]-v[2]];}
SpiderGL.Math.Vec3.subs=function(v,s){return[v[0]-s,v[1]-s,v[2]-s];}
SpiderGL.Math.Vec3.ssub=function(s,v){return[s-v[0],s-v[1],s-v[2]];}
SpiderGL.Math.Vec3.mul=function(u,v){return[u[0]*v[0],u[1]*v[1],u[2]*v[2]];}
SpiderGL.Math.Vec3.muls=function(v,s){return[v[0]*s,v[1]*s,v[2]*s];}
SpiderGL.Math.Vec3.div=function(u,v){return[u[0]/v[0],u[1]/v[1],u[2]/v[2]];}
SpiderGL.Math.Vec3.divs=function(v,s){return[v[0]/s,v[1]/s,v[2]/s];}
SpiderGL.Math.Vec3.sdiv=function(s,v){return[s/v[0],s/v[1],s/v[2]];}
SpiderGL.Math.Vec3.rcp=function(v){return[1.0/v[0],1.0/v[1],1.0/v[2]];}
SpiderGL.Math.Vec3.dot=function(u,v){return(u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);}
SpiderGL.Math.Vec3.cross=function(u,v){return[u[1]*v[2]-u[2]*v[1],u[2]*v[0]-u[0]*v[2],u[0]*v[1]-u[1]*v[0]];}
SpiderGL.Math.Vec3.sqLength=function(v){return SpiderGL.Math.Vec3.dot(v,v);}
SpiderGL.Math.Vec3.length=function(v){return SpiderGL.Math.sqrt(SpiderGL.Math.Vec3.sqLength(v));}
SpiderGL.Math.Vec3.normalize=function(v){var f=1.0/SpiderGL.Math.Vec3.length(v);return SpiderGL.Math.Vec3.muls(v,f);}
SpiderGL.Math.Vec3.abs=function(v){return[SpiderGL.Math.abs(v[0]),SpiderGL.Math.abs(v[1]),SpiderGL.Math.abs(v[2])];}
SpiderGL.Math.Vec3.acos=function(v){return[SpiderGL.Math.acos(v[0]),SpiderGL.Math.acos(v[1]),SpiderGL.Math.acos(v[2])];}
SpiderGL.Math.Vec3.asin=function(v){return[SpiderGL.Math.asin(v[0]),SpiderGL.Math.asin(v[1]),SpiderGL.Math.asin(v[2])];}
SpiderGL.Math.Vec3.atan=function(v){return[SpiderGL.Math.atan(v[0]),SpiderGL.Math.atan(v[1]),SpiderGL.Math.atan(v[2])];}
SpiderGL.Math.Vec3.atan2=function(y,x){return[SpiderGL.Math.atan2(y[0],x[0]),SpiderGL.Math.atan2(y[1],x[1]),SpiderGL.Math.atan2(y[2],x[2])];}
SpiderGL.Math.Vec3.ceil=function(v){return[SpiderGL.Math.ceil(v[0]),SpiderGL.Math.ceil(v[1]),SpiderGL.Math.ceil(v[2])];}
SpiderGL.Math.Vec3.clamp=function(v,min,max){return[SpiderGL.Math.clamp(v[0],min[0],max[0]),SpiderGL.Math.clamp(v[1],min[1],max[1]),SpiderGL.Math.clamp(v[2],min[2],max[2])];}
SpiderGL.Math.Vec3.cos=function(v){return[SpiderGL.Math.cos(v[0]),SpiderGL.Math.cos(v[1]),SpiderGL.Math.cos(v[2])];}
SpiderGL.Math.Vec3.degToRad=function(v){return[SpiderGL.Math.degToRad(v[0]),SpiderGL.Math.degToRad(v[1]),SpiderGL.Math.degToRad(v[2])];}
SpiderGL.Math.Vec3.exp=function(v){return[SpiderGL.Math.exp(v[0]),SpiderGL.Math.exp(v[1]),SpiderGL.Math.exp(v[2])];}
SpiderGL.Math.Vec3.floor=function(v){return[SpiderGL.Math.floor(v[0]),SpiderGL.Math.floor(v[1]),SpiderGL.Math.floor(v[2])];}
SpiderGL.Math.Vec3.lerp=function(u,v,t){return[SpiderGL.Math.lerp(u[0],v[0],t),SpiderGL.Math.lerp(u[1],v[1],t),SpiderGL.Math.lerp(u[2],v[2],t)];}
SpiderGL.Math.Vec3.ln=function(v){return[SpiderGL.Math.ln(v[0]),SpiderGL.Math.ln(v[1]),SpiderGL.Math.ln(v[2])];}
SpiderGL.Math.Vec3.log=function(v){return[SpiderGL.Math.log(v[0]),SpiderGL.Math.log(v[1]),SpiderGL.Math.log(v[2])];}
SpiderGL.Math.Vec3.log2=function(v){return[SpiderGL.Math.log2(v[0]),SpiderGL.Math.log2(v[1]),SpiderGL.Math.log2(v[2])];}
SpiderGL.Math.Vec3.log10=function(v){return[SpiderGL.Math.log10(v[0]),SpiderGL.Math.log10(v[1]),SpiderGL.Math.log10(v[2])];}
SpiderGL.Math.Vec3.max=function(u,v){return[SpiderGL.Math.max(u[0],v[0]),SpiderGL.Math.max(u[1],v[1]),SpiderGL.Math.max(u[2],v[2])];}
SpiderGL.Math.Vec3.min=function(u,v){return[SpiderGL.Math.min(u[0],v[0]),SpiderGL.Math.min(u[1],v[1]),SpiderGL.Math.min(u[2],v[2])];}
SpiderGL.Math.Vec3.pow=function(u,v){return[SpiderGL.Math.pow(u[0],v[0]),SpiderGL.Math.pow(u[1],v[1]),SpiderGL.Math.pow(u[2],v[2])];}
SpiderGL.Math.Vec3.radToDeg=function(v){return[SpiderGL.Math.radToDeg(v[0]),SpiderGL.Math.radToDeg(v[1]),SpiderGL.Math.radToDeg(v[2])];}
SpiderGL.Math.Vec3.random=function(){return[SpiderGL.Math.random(),SpiderGL.Math.random(),SpiderGL.Math.random()];}
SpiderGL.Math.Vec3.random01=function(){return[SpiderGL.Math.random01(),SpiderGL.Math.random01(),SpiderGL.Math.random01()];}
SpiderGL.Math.Vec3.random11=function(){return[SpiderGL.Math.random11(),SpiderGL.Math.random11(),SpiderGL.Math.random11()];}
SpiderGL.Math.Vec3.randomRange=function(min,max){return[SpiderGL.Math.randomRange(min[0],max[0]),SpiderGL.Math.randomRange(min[1],max[1]),SpiderGL.Math.randomRange(min[2],max[2])];}
SpiderGL.Math.Vec3.round=function(v){return[SpiderGL.Math.round(v[0]),SpiderGL.Math.round(v[1]),SpiderGL.Math.round(v[2])];}
SpiderGL.Math.Vec3.sin=function(v){return[SpiderGL.Math.sin(v[0]),SpiderGL.Math.sin(v[1]),SpiderGL.Math.sin(v[2])];}
SpiderGL.Math.Vec3.sqrt=function(v){return[SpiderGL.Math.sqrt(v[0]),SpiderGL.Math.sqrt(v[1]),SpiderGL.Math.sqrt(v[2])];}
SpiderGL.Math.Vec3.tan=function(v){return[SpiderGL.Math.tan(v[0]),SpiderGL.Math.tan(v[1]),SpiderGL.Math.tan(v[2])];}
SpiderGL.Math.Vec3.copy$=function(u,v){u[0]=v[0];u[1]=v[1];u[2]=v[2];return u;}
SpiderGL.Math.Vec3.neg$=function(v){v[0]=-v[0];v[1]=-v[1];v[2]=-v[2];return v;}
SpiderGL.Math.Vec3.add$=function(u,v){u[0]+=v[0];u[1]+=v[1];u[2]+=v[2];return u;}
SpiderGL.Math.Vec3.adds$=function(v,s){v[0]+=s;v[1]+=s;v[2]+=s;return v;}
SpiderGL.Math.Vec3.sub$=function(u,v){u[0]-=v[0];u[1]-=v[1];u[2]-=v[2];return u;}
SpiderGL.Math.Vec3.subs$=function(v,s){v[0]-=s;v[1]-=s;v[2]-=s;return v;}
SpiderGL.Math.Vec3.ssub$=function(s,v){v[0]=s-v[0];v[1]=s-v[1];v[2]=s-v[2];return v;}
SpiderGL.Math.Vec3.mul$=function(u,v){u[0]*=v[0];u[1]*=v[1];u[2]*=v[2];return u;}
SpiderGL.Math.Vec3.muls$=function(v,s){v[0]*=s;v[1]*=s;v[2]*=s;return v;}
SpiderGL.Math.Vec3.div$=function(u,v){u[0]/=v[0];u[1]/=v[1];u[2]/=v[2];return u;}
SpiderGL.Math.Vec3.divs$=function(v,s){v[0]/=s;v[1]/=s;v[2]/=s;return v;}
SpiderGL.Math.Vec3.sdiv$=function(v,s){v[0]=s/v[0];v[1]=s/v[1];v[2]=s/v[2];return v;}
SpiderGL.Math.Vec3.normalize$=function(v){var f=1.0/SpiderGL.Math.Vec3.length(v);return SpiderGL.Math.Vec3.muls$(v,f);}
SpiderGL.Math.Vec4={};SpiderGL.Math.Vec4.dup=function(v){return v.slice(0,4);}
SpiderGL.Math.Vec4.scalar=function(s){return[s,s,s,s];}
SpiderGL.Math.Vec4.zero=function(){return[0,0,0,0];}
SpiderGL.Math.Vec4.one=function(){return[1,1,1,1];}
SpiderGL.Math.Vec4.maxNumber=function(){return[SpiderGL.Math.MAX_NUMBER,SpiderGL.Math.MAX_NUMBER,SpiderGL.Math.MAX_NUMBER,SpiderGL.Math.MAX_NUMBER];}
SpiderGL.Math.Vec4.minNumber=function(){return[SpiderGL.Math.MIN_NUMBER,SpiderGL.Math.MIN_NUMBER,SpiderGL.Math.MIN_NUMBER,SpiderGL.Math.MIN_NUMBER];}
SpiderGL.Math.Vec4.to2=function(v){return[v[0],v[1]];}
SpiderGL.Math.Vec4.to3=function(v){return[v[0],v[1],v[2]];}
SpiderGL.Math.Vec4.neg=function(v){return[-v[0],-v[1],-v[2],-v[3]];}
SpiderGL.Math.Vec4.add=function(u,v){return[u[0]+v[0],u[1]+v[1],u[2]+v[2],u[3]+v[3]];}
SpiderGL.Math.Vec4.adds=function(v,s){return[v[0]+s,v[1]+s,v[2]+s,v[3]+s];}
SpiderGL.Math.Vec4.sub=function(u,v){return[u[0]-v[0],u[1]-v[1],u[2]-v[2],u[3]-v[3]];}
SpiderGL.Math.Vec4.subs=function(v,s){return[v[0]-s,v[1]-s,v[2]-s,v[3]-s];}
SpiderGL.Math.Vec4.ssub=function(s,v){return[s-v[0],s-v[1],s-v[2],s-v[3]];}
SpiderGL.Math.Vec4.mul=function(u,v){return[u[0]*v[0],u[1]*v[1],u[2]*v[2],u[3]*v[3]];}
SpiderGL.Math.Vec4.muls=function(v,s){return[v[0]*s,v[1]*s,v[2]*s,v[3]*s];}
SpiderGL.Math.Vec4.div=function(u,v){return[u[0]/v[0],u[1]/v[1],u[2]/v[2],u[3]/v[3]];}
SpiderGL.Math.Vec4.divs=function(v,s){return[v[0]/s,v[1]/s,v[2]/s,v[3]/s];}
SpiderGL.Math.Vec4.sdiv=function(s,v){return[s/v[0],s/v[1],s/v[2],s/v[3]];}
SpiderGL.Math.Vec4.rcp=function(v){return[1.0/v[0],1.0/v[1],1.0/v[2],1.0/v[3]];}
SpiderGL.Math.Vec4.dot=function(u,v){return(u[0]*v[0]+u[1]*v[1]+u[2]*v[2]+u[3]*v[3]);}
SpiderGL.Math.Vec4.cross=function(u,v,w){var a=v[0]*w[1]-v[1]*w[0];var b=v[0]*w[2]-v[2]*w[0];var c=v[0]*w[3]-v[3]*w[0];var d=v[1]*w[2]-v[2]*w[1];var e=v[1]*w[3]-v[3]*w[1];var f=v[2]*w[3]-v[3]*w[2];return[u[1]*f-u[2]*e+u[3]*d,u[0]*f+u[2]*c-u[3]*b,u[0]*e-u[1]*c+u[3]*a,u[0]*d+u[1]*b-u[2]*a];}
SpiderGL.Math.Vec4.sqLength=function(v){return SpiderGL.Math.Vec4.dot(v,v);}
SpiderGL.Math.Vec4.length=function(v){return SpiderGL.Math.sqrt(SpiderGL.Math.Vec4.sqLength(v));}
SpiderGL.Math.Vec4.normalize=function(v){var f=1.0/SpiderGL.Math.Vec4.length(v);return SpiderGL.Math.Vec4.muls(v,f);}
SpiderGL.Math.Vec4.project=function(v){var f=1.0/v[3];return[v[0]*f,v[1]*f,v[2]*f,1.0];}
SpiderGL.Math.Vec4.abs=function(v){return[SpiderGL.Math.abs(v[0]),SpiderGL.Math.abs(v[1]),SpiderGL.Math.abs(v[2]),SpiderGL.Math.abs(v[3])];}
SpiderGL.Math.Vec4.acos=function(v){return[SpiderGL.Math.acos(v[0]),SpiderGL.Math.acos(v[1]),SpiderGL.Math.acos(v[2]),SpiderGL.Math.acos(v[3])];}
SpiderGL.Math.Vec4.asin=function(v){return[SpiderGL.Math.asin(v[0]),SpiderGL.Math.asin(v[1]),SpiderGL.Math.asin(v[2]),SpiderGL.Math.asin(v[3])];}
SpiderGL.Math.Vec4.atan=function(v){return[SpiderGL.Math.atan(v[0]),SpiderGL.Math.atan(v[1]),SpiderGL.Math.atan(v[2]),SpiderGL.Math.atan(v[3])];}
SpiderGL.Math.Vec4.atan2=function(y,x){return[SpiderGL.Math.atan2(y[0],x[0]),SpiderGL.Math.atan2(y[1],x[1]),SpiderGL.Math.atan2(y[2],x[2]),SpiderGL.Math.atan2(y[3],x[3])];}
SpiderGL.Math.Vec4.ceil=function(v){return[SpiderGL.Math.ceil(v[0]),SpiderGL.Math.ceil(v[1]),SpiderGL.Math.ceil(v[2]),SpiderGL.Math.ceil(v[3])];}
SpiderGL.Math.Vec4.clamp=function(v,min,max){return[SpiderGL.Math.clamp(v[0],min[0],max[0]),SpiderGL.Math.clamp(v[1],min[1],max[1]),SpiderGL.Math.clamp(v[2],min[2],max[2]),SpiderGL.Math.clamp(v[3],min[3],max[3])];}
SpiderGL.Math.Vec4.cos=function(v){return[SpiderGL.Math.cos(v[0]),SpiderGL.Math.cos(v[1]),SpiderGL.Math.cos(v[2]),SpiderGL.Math.cos(v[3])];}
SpiderGL.Math.Vec4.degToRad=function(v){return[SpiderGL.Math.degToRad(v[0]),SpiderGL.Math.degToRad(v[1]),SpiderGL.Math.degToRad(v[2]),SpiderGL.Math.degToRad(v[3])];}
SpiderGL.Math.Vec4.exp=function(v){return[SpiderGL.Math.exp(v[0]),SpiderGL.Math.exp(v[1]),SpiderGL.Math.exp(v[2]),SpiderGL.Math.exp(v[3])];}
SpiderGL.Math.Vec4.floor=function(v){return[SpiderGL.Math.floor(v[0]),SpiderGL.Math.floor(v[1]),SpiderGL.Math.floor(v[2]),SpiderGL.Math.floor(v[3])];}
SpiderGL.Math.Vec4.lerp=function(u,v,t){return[SpiderGL.Math.lerp(u[0],v[0],t),SpiderGL.Math.lerp(u[1],v[1],t),SpiderGL.Math.lerp(u[2],v[2],t),SpiderGL.Math.lerp(u[3],v[3],t)];}
SpiderGL.Math.Vec4.ln=function(v){return[SpiderGL.Math.ln(v[0]),SpiderGL.Math.ln(v[1]),SpiderGL.Math.ln(v[2]),SpiderGL.Math.ln(v[3])];}
SpiderGL.Math.Vec4.log=function(v){return[SpiderGL.Math.log(v[0]),SpiderGL.Math.log(v[1]),SpiderGL.Math.log(v[2]),SpiderGL.Math.log(v[3])];}
SpiderGL.Math.Vec4.log2=function(v){return[SpiderGL.Math.log2(v[0]),SpiderGL.Math.log2(v[1]),SpiderGL.Math.log2(v[2]),SpiderGL.Math.log2(v[3])];}
SpiderGL.Math.Vec4.log10=function(v){return[SpiderGL.Math.log10(v[0]),SpiderGL.Math.log10(v[1]),SpiderGL.Math.log10(v[2]),SpiderGL.Math.log10(v[3])];}
SpiderGL.Math.Vec4.max=function(u,v){return[SpiderGL.Math.max(u[0],v[0]),SpiderGL.Math.max(u[1],v[1]),SpiderGL.Math.max(u[2],v[2]),SpiderGL.Math.max(u[3],v[3])];}
SpiderGL.Math.Vec4.min=function(u,v){return[SpiderGL.Math.min(u[0],v[0]),SpiderGL.Math.min(u[1],v[1]),SpiderGL.Math.min(u[2],v[2]),SpiderGL.Math.min(u[3],v[3])];}
SpiderGL.Math.Vec4.pow=function(u,v){return[SpiderGL.Math.pow(u[0],v[0]),SpiderGL.Math.pow(u[1],v[1]),SpiderGL.Math.pow(u[2],v[2]),SpiderGL.Math.pow(u[3],v[3])];}
SpiderGL.Math.Vec4.radToDeg=function(v){return[SpiderGL.Math.radToDeg(v[0]),SpiderGL.Math.radToDeg(v[1]),SpiderGL.Math.radToDeg(v[2]),SpiderGL.Math.radToDeg(v[3])];}
SpiderGL.Math.Vec4.random=function(){return[SpiderGL.Math.random(),SpiderGL.Math.random(),SpiderGL.Math.random(),SpiderGL.Math.random()];}
SpiderGL.Math.Vec4.random01=function(){return[SpiderGL.Math.random01(),SpiderGL.Math.random01(),SpiderGL.Math.random01(),SpiderGL.Math.random01()];}
SpiderGL.Math.Vec4.random11=function(){return[SpiderGL.Math.random11(),SpiderGL.Math.random11(),SpiderGL.Math.random11(),SpiderGL.Math.random11()];}
SpiderGL.Math.Vec4.randomRange=function(min,max){return[SpiderGL.Math.randomRange(min[0],max[0]),SpiderGL.Math.randomRange(min[1],max[1]),SpiderGL.Math.randomRange(min[2],max[2]),SpiderGL.Math.randomRange(min[3],max[3])];}
SpiderGL.Math.Vec4.round=function(v){return[SpiderGL.Math.round(v[0]),SpiderGL.Math.round(v[1]),SpiderGL.Math.round(v[2]),SpiderGL.Math.round(v[3])];}
SpiderGL.Math.Vec4.sin=function(v){return[SpiderGL.Math.sin(v[0]),SpiderGL.Math.sin(v[1]),SpiderGL.Math.sin(v[2]),SpiderGL.Math.sin(v[3])];}
SpiderGL.Math.Vec4.sqrt=function(v){return[SpiderGL.Math.sqrt(v[0]),SpiderGL.Math.sqrt(v[1]),SpiderGL.Math.sqrt(v[2]),SpiderGL.Math.sqrt(v[3])];}
SpiderGL.Math.Vec4.tan=function(v){return[SpiderGL.Math.tan(v[0]),SpiderGL.Math.tan(v[1]),SpiderGL.Math.tan(v[2]),SpiderGL.Math.tan(v[3])];}
SpiderGL.Math.Vec4.copy$=function(u,v){u[0]=v[0];u[1]=v[1];u[2]=v[2];u[3]=v[3];return u;}
SpiderGL.Math.Vec4.neg$=function(v){v[0]=-v[0];v[1]=-v[1];v[2]=-v[2];v[3]=-v[3];return v;}
SpiderGL.Math.Vec4.add$=function(u,v){u[0]+=v[0];u[1]+=v[1];u[2]+=v[2];u[3]+=v[3];return u;}
SpiderGL.Math.Vec4.adds$=function(v,s){v[0]+=s;v[1]+=s;v[2]+=s;v[3]+=s;return v;}
SpiderGL.Math.Vec4.sub$=function(u,v){u[0]-=v[0];u[1]-=v[1];u[2]-=v[2];u[3]-=v[3];return u;}
SpiderGL.Math.Vec4.subs$=function(v,s){v[0]-=s;v[1]-=s;v[2]-=s;v[3]-=s;return v;}
SpiderGL.Math.Vec4.ssub$=function(s,v){v[0]=s-v[0];v[1]=s-v[1];v[2]=s-v[2];v[3]=s-v[3];return v;}
SpiderGL.Math.Vec4.mul$=function(u,v){u[0]*=v[0];u[1]*=v[1];u[2]*=v[2];u[3]*=v[3];return u;}
SpiderGL.Math.Vec4.muls$=function(v,s){v[0]*=s;v[1]*=s;v[2]*=s;v[3]*=s;return v;}
SpiderGL.Math.Vec4.div$=function(u,v){u[0]/=v[0];u[1]/=v[1];u[2]/=v[2];u[3]/=v[3];return u;}
SpiderGL.Math.Vec4.divs$=function(v,s){v[0]/=s;v[1]/=s;v[2]/=s;v[3]/=s;return v;}
SpiderGL.Math.Vec4.sdiv$=function(v,s){v[0]=s/v[0];v[1]=s/v[1];v[2]=s/v[2];v[3]=s/v[3];return v;}
SpiderGL.Math.Vec4.normalize$=function(v){var f=1.0/SpiderGL.Math.Vec4.length(v);return SpiderGL.Math.Vec4.muls$(v,f);}
SpiderGL.Math.Mat3={};SpiderGL.Math.Mat3.dup=function(m){return m.slice(0,9);}
SpiderGL.Math.Mat3.scalar=function(s){return[s,s,s,s,s,s,s,s,s];}
SpiderGL.Math.Mat3.zero=function(){return[0,0,0,0,0,0,0,0,0];}
SpiderGL.Math.Mat3.one=function(){return[1,1,1,1,1,1,1,1,1];}
SpiderGL.Math.Mat3.diag=function(d){return[d[0],0,0,0,d[0],0,0,0,d[0]];}
SpiderGL.Math.Mat3.identity=function(){return[1,0,0,0,1,0,0,0,1];}
SpiderGL.Math.Mat3.to44=function(m){return[m[0],m[1],m[2],0,m[3],m[4],m[5],0,m[6],m[7],m[8],0,0,0,0,1];}
SpiderGL.Math.Mat3.mul2=function(m,v,z){z=(z==undefined)?(0):(z);return[m[0]*v[0]+m[3]*v[1]+m[6]*z,m[1]*v[0]+m[4]*v[1]+m[7]*z];}
SpiderGL.Math.Mat3.mul3=function(m,v){return[m[0]*v[0]+m[3]*v[1]+m[6]*v[2],m[1]*v[0]+m[4]*v[1]+m[7]*v[2],m[2]*v[0]+m[5]*v[1]+m[8]*v[2]];}
SpiderGL.Math.Mat3.transpose=function(m){return[m[0],m[3],m[6],m[1],m[4],m[7],m[2],m[5],m[8]];}
SpiderGL.Math.Mat4={};SpiderGL.Math.Mat4.dup=function(m){return m.slice(0,16);}
SpiderGL.Math.Mat4.scalar=function(s){return[s,s,s,s,s,s,s,s,s,s,s,s,s,s,s,s];}
SpiderGL.Math.Mat4.zero=function(){return[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];}
SpiderGL.Math.Mat4.one=function(){return[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];}
SpiderGL.Math.Mat4.diag=function(d){return[d[0],0,0,0,0,d[0],0,0,0,0,d[0],0,0,0,0,d[0]];}
SpiderGL.Math.Mat4.identity=function(){return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];}
SpiderGL.Math.Mat4.to33=function(m){return[m[0],m[1],m[2],m[4],m[5],m[6],m[8],m[9],m[10]];}
SpiderGL.Math.Mat4.elem=function(m,row,col){return m[row+col*4];}
SpiderGL.Math.Mat4.elem$=function(m,row,col,value){m[row+col*4]=value;}
SpiderGL.Math.Mat4.row=function(m,row){return[m[row+0],m[row+4],m[row+8],m[row+12]];}
SpiderGL.Math.Mat4.row$=function(m,row,v){m[row+0]=v[0];m[row+4]=v[1];m[row+8]=v[2];m[row+12]=v[3];}
SpiderGL.Math.Mat4.col=function(m,col){var i=col*4;return[m[i+0],m[i+1],m[i+2],m[i+3]];}
SpiderGL.Math.Mat4.col$=function(m,col,v){var i=col*4;m[i+0]=v[0];m[i+1]=v[1];m[i+2]=v[2];m[i+3]=v[3];}
SpiderGL.Math.Mat4.isIdentity=function(m){return((m[0]===1)&&(m[1]===0)&&(m[2]===0)&&(m[3]===0)&&(m[4]===0)&&(m[5]===1)&&(m[6]===0)&&(m[7]===0)&&(m[8]===0)&&(m[9]===0)&&(m[10]===1)&&(m[11]===0)&&(m[12]===0)&&(m[13]===0)&&(m[14]===0)&&(m[15]===1));}
SpiderGL.Math.Mat4.neg=function(m){return[-m[0],-m[1],-m[2],-m[3],-m[4],-m[5],-m[6],-m[7],-m[8],-m[9],-m[10],-m[11],-m[12],-m[13],-m[14],-m[15]];}
SpiderGL.Math.Mat4.add=function(a,b){return[a[0]+b[0],a[1]+b[1],a[2]+b[2],a[3]+b[3],a[4]+b[4],a[5]+b[5],a[6]+b[6],a[7]+b[7],a[8]+b[8],a[9]+b[9],a[10]+b[10],a[11]+b[11],a[12]+b[12],a[13]+b[13],a[14]+b[14],a[15]+b[15]];}
SpiderGL.Math.Mat4.sub=function(a,b){return[a[0]-b[0],a[1]-b[1],a[2]-b[2],a[3]-b[3],a[4]-b[4],a[5]-b[5],a[6]-b[6],a[7]-b[7],a[8]-b[8],a[9]-b[9],a[10]-b[10],a[11]-b[11],a[12]-b[12],a[13]-b[13],a[14]-b[14],a[15]-b[15]];}
SpiderGL.Math.Mat4.mul=function(a,b){var a0=a[0],a1=a[1],a2=a[2],a3=a[3],a4=a[4],a5=a[5],a6=a[6],a7=a[7],a8=a[8],a9=a[9],a10=a[10],a11=a[11],a12=a[12],a13=a[13],a14=a[14],a15=a[15],b0=b[0],b1=b[1],b2=b[2],b3=b[3],b4=b[4],b5=b[5],b6=b[6],b7=b[7],b8=b[8],b9=b[9],b10=b[10],b11=b[11],b12=b[12],b13=b[13],b14=b[14],b15=b[15];return[a0*b0+a4*b1+a8*b2+a12*b3,a1*b0+a5*b1+a9*b2+a13*b3,a2*b0+a6*b1+a10*b2+a14*b3,a3*b0+a7*b1+a11*b2+a15*b3,a0*b4+a4*b5+a8*b6+a12*b7,a1*b4+a5*b5+a9*b6+a13*b7,a2*b4+a6*b5+a10*b6+a14*b7,a3*b4+a7*b5+a11*b6+a15*b7,a0*b8+a4*b9+a8*b10+a12*b11,a1*b8+a5*b9+a9*b10+a13*b11,a2*b8+a6*b9+a10*b10+a14*b11,a3*b8+a7*b9+a11*b10+a15*b11,a0*b12+a4*b13+a8*b14+a12*b15,a1*b12+a5*b13+a9*b14+a13*b15,a2*b12+a6*b13+a10*b14+a14*b15,a3*b12+a7*b13+a11*b14+a15*b15];}
SpiderGL.Math.Mat4.muls=function(m,s){return[m[0]*s,m[1]*s,m[2]*s,m[3]*s,m[4]*s,m[5]*s,m[6]*s,m[7]*s,m[8]*s,m[9]*s,m[10]*s,m[11]*s,m[12]*s,m[13]*s,m[14]*s,m[15]*s];}
SpiderGL.Math.Mat4.mul3=function(m,v,w){w=(w==undefined)?(1):(w);return[m[0]*v[0]+m[4]*v[1]+m[8]*v[2]+m[12]*w,m[1]*v[0]+m[5]*v[1]+m[9]*v[2]+m[13]*w,m[2]*v[0]+m[6]*v[1]+m[10]*v[2]+m[14]*w];}
SpiderGL.Math.Mat4.mul4=function(m,v){return[m[0]*v[0]+m[4]*v[1]+m[8]*v[2]+m[12]*v[3],m[1]*v[0]+m[5]*v[1]+m[9]*v[2]+m[13]*v[3],m[2]*v[0]+m[6]*v[1]+m[10]*v[2]+m[14]*v[3],m[3]*v[0]+m[7]*v[1]+m[11]*v[2]+m[15]*v[3]];}
SpiderGL.Math.Mat4.rcp=function(m){return[1/m[0],1/m[1],1/m[2],1/m[3],1/m[4],1/m[5],1/m[6],1/m[7],1/m[8],1/m[9],1/m[10],1/m[11],1/m[12],1/m[13],1/m[14],1/m[15]];}
SpiderGL.Math.Mat4.compMul=function(a,b){return[a[0]*b[0],a[1]*b[1],a[2]*b[2],a[3]*b[3],a[4]*b[4],a[5]*b[5],a[6]*b[6],a[7]*b[7],a[8]*b[8],a[9]*b[9],a[10]*b[10],a[11]*b[11],a[12]*b[12],a[13]*b[13],a[14]*b[14],a[15]*b[15]];}
SpiderGL.Math.Mat4.compDiv=function(a,b){return[a[0]/b[0],a[1]/b[1],a[2]/b[2],a[3]/b[3],a[4]/b[4],a[5]/b[5],a[6]/b[6],a[7]/b[7],a[8]/b[8],a[9]/b[9],a[10]/b[10],a[11]/b[11],a[12]/b[12],a[13]/b[13],a[14]/b[14],a[15]/b[15]];}
SpiderGL.Math.Mat4.transpose=function(m){return[m[0],m[4],m[8],m[12],m[1],m[5],m[9],m[13],m[2],m[6],m[10],m[14],m[3],m[7],m[11],m[15]];}
SpiderGL.Math.Mat4.determinant=function(m){var m0=m[0],m1=m[1],m2=m[2],m3=m[3],m4=m[4],m5=m[5],m6=m[6],m7=m[7],m8=m[8],m9=m[9],m10=m[10],m11=m[11],m12=m[12],m13=m[13],m14=m[14],m15=m[15];return(m12*m9*m6*m3-m8*m13*m6*m3-m12*m5*m10*m3+m4*m13*m10*m3+
m8*m5*m14*m3-m4*m9*m14*m3-m12*m9*m2*m7+m8*m13*m2*m7+
m12*m1*m10*m7-m0*m13*m10*m7-m8*m1*m14*m7+m0*m9*m14*m7+
m12*m5*m2*m11-m4*m13*m2*m11-m12*m1*m6*m11+m0*m13*m6*m11+
m4*m1*m14*m11-m0*m5*m14*m11-m8*m5*m2*m15+m4*m9*m2*m15+
m8*m1*m6*m15-m0*m9*m6*m15-m4*m1*m10*m15+m0*m5*m10*m15);}
SpiderGL.Math.Mat4.inverse=function(m){var m0=m[0],m1=m[1],m2=m[2],m3=m[3],m4=m[4],m5=m[5],m6=m[6],m7=m[7],m8=m[8],m9=m[9],m10=m[10],m11=m[11],m12=m[12],m13=m[13],m14=m[14],m15=m[15];var d=1/(m12*m9*m6*m3-m8*m13*m6*m3-m12*m5*m10*m3+m4*m13*m10*m3+
m8*m5*m14*m3-m4*m9*m14*m3-m12*m9*m2*m7+m8*m13*m2*m7+
m12*m1*m10*m7-m0*m13*m10*m7-m8*m1*m14*m7+m0*m9*m14*m7+
m12*m5*m2*m11-m4*m13*m2*m11-m12*m1*m6*m11+m0*m13*m6*m11+
m4*m1*m14*m11-m0*m5*m14*m11-m8*m5*m2*m15+m4*m9*m2*m15+
m8*m1*m6*m15-m0*m9*m6*m15-m4*m1*m10*m15+m0*m5*m10*m15);return[d*(m9*m14*m7-m13*m10*m7+m13*m6*m11-m5*m14*m11-m9*m6*m15+m5*m10*m15),d*(m13*m10*m3-m9*m14*m3-m13*m2*m11+m1*m14*m11+m9*m2*m15-m1*m10*m15),d*(m5*m14*m3-m13*m6*m3+m13*m2*m7-m1*m14*m7-m5*m2*m15+m1*m6*m15),d*(m9*m6*m3-m5*m10*m3-m9*m2*m7+m1*m10*m7+m5*m2*m11-m1*m6*m11),d*(m12*m10*m7-m8*m14*m7-m12*m6*m11+m4*m14*m11+m8*m6*m15-m4*m10*m15),d*(m8*m14*m3-m12*m10*m3+m12*m2*m11-m0*m14*m11-m8*m2*m15+m0*m10*m15),d*(m12*m6*m3-m4*m14*m3-m12*m2*m7+m0*m14*m7+m4*m2*m15-m0*m6*m15),d*(m4*m10*m3-m8*m6*m3+m8*m2*m7-m0*m10*m7-m4*m2*m11+m0*m6*m11),d*(m8*m13*m7-m12*m9*m7+m12*m5*m11-m4*m13*m11-m8*m5*m15+m4*m9*m15),d*(m12*m9*m3-m8*m13*m3-m12*m1*m11+m0*m13*m11+m8*m1*m15-m0*m9*m15),d*(m4*m13*m3-m12*m5*m3+m12*m1*m7-m0*m13*m7-m4*m1*m15+m0*m5*m15),d*(m8*m5*m3-m4*m9*m3-m8*m1*m7+m0*m9*m7+m4*m1*m11-m0*m5*m11),d*(m12*m9*m6-m8*m13*m6-m12*m5*m10+m4*m13*m10+m8*m5*m14-m4*m9*m14),d*(m8*m13*m2-m12*m9*m2+m12*m1*m10-m0*m13*m10-m8*m1*m14+m0*m9*m14),d*(m12*m5*m2-m4*m13*m2-m12*m1*m6+m0*m13*m6+m4*m1*m14-m0*m5*m14),d*(m4*m9*m2-m8*m5*m2+m8*m1*m6-m0*m9*m6-m4*m1*m10+m0*m5*m10)];}
SpiderGL.Math.Mat4.inverseTranspose33=function(m){var m11=m[0],m21=m[1],m31=m[2],m12=m[4],m22=m[5],m32=m[6],m13=m[8],m23=m[9],m33=m[10];var d=1/(m11*(m33*m22-m32*m23)-m21*(m33*m12-m32*m13)+m31*(m23*m12-m22*m13));return[d*(m33*m22-m32*m23),d*(m32*m13-m33*m12),d*(m23*m12-m22*m13),d*(m31*m23-m33*m21),d*(m33*m11-m31*m13),d*(m21*m13-m23*m11),d*(m32*m21-m31*m22),d*(m31*m12-m32*m11),d*(m22*m11-m21*m12)];}
SpiderGL.Math.Mat4.trace=function(m){return(m[0]+m[5]+m[10]+m[15]);}
SpiderGL.Math.Mat4.translation=function(v){return[1,0,0,0,0,1,0,0,0,0,1,0,v[0],v[1],v[2],1];}
SpiderGL.Math.Mat4.rotationAngleAxis=function(angle,axis){var ax=SpiderGL.Math.Vec3.normalize(axis);var s=SpiderGL.Math.sin(angle);var c=SpiderGL.Math.cos(angle);var q=1-c;var x=ax[0];var y=ax[1];var z=ax[2];var xx,yy,zz,xy,yz,zx,xs,ys,zs;xx=x*x;yy=y*y;zz=z*z;xy=x*y;yz=y*z;zx=z*x;xs=x*s;ys=y*s;zs=z*s;return[(q*xx)+c,(q*xy)+zs,(q*zx)-ys,0,(q*xy)-zs,(q*yy)+c,(q*yz)+xs,0,(q*zx)+ys,(q*yz)-xs,(q*zz)+c,0,0,0,0,1];}
SpiderGL.Math.Mat4.scaling=function(v){return[v[0],0,0,0,0,v[1],0,0,0,0,v[2],0,0,0,0,1];}
SpiderGL.Math.Mat4.lookAt=function(position,target,up){var v=SpiderGL.Math.Vec3.normalize(SpiderGL.Math.Vec3.sub(target,position));var u=SpiderGL.Math.Vec3.normalize(up);var s=SpiderGL.Math.Vec3.normalize(SpiderGL.Math.Vec3.cross(v,u));u=SpiderGL.Math.Vec3.cross(s,v);var m=[s[0],u[0],-v[0],0,s[1],u[1],-v[1],0,s[2],u[2],-v[2],0,0,0,0,1];return SpiderGL.Math.Mat4.translate$(m,SpiderGL.Math.Vec3.neg(position));}
SpiderGL.Math.Mat4.ortho=function(min,max){var sum=SpiderGL.Math.Vec3.add(max,min);var dif=SpiderGL.Math.Vec3.sub(max,min);return[2/dif[0],0,0,0,0,2/dif[1],0,0,0,0,-2/dif[2],0,-sum[0]/dif[0],-sum[1]/dif[1],-sum[2]/dif[2],1];}
SpiderGL.Math.Mat4.frustum=function(min,max){var sum=SpiderGL.Math.Vec3.add(max,min);var dif=SpiderGL.Math.Vec3.sub(max,min);var t=2.0*min[2];return[t/dif[0],0,0,0,0,t/dif[1],0,0,sum[0]/dif[0],sum[1]/dif[1],-sum[2]/dif[2],-1,0,0,-t*max[2]/dif[2],0];}
SpiderGL.Math.Mat4.perspective=function(fovY,aspectRatio,zNear,zFar){var a=zNear*SpiderGL.Math.tan(fovY/2);var b=a*aspectRatio;return SpiderGL.Math.Mat4.frustum([-b,-a,zNear],[b,a,zFar]);}
SpiderGL.Math.Mat4.copy$=function(dst,src){for(var i=0;i<16;++i){dst[i]=src[i];}
return dst;}
SpiderGL.Math.Mat4.identity$=function(m){m[0]=1;m[1]=0;m[2]=0;m[3]=0;m[4]=0;m[5]=1;m[6]=0;m[7]=0;m[8]=0;m[9]=0;m[10]=1;m[11]=0;m[12]=0;m[13]=0;m[14]=0;m[15]=1;return m;}
SpiderGL.Math.Mat4.neg$=function(m){for(var i=0;i<16;++i){m[i]=-m[i];}
return m;}
SpiderGL.Math.Mat4.add$=function(a,b){for(var i=0;i<16;++i){a[i]+=b[i];}
return a;}
SpiderGL.Math.Mat4.sub$=function(a,b){for(var i=0;i<16;++i){a[i]-=b[i];}
return a;}
SpiderGL.Math.Mat4.mul$=function(a,b){var a0=a[0],a1=a[1],a2=a[2],a3=a[3],a4=a[4],a5=a[5],a6=a[6],a7=a[7],a8=a[8],a9=a[9],a10=a[10],a11=a[11],a12=a[12],a13=a[13],a14=a[14],a15=a[15],b0=b[0],b1=b[1],b2=b[2],b3=b[3],b4=b[4],b5=b[5],b6=b[6],b7=b[7],b8=b[8],b9=b[9],b10=b[10],b11=b[11],b12=b[12],b13=b[13],b14=b[14],b15=b[15];a[0]=a0*b0+a4*b1+a8*b2+a12*b3;a[1]=a1*b0+a5*b1+a9*b2+a13*b3;a[2]=a2*b0+a6*b1+a10*b2+a14*b3;a[3]=a3*b0+a7*b1+a11*b2+a15*b3;a[4]=a0*b4+a4*b5+a8*b6+a12*b7;a[5]=a1*b4+a5*b5+a9*b6+a13*b7;a[6]=a2*b4+a6*b5+a10*b6+a14*b7;a[7]=a3*b4+a7*b5+a11*b6+a15*b7;a[8]=a0*b8+a4*b9+a8*b10+a12*b11;a[9]=a1*b8+a5*b9+a9*b10+a13*b11;a[10]=a2*b8+a6*b9+a10*b10+a14*b11;a[11]=a3*b8+a7*b9+a11*b10+a15*b11;a[12]=a0*b12+a4*b13+a8*b14+a12*b15;a[13]=a1*b12+a5*b13+a9*b14+a13*b15;a[14]=a2*b12+a6*b13+a10*b14+a14*b15;a[15]=a3*b12+a7*b13+a11*b14+a15*b15;return a;}
SpiderGL.Math.Mat4.muls$=function(m,s){for(var i=0;i<16;++i){m[i]*=s;}
return m;}
SpiderGL.Math.Mat4.compMul$=function(a,b){for(var i=0;i<16;++i){a[i]*=b[i];}
return a;}
SpiderGL.Math.Mat4.compDiv$=function(a,b){for(var i=0;i<16;++i){a[i]/=b[i];}
return a;}
SpiderGL.Math.Mat4.transpose$=function(m){var t;t=m[1];m[1]=m[4];m[4]=t;t=m[2];m[2]=m[8];m[8]=t;t=m[3];m[3]=m[12];m[12]=t;t=m[6];m[6]=m[9];m[9]=t;t=m[7];m[7]=m[13];m[13]=t;t=m[11];m[11]=m[14];m[14]=t;return m;}
SpiderGL.Math.Mat4.invert$=function(m){var m0=m[0],m1=m[1],m2=m[2],m3=m[3],m4=m[4],m5=m[5],m6=m[6],m7=m[7],m8=m[8],m9=m[9],m10=m[10],m11=m[11],m12=m[12],m13=m[13],m14=m[14],m15=m[15];var d=1.0/(m12*m9*m6*m3-m8*m13*m6*m3-m12*m5*m10*m3+m4*m13*m10*m3+
m8*m5*m14*m3-m4*m9*m14*m3-m12*m9*m2*m7+m8*m13*m2*m7+
m12*m1*m10*m7-m0*m13*m10*m7-m8*m1*m14*m7+m0*m9*m14*m7+
m12*m5*m2*m11-m4*m13*m2*m11-m12*m1*m6*m11+m0*m13*m6*m11+
m4*m1*m14*m11-m0*m5*m14*m11-m8*m5*m2*m15+m4*m9*m2*m15+
m8*m1*m6*m15-m0*m9*m6*m15-m4*m1*m10*m15+m0*m5*m10*m15);m[0]=d*(m9*m14*m7-m13*m10*m7+m13*m6*m11-m5*m14*m11-m9*m6*m15+m5*m10*m15);m[1]=d*(m13*m10*m3-m9*m14*m3-m13*m2*m11+m1*m14*m11+m9*m2*m15-m1*m10*m15);m[2]=d*(m5*m14*m3-m13*m6*m3+m13*m2*m7-m1*m14*m7-m5*m2*m15+m1*m6*m15);m[3]=d*(m9*m6*m3-m5*m10*m3-m9*m2*m7+m1*m10*m7+m5*m2*m11-m1*m6*m11);m[4]=d*(m12*m10*m7-m8*m14*m7-m12*m6*m11+m4*m14*m11+m8*m6*m15-m4*m10*m15);m[5]=d*(m8*m14*m3-m12*m10*m3+m12*m2*m11-m0*m14*m11-m8*m2*m15+m0*m10*m15);m[6]=d*(m12*m6*m3-m4*m14*m3-m12*m2*m7+m0*m14*m7+m4*m2*m15-m0*m6*m15);m[7]=d*(m4*m10*m3-m8*m6*m3+m8*m2*m7-m0*m10*m7-m4*m2*m11+m0*m6*m11);m[8]=d*(m8*m13*m7-m12*m9*m7+m12*m5*m11-m4*m13*m11-m8*m5*m15+m4*m9*m15);m[9]=d*(m12*m9*m3-m8*m13*m3-m12*m1*m11+m0*m13*m11+m8*m1*m15-m0*m9*m15);m[10]=d*(m4*m13*m3-m12*m5*m3+m12*m1*m7-m0*m13*m7-m4*m1*m15+m0*m5*m15);m[11]=d*(m8*m5*m3-m4*m9*m3-m8*m1*m7+m0*m9*m7+m4*m1*m11-m0*m5*m11);m[12]=d*(m12*m9*m6-m8*m13*m6-m12*m5*m10+m4*m13*m10+m8*m5*m14-m4*m9*m14);m[13]=d*(m8*m13*m2-m12*m9*m2+m12*m1*m10-m0*m13*m10-m8*m1*m14+m0*m9*m14);m[14]=d*(m12*m5*m2-m4*m13*m2-m12*m1*m6+m0*m13*m6+m4*m1*m14-m0*m5*m14);m[15]=d*(m4*m9*m2-m8*m5*m2+m8*m1*m6-m0*m9*m6-m4*m1*m10+m0*m5*m10);return m;}
SpiderGL.Math.Mat4.translate$=function(m,v){var x=v[0],y=v[1],z=v[2];m[12]=m[0]*x+m[4]*y+m[8]*z+m[12];m[13]=m[1]*x+m[5]*y+m[9]*z+m[13];m[14]=m[2]*x+m[6]*y+m[10]*z+m[14];m[15]=m[3]*x+m[7]*y+m[11]*z+m[15];return m;}
SpiderGL.Math.Mat4.rotateAngleAxis$=function(m,angle,axis){var r=SpiderGL.Math.Mat4.rotationAngleAxis(angle,axis);return SpiderGL.Math.Mat4.mul$(m,r);}
SpiderGL.Math.Mat4.scale$=function(m,v){var x=v[0],y=v[1],z=v[2];m[0]*=x;m[1]*=x;m[2]*=x;m[3]*=x;m[4]*=y;m[5]*=y;m[6]*=y;m[7]*=y;m[8]*=z;m[9]*=z;m[10]*=z;m[11]*=z;return m;}
SpiderGL.Math.Quat={};SpiderGL.Math.Quat.dup=function(q){return q.slice(0,4);}
SpiderGL.Math.Quat.identity=function(){return[0,0,0,1];}
SpiderGL.Math.Quat.inverse=function(q){return[-q[0],-q[1],-q[2],q[3]];}
SpiderGL.Math.Quat.mul=function(p,q){var px=p[0],py=p[1],pz=p[2],pw=p[3];var qx=q[0],qy=q[1],qz=q[2],qw=q[3];return[px*qw+pw*qx+pz*qy-py*qz,py*qw+pw*qy+px*qz-pz*qx,pz*qw+pw*qz+py*qx-px*qy,pw*qw-px*qx-py*qy-pz*qz];}
SpiderGL.Math.Quat.muls=function(q,s){return[q[0]*s,q[1]*s,q[2]*s,q[3]*s];}
SpiderGL.Math.Quat.normalize=function(q){var s=1/SpiderGL.Math.sqrt(q[0]*q[0]+q[1]*q[1]+q[2]*q[2]+q[3]*q[3]);return SpiderGL.Math.Quat.muls(q,s);}
SpiderGL.Math.Quat.from33=function(m){var m00=m[0],m10=m[1],m20=m[2];var m01=m[3],m11=m[4],m21=m[5];var m02=m[6],m12=m[7],m22=m[8];var t=m00+m11+m22;var s;if(t>0){t=t+1;s=0.5/SpiderGL.Math.sqrt(t);return[(m21-m12)*s,(m02-m20)*s,(m10-m01)*s,t*s];}else if((m00>m11)&&(m00>m22)){t=m00-m11-m22+1;s=0.5/SpiderGL.Math.sqrt(t);return[t*s,(m10+m01)*s,(m02+m20)*s,(m21-m12)*s,];}
else if(m11>m22){t=-m00+m11-m22+1;s=0.5/SpiderGL.Math.sqrt(t);return[(m10+m01)*s,t*s,(m21+m12)*s,(m02-m20)*s];}
else{t=-m00-m11+m22+1;s=0.5/SpiderGL.Math.sqrt(t);return[(m02+m20)*s,(m21+m12)*s,t*s,(m10-m01)*s];}
return null;}
SpiderGL.Math.Quat.to33=function(q){var x=q[0],y=q[1],z=q[2],w=q[3];var xx=x*x,xy=x*y,xz=x*z,xw=x*w;var yy=y*y,yz=y*z,yw=y*w;var zz=z*z,zw=z*w;return[1-2*(yy+zz),2*(xy+zw),2*(xz-yw),2*(xy-zw),1-2*(xx+zz),2*(yz+xw),2*(xz+yw),2*(yz-xw),1-2*(xx+yy)];}
SpiderGL.Math.Quat.from44=function(m){return SpiderGL.Math.Quat.from33(SpiderGL.Math.Mat4.to33(m));}
SpiderGL.Math.Quat.to44=function(q){return SpiderGL.Math.Mat3.to44(SpiderGL.Math.Quat.to33(q));}
SpiderGL.Math.Quat.fromAngleAxis=function(angle,axis){return[0,0,0,1];}
SpiderGL.Math.Quat.toAngleAxis=function(q){return[0,0,0,1];}
SpiderGL.Math.Quat.fromEulerAngles=function(x,y,z){return[0,0,0,1];}
SpiderGL.Math.Quat.toEulerAngles=function(q){return[0,0,0,1];}
SpiderGL.Math.Quat.copy$=function(p,q){p[0]=q[0];p[1]=q[1];p[2]=q[2];p[3]=q[3];return p;}
SpiderGL.Math.Quat.identity$=function(q){q[0]=0;q[1]=0;q[2]=0;q[3]=1;return q;}
SpiderGL.Math.Quat.invert$=function(q){q[0]=-q[0];q[1]=-q[1];q[2]=-q[2];return q;}
SpiderGL.Math.Quat.mul$=function(q){var px=p[0],py=p[1],pz=p[2],pw=p[3];var qx=q[0],qy=q[1],qz=q[2],qw=q[3];q[0]=px*qw+pw*qx+pz*qy-py*qz;q[1]=py*qw+pw*qy+px*qz-pz*qx;q[2]=pz*qw+pw*qz+py*qx-px*qy;q[3]=pw*qw-px*qx-py*qy-pz*qz;return q;}
SpiderGL.Math.Quat.muls$=function(q,s){q[0]*=s;q[1]*=s;q[2]*=s;q[3]*=s;return q;}
SpiderGL.Math.Quat.normalize$=function(q){var s=1/SpiderGL.Math.sqrt(q[0]*q[0]+q[1]*q[1]+q[2]*q[2]+q[3]*q[3]);return SpiderGL.Math.Quat.muls$(q,s);}
SpiderGL.Math.project=function(xyzw,modelViewProjectionMatrix,viewport,depthRange){var v3=SpiderGL.Math.Vec3;var m4=SpiderGL.Math.Mat4;var r=m4.mul4(modelViewProjectionMatrix,xyzw);var invW=1/r[3];r[3]=invW;v3.muls$(r,invW/2);v3.adds$(r,0.5);v3.mul$(r,[viewport[2],viewport[3],depthRange[1]-depthRange[0]]);v3.add$(r,[viewport[0],viewport[1],depthRange[0]]);return r;};SpiderGL.Math.unproject=function(xyz,modelViewProjectionMatrixInverse,viewport,depthRange){var v3=SpiderGL.Math.Vec3;var m4=SpiderGL.Math.Mat4;var r=v3.to4(xyz,1.0);v3.sub$(r,[viewport[0],viewport[1],depthRange[0]]);v3.div$(r,[viewport[2],viewport[3],depthRange[1]-depthRange[0]]);v3.muls$(r,2);v3.subs$(r,1);r=m4.mul4(modelViewProjectionMatrixInverse,r);var invW=1/r[3];r[3]=invW;v3.muls$(r,invW);return r;};SpiderGL.Space={};SpiderGL.Space.MatrixStack=function(onChange){SpiderGL.Core.ObjectBase.call(this);this._onChange=null;this.reset();this._onChange=onChange;}
SpiderGL.Space.MatrixStack.prototype={_invalidate:function(){this._i=null;this._t=null;this._it=null;if(this._onChange){this._onChange(this);}},reset:function(){var m=SpiderGL.Math.Mat4.identity();this._s=[m];this._l=1;this._m=m;this._i=m;this._t=m;this._it=m;if(this._onChange){this._onChange(this);}},get onChange(){return this._onChange;},set onChange(f){this._onChange=f;},get size(){return this._l;},get matrix$(){return this._m;},get matrix(){return SpiderGL.Math.Mat4.dup(this.matrix$);},get top$(){return this.matrix$;},get top(){return this.matrix;},get inverse$(){return(this._i||(this._i=SpiderGL.Math.Mat4.inverse(this._m)));},get inverse(){return SpiderGL.Math.Mat4.dup(this.inverse$);},get transpose$(){return(this._t||(this._t=SpiderGL.Math.Mat4.transpose(this._m)));},get transpose(){return SpiderGL.Math.Mat4.dup(this.transpose$);},get inverseTranspose$(){return(this._it||(this._it=SpiderGL.Math.Mat4.transpose(this.inverse$)));},get inverseTranspose(){return SpiderGL.Math.Mat4.dup(this.inverseTranspose$);},push:function(){var m=SpiderGL.Math.Mat4.dup(this._m);this._s.push(m);this._l++;this._m=m;},pop:function(){if(this._l<=1)return;this._s.pop();this._l--;this._m=this._s[this._l-1];this._invalidate();},load:function(m){m=SpiderGL.Math.Mat4.dup(m);this._s[this._l-1]=m;this._m=m;this._invalidate();},loadIdentity:function(){var m=SpiderGL.Math.Mat4.identity$(this._m);this._i=m;this._t=m;this._it=m;},multiply:function(m){SpiderGL.Math.Mat4.mul$(this._m,m);this._invalidate();},ortho:function(min,max){SpiderGL.Math.Mat4.mul$(this._m,SpiderGL.Math.Mat4.ortho(min,max));this._invalidate();},frustum:function(min,max){SpiderGL.Math.Mat4.mul$(this._m,SpiderGL.Math.Mat4.frustum(min,max));this._invalidate();},perspective:function(fovY,aspectRatio,zNear,zFar){SpiderGL.Math.Mat4.mul$(this._m,SpiderGL.Math.Mat4.perspective(fovY,aspectRatio,zNear,zFar));this._invalidate();},lookAt:function(position,target,up){SpiderGL.Math.Mat4.mul$(this._m,SpiderGL.Math.Mat4.lookAt(position,target,up));this._invalidate();},translate:function(v){SpiderGL.Math.Mat4.translate$(this._m,v);this._invalidate();},rotate:function(angle,axis){SpiderGL.Math.Mat4.rotateAngleAxis$(this._m,angle,axis);this._invalidate();},scale:function(v){SpiderGL.Math.Mat4.scale$(this._m,v);this._invalidate();}};SpiderGL.Type.extend(SpiderGL.Space.MatrixStack,SpiderGL.Core.ObjectBase);SpiderGL.Space.ViewportStack=function(onChange){SpiderGL.Core.ObjectBase.call(this);this._onChange=null;this.reset();this._onChange=onChange;}
SpiderGL.Space.ViewportStack.prototype={_invalidate:function(){if(this._onChange){this._onChange(this);}},reset:function(){var r=[0,0,1,1];this._s=[r];this._l=1;this._r=r;if(this._onChange){this._onChange(this);}},get onChange(){return this._onChange;},set onChange(f){this._onChange=f;},get size(){return this._l;},get rect$(){return this._r;},get rect(){return this.rect$.slice(0,4);},get top$(){return this.rect$;},get top(){return this.rect;},push:function(){var r=this._r.slice(0,4);this._s.push(r);this._l++;this._r=r;},pop:function(){if(this._l<=1)return;this._s.pop();this._l--;this._r=this._s[this._l-1];this._invalidate();},load:function(r){r=r.slice(0,4);this._s[this._l-1]=r;this._r=r;this._invalidate();},loadIdentity:function(){var r=[0,0,1,1];this._r=r;},inner:function(r){this._r[0]+=r[0];this._r[1]+=r[1];this._r[2]=r[2];this._r[3]=r[3];this._invalidate();}};SpiderGL.Type.extend(SpiderGL.Space.ViewportStack,SpiderGL.Core.ObjectBase);SpiderGL.Space.DepthRangeStack=function(onChange){SpiderGL.Core.ObjectBase.call(this);this._onChange=null;this.reset();this._onChange=onChange;}
SpiderGL.Space.DepthRangeStack.prototype={_invalidate:function(){if(this._onChange){this._onChange(this);}},reset:function(){var r=[0,1];this._s=[r];this._l=1;this._r=r;if(this._onChange){this._onChange(this);}},get onChange(){return this._onChange;},set onChange(f){this._onChange=f;},get size(){return this._l;},get range$(){return this._r;},get range(){return this.range$.slice(0,2);},get top$(){return this.range$;},get top(){return this.range;},push:function(){var r=this._r.slice(0,2);this._s.push(r);this._l++;this._r=r;},pop:function(){if(this._l<=1)return;this._s.pop();this._l--;this._r=this._s[this._l-1];this._invalidate();},load:function(r){r=r.slice(0,2);this._s[this._l-1]=r;this._r=r;this._invalidate();},loadIdentity:function(){var r=[0,1];this._r=r;},inner:function(r){this._r[0]+=r[0];this._r[1]=r[1];this._invalidate();}};SpiderGL.Type.extend(SpiderGL.Space.DepthRangeStack,SpiderGL.Core.ObjectBase);SpiderGL.Space.TransformationStack=function(){SpiderGL.Core.ObjectBase.call(this);var that=this;this._mv={};this._vp={};this._mvp={};this._n={};this._c={};this._m=new SpiderGL.Space.MatrixStack(function(){that._mv={};that._mvp={};that._n={};that._c={};});this._v=new SpiderGL.Space.MatrixStack(function(){that._mv={};that._vp={};that._mvp={};that._n={};that._c={};});this._p=new SpiderGL.Space.MatrixStack(function(){that._vp={};that._mvp={};});this._viewport=new SpiderGL.Space.ViewportStack(function(){});this._depth=new SpiderGL.Space.DepthRangeStack(function(){});}
SpiderGL.Space.TransformationStack.prototype={reset:function(){this._m.reset();this._v.reset();this._p.reset();},get viewport(){return this._viewport;},get viewportRect$(){return this._viewport.rect$;},get viewportRect(){return this._viewport.rect;},get depth(){return this._depth;},get depthRange$(){return this._depth.range$;},get depthRange(){return this._depth.range;},get model(){return this._m;},get modelMatrix$(){return this._m.matrix$;},get modelMatrix(){return this._m.matrix;},get modelMatrixInverse$(){return this._m.inverse$;},get modelMatrixInverse(){return this._m.inverse;},get modelMatrixTranspose$(){return this._m.transpose$;},get modelMatrixTranspose(){return this._m.transpose;},get modelMatrixInverseTranspose$(){return this._m.inverseTranspose$;},get modelMatrixInverseTranspose(){return this._m.inverseTranspose;},get view(){return this._v;},get viewMatrix$(){return this._v.matrix$;},get viewMatrix(){return this._v.matrix;},get viewMatrixInverse$(){return this._v.inverse$;},get viewMatrixInverse(){return this._v.inverse;},get viewMatrixTranspose$(){return this._v.transpose$;},get viewMatrixTranspose(){return this._v.transpose;},get viewMatrixInverseTranspose$(){return this._v.inverseTranspose$;},get viewMatrixInverseTranspose(){return this._v.inverseTranspose;},get projection(){return this._p;},get projectionMatrix$(){return this._p.matrix$;},get projectionMatrix(){return this._p.matrix;},get projectionMatrixInverse$(){return this._p.inverse$;},get projectionMatrixInverse(){return this._p.inverse;},get projectionMatrixTranspose$(){return this._p.transpose$;},get projectionMatrixTranspose(){return this._p.transpose;},get projectionMatrixInverseTranspose$(){return this._p.inverseTranspose$;},get projectionMatrixInverseTranspose(){return this._p.inverseTranspose;},get modelViewMatrix$(){return(this._mv.m||(this._mv.m=SpiderGL.Math.Mat4.mul(this.viewMatrix$,this.modelMatrix$)));},get modelViewMatrix(){return SpiderGL.Math.Mat4.dup(this.modelViewMatrix$);},get modelViewMatrixInverse$(){return(this._mv.i||(this._mv.i=SpiderGL.Math.Mat4.mul(this.modelMatrixInverse$,this.viewMatrixInverse$)));},get modelViewMatrixInverse(){return SpiderGL.Math.Mat4.dup(this.modelViewMatrixInverse$);},get modelViewMatrixTranspose$(){return(this._mv.t||(this._mv.t=SpiderGL.Math.Mat4.transpose(this.modelViewMatrix$)));},get modelViewMatrixTranspose(){return SpiderGL.Math.Mat4.dup(this.modelViewMatrixTranspose$);},get modelViewMatrixInverseTranspose$(){return(this._mv.it||(this._mv.it=SpiderGL.Math.Mat4.transpose(this.modelViewMatrixInverse$)));},get modelViewMatrixInverseTranspose(){return SpiderGL.Math.Mat4.dup(this.modelViewMatrixInverseTranspose$);},get viewProjectionMatrix$(){return(this._vp.m||(this._vp.m=SpiderGL.Math.Mat4.mul(this.projectionMatrix$,this.viewMatrix$)));},get viewProjectionMatrix(){return SpiderGL.Math.Mat4.dup(this.viewProjectionMatrix$);},get viewProjectionMatrixInverse$(){return(this._vp.i||(this._vp.i=SpiderGL.Math.Mat4.mul(this.viewMatrixInverse$,this.projectionMatrixInverse$)));},get viewProjectionMatrixInverse(){return SpiderGL.Math.Mat4.dup(this.viewProjectionMatrixInverse$);},get viewProjectionMatrixTranspose$(){return(this._vp.t||(this._vp.t=SpiderGL.Math.Mat4.transpose(this.viewProjectionMatrix$)));},get viewProjectionMatrixTranspose(){return SpiderGL.Math.Mat4.dup(this.viewProjectionMatrixTranspose$);},get viewProjectionMatrixInverseTranspose$(){return(this._vp.it||(this._vp.it=SpiderGL.Math.Mat4.transpose(this.viewProjectionMatrixInverse$)));},get viewProjectionMatrixInverseTranspose(){return SpiderGL.Math.Mat4.dup(this.viewProjectionMatrixInverseTranspose$);},get modelViewProjectionMatrix$(){return(this._mvp.m||(this._mvp.m=SpiderGL.Math.Mat4.mul(this.viewProjectionMatrix$,this.modelMatrix$)));},get modelViewProjectionMatrix(){return SpiderGL.Math.Mat4.dup(this.modelViewProjectionMatrix$);},get modelViewProjectionMatrixInverse$(){return(this._mvp.i||(this._mvp.i=SpiderGL.Math.Mat4.inverse(this.modelViewProjectionMatrix$)));},get modelViewProjectionMatrixInverse(){return SpiderGL.Math.Mat4.dup(this.modelViewProjectionMatrixInverse$);},get modelViewProjectionMatrixTranspose$(){return(this._mvp.t||(this._mvp.t=SpiderGL.Math.Mat4.transpose(this.modelViewProjectionMatrix$)));},get modelViewProjectionMatrixTranspose(){return SpiderGL.Math.Mat4.dup(this.modelViewProjectionMatrixTranspose$);},get modelViewProjectionMatrixInverseTranspose$(){return(this._mvp.it||(this._mvp.it=SpiderGL.Math.Mat4.transpose(this.modelViewProjectionMatrixInverse$)));},get modelViewProjectionMatrixInverseTranspose(){return SpiderGL.Math.Mat4.dup(this.modelViewProjectionMatrixInverseTranspose$);},get worldSpaceNormalMatrix$(){return(this._n.m||(this._n.m=SpiderGL.Math.Mat4.inverseTranspose33(this.modelMatrix$)));},get worldSpaceNormalMatrix(){return SpiderGL.Math.Mat4.dup(this.worldSpaceNormalMatrix$);},get viewSpaceNormalMatrix$(){return(this._n.v||(this._n.v=SpiderGL.Math.Mat4.inverseTranspose33(this.modelViewMatrix$)));},get viewSpaceNormalMatrix(){return SpiderGL.Math.Mat4.dup(this.viewSpaceNormalMatrix$);},get modelSpaceViewerPosition$(){return(this._c.mp||(this._c.mp=SpiderGL.Math.Vec4.to3(SpiderGL.Math.Mat4.col(this.modelViewMatrixInverse$,3))));},get modelSpaceViewerPosition(){return SpiderGL.Math.Vec3.dup(this.modelSpaceViewerPosition$);},get worldSpaceViewerPosition$(){return(this._c.wp||(this._c.wp=SpiderGL.Math.Vec4.to3(SpiderGL.Math.Mat4.col(this.viewMatrixInverse$,3))));},get worldSpaceViewerPosition(){return SpiderGL.Math.Vec3.dup(this.worldSpaceViewerPosition$);},get modelSpaceViewDirection$(){return(this._c.md||(this._c.md=SpiderGL.Math.Vec3.normalize$(SpiderGL.Math.Vec3.neg$(SpiderGL.Math.Vec4.to3(SpiderGL.Math.Mat4.row(this.modelViewMatrixInverse$,2))))));},get modelSpaceViewDirection(){return SpiderGL.Math.Vec3.dup(this.modelSpaceViewDirection$);},get worldSpaceViewDirection$(){return(this._c.wd||(this._c.wd=SpiderGL.Math.Vec3.normalize$(SpiderGL.Math.Vec3.neg$(SpiderGL.Math.Vec4.to3(SpiderGL.Math.Mat4.row(this.viewMatrixInverse$,2))))));},get worldSpaceViewDirection(){return SpiderGL.Math.Vec3.dup(this.worldSpaceViewDirection$);},project:function(xyzw){return SpiderGL.Math.project(xyzw,this.modelViewProjectionMatrix$,this.viewportRect$,this.depthRange$);},unproject:function(xyz){return SpiderGL.Math.unproject(xyz,this.modelViewProjectionMatrixInverse$,this.viewportRect$,this.depthRange$);}};SpiderGL.Type.extend(SpiderGL.Space.TransformationStack,SpiderGL.Core.ObjectBase);SpiderGL.WebGL={};SpiderGL.WebGL.Context={};SpiderGL.WebGL.Context.WEBGL_STRING="experimental-webgl";SpiderGL.WebGL.Context.DEFAULT_UNPACK_FLIP_Y=true;SpiderGL.WebGL.Context.DEFAULT_UNPACK_PREMULTIPLY_ALPHA=false;SpiderGL.WebGL.Context.DEFAULT_UNPACK_COLORSPACE_CONVERSION=WebGLRenderingContext.NONE;SpiderGL.WebGL.Context.get=function(canvas,args){var c=canvas;if(SpiderGL.Type.isString(c)){c=SpiderGL.DOM.getElementById(c);}
if(!SpiderGL.Type.instanceOf(c,HTMLCanvasElement)){return null;}
var ctx=c.getContext(SpiderGL.WebGL.Context.WEBGL_STRING,args);return ctx;}
SpiderGL.WebGL.Context._prepareContex=function(gl){if(!gl)return;var sgl=gl._spidergl;if(sgl)return;sgl={};gl._spidergl=sgl;sgl.TAG=0;sgl.gl=gl;var glFunctions={};sgl.glFunctions=glFunctions;for(var f in gl){var fn=gl[fn];if(typeof fn=="function"){glFunctions[f]=fn;}}};SpiderGL.WebGL.Context._addExtension=function(gl,extName,propName,setupFunc){if(!gl)return;var getExtension=gl.getExtension;gl.getExtension=function(name){if(name==extName){var sgl=this._spidergl;if(!sgl)return null;var pubExt=sgl[propName];if(!pubExt){pubExt={};pubExt.TAG=0;var ext={};pubExt._ext=ext;ext[propName]=pubExt;ext.sgl=sgl;ext.gl=gl;var glFunctions={};ext.glFunctions=glFunctions;if(!setupFunc(gl,pubExt))return null;sgl[propName]=pubExt;}
return pubExt;}
return getExtension.call(this,name);};};SpiderGL.WebGL.Context._setup_SGL_current_binding=function(gl,pubExt){if(!gl)return false;if(!pubExt)return false;if(!gl._spidergl)return false;if(gl._spidergl.cb)return false;var cb=pubExt;var ext=cb._ext;var glFunctions=ext.glFunctions;ext.currentBuffer={};ext.currentBuffer[gl.ARRAY_BUFFER]=gl.getParameter(gl.ARRAY_BUFFER_BINDING);ext.currentBuffer[gl.ELEMENT_ARRAY_BUFFER]=gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING);ext.bufferStack={};ext.bufferStack[gl.ARRAY_BUFFER]=[];ext.bufferStack[gl.ELEMENT_ARRAY_BUFFER]=[];glFunctions.bindBuffer=gl.bindBuffer;gl.bindBuffer=function(target,buffer){var ext=this._spidergl.cb._ext;var current=ext.currentBuffer[target];if(current==buffer)return;ext.currentBuffer[target]=buffer;ext.glFunctions.bindBuffer.call(this,target,buffer);};cb.getCurrentBuffer=function(target){return this._ext.currentBuffer[target];};cb.pushBuffer=function(target){var ext=this._ext;var stack=ext.bufferStack[target];var buffer=ext.currentBuffer[target];stack.push(buffer);};cb.popBuffer=function(target){var ext=this._ext;var stack=ext.bufferStack[target];if(stack.length<=0)return;var buffer=stack.pop();ext.gl.bindBuffer(target,buffer);};ext.currentFramebuffer={};ext.currentFramebuffer[gl.FRAMEBUFFER]=gl.getParameter(gl.FRAMEBUFFER_BINDING);ext.framebufferStack={};ext.framebufferStack[gl.FRAMEBUFFER]=[];glFunctions.bindFramebuffer=gl.bindFramebuffer;gl.bindFramebuffer=function(target,framebuffer){var ext=this._spidergl.cb._ext;var current=ext.currentFramebuffer[target];if(current==framebuffer)return;ext.currentFramebuffer[target]=framebuffer;ext.glFunctions.bindFramebuffer.call(this,target,framebuffer);};cb.getCurrentFramebuffer=function(target){return this._ext.currentFramebuffer[target];};cb.pushFramebuffer=function(target){var ext=this._ext;var stack=ext.framebufferStack[target];var framebuffer=ext.currentFramebuffer[target];stack.push(framebuffer);};cb.popFramebuffer=function(target){var ext=this._ext;var stack=ext.framebufferStack[target];if(stack.length<=0)return;var framebuffer=stack.pop();ext.gl.bindFramebuffer(target,framebuffer);};ext.currentProgram=gl.getParameter(gl.CURRENT_PROGRAM);ext.programStack=[];glFunctions.useProgram=gl.useProgram;gl.useProgram=function(program){var ext=this._spidergl.cb._ext;var current=ext.currentProgram;if(current==program)return;ext.currentProgram=program;ext.glFunctions.useProgram.call(this,program);};cb.getCurrentProgram=function(){return this._ext.currentProgram;};cb.pushProgram=function(){var ext=this._ext;var stack=ext.programStack;var program=ext.currentProgram;stack.push(program);};cb.popProgram=function(){var ext=this._ext;var stack=ext.programStack;if(stack.length<=0)return;var program=stack.pop();ext.gl.useProgram(program);};ext.currentRenderbuffer={};ext.currentRenderbuffer[gl.RENDERBUFFER]=gl.getParameter(gl.RENDERBUFFER_BINDING);ext.renderbufferStack={};ext.renderbufferStack[gl.RENDERBUFFER]=[];glFunctions.bindRenderbuffer=gl.bindRenderbuffer;gl.bindRenderbuffer=function(target,renderbuffer){var ext=this._spidergl.cb._ext;var current=ext.currentRenderbuffer[target];if(current==renderbuffer)return;ext.currentRenderbuffer[target]=renderbuffer;ext.glFunctions.bindRenderbuffer.call(this,target,renderbuffer);};cb.getCurrentRenderbuffer=function(target){return this._ext.currentRenderbuffer[target];};cb.pushRenderbuffer=function(target){var ext=this._ext;var stack=ext.renderbufferStack[target];var renderbuffer=ext.currentRenderbuffer[target];stack.push(renderbuffer);};cb.popRenderbuffer=function(target){var ext=this._ext;var stack=ext.renderbufferStack[target];if(stack.length<=0)return;var renderbuffer=stack.pop();ext.gl.bindRenderbuffer(target,renderbuffer);};ext.currentShader={};ext.currentShader[gl.VERTEX_SHADER]=null;ext.currentShader[gl.FRAGMENT_SHADER]=null;ext.shaderStack={};ext.shaderStack[gl.VERTEX_SHADER]=[];ext.shaderStack[gl.FRAGMENT_SHADER]=[];ext.glFunctions.bindShader=function(target,shader){};cb.bindShader=function(target,shader){var ext=this._ext;var current=ext.currentShader[target];if(current==shader)return;ext.currentShader[target]=shader;ext.glFunctions.bindShader.call(ext.gl,target,shader);};cb.getCurrentShader=function(target){return this._ext.currentShader[target];};cb.pushShader=function(target){var ext=this._ext;var stack=ext.shaderStack[target];var shader=ext.currentShader[target];stack.push(shader);};cb.popShader=function(target){var ext=this._ext;var stack=ext.shaderStack[target];if(stack.length<=0)return;var shader=stack.pop();ext.gl.bindShader(target,shader);};ext.currentTexture={};var currentTextureUnit=gl.getParameter(gl.ACTIVE_TEXTURE);var textureUnitsCount=gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);ext.currentTexture={};ext.textureStack={};ext.textureUnitStack=[];for(var i=0;i<textureUnitsCount;++i){var textureUnit=gl.TEXTURE0+i;gl.activeTexture(textureUnit);var textureBindings={}
textureBindings[gl.TEXTURE_2D]=gl.getParameter(gl.TEXTURE_BINDING_2D);textureBindings[gl.TEXTURE_CUBE_MAP]=gl.getParameter(gl.TEXTURE_BINDING_CUBE_MAP);ext.currentTexture[textureUnit]=textureBindings;var textureStacks={}
textureStacks[gl.TEXTURE_2D]=[];textureStacks[gl.TEXTURE_CUBE_MAP]=[];ext.textureStack[textureUnit]=textureStacks;}
gl.activeTexture(currentTextureUnit);ext.currentTextureUnit=currentTextureUnit;glFunctions.activeTexture=gl.activeTexture;gl.activeTexture=function(texture){var ext=this._spidergl.cb._ext;var current=ext.currentTextureUnit;if(current==texture)return;ext.currentTextureUnit=texture;ext.glFunctions.activeTexture.call(this,texture);};cb.getCurrentTextureUnit=function(){return this._ext.currentTextureUnit;};cb.pushTextureUnit=function(){var ext=this._ext;var stack=ext.textureUnitStack;var unit=ext.currentTextureUnit;stack.push(unit);};cb.popTextureUnit=function(){var ext=this._ext;var stack=ext.textureUnitStack;if(stack.length<=0)return;var unit=stack.pop();ext.gl.activeTexture(unit);};glFunctions.bindTexture=gl.bindTexture;gl.bindTexture=function(target,texture){var ext=this._spidergl.cb._ext;var unit=ext.currentTextureUnit;var current=ext.currentTexture[unit][target];if(current==texture)return;ext.currentTexture[unit][target]=texture;ext.glFunctions.bindTexture.call(this,target,texture);};cb.getCurrentTexture=function(target){var ext=this._ext;var unit=ext.currentTextureUnit;return ext.currentTexture[unit][target];};cb.pushTexture=function(target){var ext=this._ext;var unit=ext.currentTextureUnit;var stack=ext.textureStack[unit][target];var texture=ext.currentTexture[unit][target];stack.push(texture);};cb.popTexture=function(target){var ext=this._ext;var unit=ext.currentTextureUnit;var stack=ext.textureStack[unit][target];if(stack.length<=0)return;var texture=stack.pop();ext.gl.bindTexture(target,texture);};return true;};SpiderGL.WebGL.Context._setup_SGL_wrapper_notify=function(gl,pubExt){if(!gl)return false;if(!pubExt)return false;if(!gl._spidergl)return false;if(gl._spidergl.wn)return false;var wn=pubExt;var ext=wn._ext;var glFunctions=ext.glFunctions;ext.cb=gl.getExtension("SGL_current_binding");if(!ext.cb)return false;glFunctions.deleteBuffer=gl.deleteBuffer;gl.deleteBuffer=function(buffer){var ext=this._spidergl.wn._ext;ext.glFunctions.deleteBuffer.apply(this,arguments);var current=buffer;(current&&current._spidergl&&current._spidergl._gl_deleteBuffer.apply(current._spidergl,arguments));};glFunctions.isBuffer=gl.isBuffer;gl.isBuffer=function(buffer){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.isBuffer.apply(this,arguments);var current=buffer;(current&&current._spidergl&&current._spidergl._gl_isBuffer.apply(current._spidergl,arguments));return r;};glFunctions.bindBuffer=gl.bindBuffer;gl.bindBuffer=function(target){var ext=this._spidergl.wn._ext;ext.glFunctions.bindBuffer.apply(this,arguments);var current=ext.cb.getCurrentBuffer(target);(current&&current._spidergl&&current._spidergl._gl_bindBuffer.apply(current._spidergl,arguments));};glFunctions.getBufferParameter=gl.getBufferParameter;gl.getBufferParameter=function(target){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.getBufferParameter.apply(this,arguments);var current=ext.cb.getCurrentBuffer(target);(current&&current._spidergl&&current._spidergl._gl_getBufferParameter.apply(current._spidergl,arguments));return r;};glFunctions.bufferData=gl.bufferData;gl.bufferData=function(target){var ext=this._spidergl.wn._ext;ext.glFunctions.bufferData.apply(this,arguments);var current=ext.cb.getCurrentBuffer(target);(current&&current._spidergl&&current._spidergl._gl_bufferData.apply(current._spidergl,arguments));}
glFunctions.bufferSubData=gl.bufferSubData;gl.bufferSubData=function(target){var ext=this._spidergl.wn._ext;ext.glFunctions.bufferSubData.apply(this,arguments);var current=ext.cb.getCurrentBuffer(target);(current&&current._spidergl&&current._spidergl._gl_bufferSubData.apply(current._spidergl,arguments));}
glFunctions.vertexAttribPointer=gl.vertexAttribPointer;gl.vertexAttribPointer=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.vertexAttribPointer.apply(this,arguments);var target=this.ARRAY_BUFFER;var current=ext.cb.getCurrentBuffer(target);(current&&current._spidergl&&current._spidergl._gl_vertexAttribPointer.apply(current._spidergl,arguments));};glFunctions.drawElements=gl.drawElements;gl.drawElements=function(buffer,mode,count,type,offset){var ext=this._spidergl.wn._ext;ext.glFunctions.drawElements.apply(this,arguments);var target=this.ELEMENT_ARRAY_BUFFER;var current=ext.cb.getCurrentBuffer(target);(current&&current._spidergl&&current._spidergl._gl_drawElements.apply(current._spidergl,arguments));};glFunctions.deleteFramebuffer=gl.deleteFramebuffer;gl.deleteFramebuffer=function(framebuffer){var ext=this._spidergl.wn._ext;ext.glFunctions.deleteFramebuffer.apply(this,arguments);var current=framebuffer;(current&&current._spidergl&&current._spidergl._gl_deleteFramebuffer.apply(current._spidergl,arguments));};glFunctions.isFramebuffer=gl.isFramebuffer;gl.isFramebuffer=function(framebuffer){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.isFramebuffer.apply(this,arguments);var current=framebuffer;(current&&current._spidergl&&current._spidergl._gl_isFramebuffer.apply(current._spidergl,arguments));return r;};glFunctions.bindFramebuffer=gl.bindFramebuffer;gl.bindFramebuffer=function(target){var ext=this._spidergl.wn._ext;ext.glFunctions.bindFramebuffer.apply(this,arguments);var current=ext.cb.getCurrentFramebuffer(target);(current&&current._spidergl&&current._spidergl._gl_bindFramebuffer.apply(current._spidergl,arguments));};glFunctions.checkFramebufferStatus=gl.checkFramebufferStatus;gl.checkFramebufferStatus=function(target){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.checkFramebufferStatus.apply(this,arguments);var current=ext.cb.getCurrentFramebuffer(target);(current&&current._spidergl&&current._spidergl._gl_checkFramebufferStatus.apply(current._spidergl,arguments));return r;};glFunctions.getFramebufferAttachmentParameter=gl.getFramebufferAttachmentParameter;gl.getFramebufferAttachmentParameter=function(target){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.getFramebufferAttachmentParameter.apply(this,arguments);var current=ext.cb.getCurrentFramebuffer(target);(current&&current._spidergl&&current._spidergl._gl_getFramebufferAttachmentParameter.apply(current._spidergl,arguments));return r;};glFunctions.framebufferRenderbuffer=gl.framebufferRenderbuffer;gl.framebufferRenderbuffer=function(target){var ext=this._spidergl.wn._ext;ext.glFunctions.framebufferRenderbuffer.apply(this,arguments);var current=ext.cb.getCurrentFramebuffer(target);(current&&current._spidergl&&current._spidergl._gl_framebufferRenderbuffer.apply(current._spidergl,arguments));}
glFunctions.framebufferTexture2D=gl.framebufferTexture2D;gl.framebufferTexture2D=function(target){var ext=this._spidergl.wn._ext;ext.glFunctions.framebufferTexture2D.apply(this,arguments);var current=ext.cb.getCurrentFramebuffer(target);(current&&current._spidergl&&current._spidergl._gl_framebufferTexture2D.apply(current._spidergl,arguments));};glFunctions.clear=gl.clear;gl.clear=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.clear.apply(this,arguments);var target=this.FRAMEBUFFER;var current=ext.cb.getCurrentFramebuffer(target);(current&&current._spidergl&&current._spidergl._gl_clear.apply(current._spidergl,arguments));};glFunctions.readPixels=gl.readPixels;gl.readPixels=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.readPixels.apply(this,arguments);var target=this.FRAMEBUFFER;var current=ext.cb.getCurrentFramebuffer(target);(current&&current._spidergl&&current._spidergl._gl_readPixels.apply(current._spidergl,arguments));};glFunctions.deleteProgram=gl.deleteProgram;gl.deleteProgram=function(program){var ext=this._spidergl.wn._ext;ext.glFunctions.deleteProgram.apply(this,arguments);var current=program;(current&&current._spidergl&&current._spidergl._gl_deleteProgram.apply(current._spidergl,arguments));};glFunctions.isProgram=gl.isProgram;gl.isProgram=function(program){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.isProgram.apply(this,arguments);var current=program;(current&&current._spidergl&&current._spidergl._gl_isProgram.apply(current._spidergl,arguments));return r;};glFunctions.useProgram=gl.useProgram;gl.useProgram=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.useProgram.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_useProgram.apply(current._spidergl,arguments));};glFunctions.getActiveAttrib=gl.getActiveAttrib;gl.getActiveAttrib=function(program){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.getActiveAttrib.apply(this,arguments);var current=program;(current&&current._spidergl&&current._spidergl._gl_getActiveAttrib.apply(current._spidergl,arguments));return r;};glFunctions.getActiveUniform=gl.getActiveUniform;gl.getActiveUniform=function(program){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.getActiveUniform.apply(this,arguments);var current=program;(current&&current._spidergl&&current._spidergl._gl_getActiveUniform.apply(current._spidergl,arguments));return r;};glFunctions.getAttachedShaders=gl.getAttachedShaders;gl.getAttachedShaders=function(program){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.getAttachedShaders.apply(this,arguments);var current=program;(current&&current._spidergl&&current._spidergl._gl_getAttachedShaders.apply(current._spidergl,arguments));return r;};glFunctions.getAttribLocation=gl.getAttribLocation;gl.getAttribLocation=function(program){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.getAttribLocation.apply(this,arguments);var current=program;(current&&current._spidergl&&current._spidergl._gl_getAttribLocation.apply(current._spidergl,arguments));return r;};glFunctions.getProgramParameter=gl.getProgramParameter;gl.getProgramParameter=function(program){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.getProgramParameter.apply(this,arguments);var current=program;(current&&current._spidergl&&current._spidergl._gl_getProgramParameter.apply(current._spidergl,arguments));return r;};glFunctions.getProgramInfoLog=gl.getProgramInfoLog;gl.getProgramInfoLog=function(program){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.getProgramInfoLog.apply(this,arguments);var current=program;(current&&current._spidergl&&current._spidergl._gl_getProgramInfoLog.apply(current._spidergl,arguments));return r;};glFunctions.getUniform=gl.getUniform;gl.getUniform=function(program){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.getUniform.apply(this,arguments);var current=program;(current&&current._spidergl&&current._spidergl._gl_getUniform.apply(current._spidergl,arguments));return r;};glFunctions.getUniformLocation=gl.getUniformLocation;gl.getUniformLocation=function(program){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.getUniformLocation.apply(this,arguments);var current=program;(current&&current._spidergl&&current._spidergl._gl_getUniformLocation.apply(current._spidergl,arguments));return r;};glFunctions.attachShader=gl.attachShader;gl.attachShader=function(program){var ext=this._spidergl.wn._ext;ext.glFunctions.attachShader.apply(this,arguments);var current=program;(current&&current._spidergl&&current._spidergl._gl_attachShader.apply(current._spidergl,arguments));};glFunctions.bindAttribLocation=gl.bindAttribLocation;gl.bindAttribLocation=function(program){var ext=this._spidergl.wn._ext;ext.glFunctions.bindAttribLocation.apply(this,arguments);var current=program;(current&&current._spidergl&&current._spidergl._gl_bindAttribLocation.apply(current._spidergl,arguments));};glFunctions.detachShader=gl.detachShader;gl.detachShader=function(program){var ext=this._spidergl.wn._ext;ext.glFunctions.detachShader.apply(this,arguments);var current=program;(current&&current._spidergl&&current._spidergl._gl_detachShader.apply(current._spidergl,arguments));};glFunctions.linkProgram=gl.linkProgram;gl.linkProgram=function(program){var ext=this._spidergl.wn._ext;ext.glFunctions.linkProgram.apply(this,arguments);var current=program;(current&&current._spidergl&&current._spidergl._gl_linkProgram.apply(current._spidergl,arguments));};glFunctions.uniform1f=gl.uniform1f;gl.uniform1f=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniform1f.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniform1f.apply(current._spidergl,arguments));};glFunctions.uniform1fv=gl.uniform1fv;gl.uniform1fv=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniform1fv.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniform1fv.apply(current._spidergl,arguments));};glFunctions.uniform1i=gl.uniform1i;gl.uniform1i=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniform1i.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniform1i.apply(current._spidergl,arguments));};glFunctions.uniform1iv=gl.uniform1iv;gl.uniform1iv=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniform1iv.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniform1iv.apply(current._spidergl,arguments));};glFunctions.uniform2f=gl.uniform2f;gl.uniform2f=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniform2f.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniform2f.apply(current._spidergl,arguments));};glFunctions.uniform2fv=gl.uniform2fv;gl.uniform2fv=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniform2fv.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniform2fv.apply(current._spidergl,arguments));};glFunctions.uniform2i=gl.uniform2i;gl.uniform2i=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniform2i.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniform2i.apply(current._spidergl,arguments));};glFunctions.uniform2iv=gl.uniform2iv;gl.uniform2iv=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniform2iv.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniform2iv.apply(current._spidergl,arguments));};glFunctions.uniform3f=gl.uniform3f;gl.uniform3f=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniform3f.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniform3f.apply(current._spidergl,arguments));};glFunctions.uniform3fv=gl.uniform3fv;gl.uniform3fv=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniform3fv.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniform3fv.apply(current._spidergl,arguments));};glFunctions.uniform3i=gl.uniform3i;gl.uniform3i=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniform3i.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniform3i.apply(current._spidergl,arguments));};glFunctions.uniform3iv=gl.uniform3iv;gl.uniform3iv=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniform3iv.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniform3iv.apply(current._spidergl,arguments));};glFunctions.uniform4f=gl.uniform4f;gl.uniform4f=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniform4f.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniform4f.apply(current._spidergl,arguments));};glFunctions.uniform4fv=gl.uniform4fv;gl.uniform4fv=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniform4fv.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniform4fv.apply(current._spidergl,arguments));};glFunctions.uniform4i=gl.uniform4i;gl.uniform4i=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniform4i.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniform4i.apply(current._spidergl,arguments));};glFunctions.uniform4iv=gl.uniform4iv;gl.uniform4iv=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniform4iv.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniform4iv.apply(current._spidergl,arguments));};glFunctions.uniformMatrix2fv=gl.uniformMatrix2fv;gl.uniformMatrix2fv=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniformMatrix2fv.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniformMatrix2fv.apply(current._spidergl,arguments));};glFunctions.uniformMatrix3fv=gl.uniformMatrix3fv;gl.uniformMatrix3fv=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniformMatrix3fv.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniformMatrix3fv.apply(current._spidergl,arguments));};glFunctions.uniformMatrix4fv=gl.uniformMatrix4fv;gl.uniformMatrix4fv=function(){var ext=this._spidergl.wn._ext;ext.glFunctions.uniformMatrix4fv.apply(this,arguments);var current=ext.cb.getCurrentProgram();(current&&current._spidergl&&current._spidergl._gl_uniformMatrix4fv.apply(current._spidergl,arguments));};glFunctions.validateProgram=gl.validateProgram;gl.validateProgram=function(program){var ext=this._spidergl.wn._ext;ext.glFunctions.validateProgram.apply(this,arguments);var current=program;(current&&current._spidergl&&current._spidergl._gl_validateProgram.apply(current._spidergl,arguments));};glFunctions.deleteRenderbuffer=gl.deleteRenderbuffer;gl.deleteRenderbuffer=function(renderbuffer){var ext=this._spidergl.wn._ext;ext.glFunctions.deleteRenderbuffer.apply(this,arguments);var current=renderbuffer;(current&&current._spidergl&&current._spidergl._gl_deleteRenderbuffer.apply(current._spidergl,arguments));};glFunctions.isRenderbuffer=gl.isRenderbuffer;gl.isRenderbuffer=function(renderbuffer){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.isRenderbuffer.apply(this,arguments);var current=renderbuffer;(current&&current._spidergl&&current._spidergl._gl_isRenderbuffer.apply(current._spidergl,arguments));return r;};glFunctions.bindRenderbuffer=gl.bindRenderbuffer;gl.bindRenderbuffer=function(target){var ext=this._spidergl.wn._ext;ext.glFunctions.bindRenderbuffer.apply(this,arguments);var current=ext.cb.getCurrentRenderbuffer(target);(current&&current._spidergl&&current._spidergl._gl_bindRenderbuffer.apply(current._spidergl,arguments));};glFunctions.getRenderbufferParameter=gl.getRenderbufferParameter;gl.getRenderbufferParameter=function(target){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.getRenderbufferParameter.apply(this,arguments);var current=ext.cb.getCurrentRenderbuffer(target);(current&&current._spidergl&&current._spidergl._gl_getRenderbufferParameter.apply(current._spidergl,arguments));return r;};glFunctions.renderbufferStorage=gl.renderbufferStorage;gl.renderbufferStorage=function(target){var ext=this._spidergl.wn._ext;ext.glFunctions.renderbufferStorage.apply(this,arguments);var current=ext.cb.getCurrentRenderbuffer(target);(current&&current._spidergl&&current._spidergl._gl_renderbufferStorage.apply(current._spidergl,arguments));}
glFunctions.deleteShader=gl.deleteShader;gl.deleteShader=function(shader){var ext=this._spidergl.wn._ext;ext.glFunctions.deleteShader.apply(this,arguments);var current=shader;(current&&current._spidergl&&current._spidergl._gl_deleteShader.apply(current._spidergl,arguments));};glFunctions.isShader=gl.isShader;gl.isShader=function(shader){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.isShader.apply(this,arguments);var current=shader;(current&&current._spidergl&&current._spidergl._gl_isShader.apply(current._spidergl,arguments));return r;};glFunctions.getShaderParameter=gl.getShaderParameter;gl.getShaderParameter=function(shader){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.getShaderParameter.apply(this,arguments);var current=shader;(current&&current._spidergl&&current._spidergl._gl_getShaderParameter.apply(current._spidergl,arguments));return r;};glFunctions.getShaderInfoLog=gl.getShaderInfoLog;gl.getShaderInfoLog=function(shader){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.getShaderInfoLog.apply(this,arguments);var current=shader;(current&&current._spidergl&&current._spidergl._gl_getShaderInfoLog.apply(current._spidergl,arguments));return r;};glFunctions.getShaderSource=gl.getShaderSource;gl.getShaderSource=function(shader){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.getShaderSource.apply(this,arguments);var current=shader;(current&&current._spidergl&&current._spidergl._gl_getShaderSource.apply(current._spidergl,arguments));return r;};glFunctions.compileShader=gl.compileShader;gl.compileShader=function(shader){var ext=this._spidergl.wn._ext;ext.glFunctions.compileShader.apply(this,arguments);var current=shader;(current&&current._spidergl&&current._spidergl._gl_compileShader.apply(current._spidergl,arguments));}
glFunctions.shaderSource=gl.shaderSource;gl.shaderSource=function(shader){var ext=this._spidergl.wn._ext;ext.glFunctions.shaderSource.apply(this,arguments);var current=shader;(current&&current._spidergl&&current._spidergl._gl_shaderSource.apply(current._spidergl,arguments));}
ext.textureTargetMap={};ext.textureTargetMap[gl.TEXTURE_2D]=gl.TEXTURE_2D;ext.textureTargetMap[gl.TEXTURE_CUBE_MAP]=gl.TEXTURE_CUBE_MAP;ext.textureTargetMap[gl.TEXTURE_CUBE_MAP_POSITIVE_X]=gl.TEXTURE_CUBE_MAP;ext.textureTargetMap[gl.TEXTURE_CUBE_MAP_NEGATIVE_X]=gl.TEXTURE_CUBE_MAP;ext.textureTargetMap[gl.TEXTURE_CUBE_MAP_POSITIVE_Y]=gl.TEXTURE_CUBE_MAP;ext.textureTargetMap[gl.TEXTURE_CUBE_MAP_NEGATIVE_Y]=gl.TEXTURE_CUBE_MAP;ext.textureTargetMap[gl.TEXTURE_CUBE_MAP_POSITIVE_Z]=gl.TEXTURE_CUBE_MAP;ext.textureTargetMap[gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]=gl.TEXTURE_CUBE_MAP;glFunctions.deleteTexture=gl.deleteTexture;gl.deleteTexture=function(texture){var ext=this._spidergl.wn._ext;ext.glFunctions.deleteTexture.apply(this,arguments);var current=texture;(current&&current._spidergl&&current._spidergl._gl_deleteTexture.apply(current._spidergl,arguments));};glFunctions.isTexture=gl.isTexture;gl.isTexture=function(texture){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.isTexture.apply(this,arguments);var current=texture;(current&&current._spidergl&&current._spidergl._gl_isTexture.apply(current._spidergl,arguments));return r;};glFunctions.bindTexture=gl.bindTexture;gl.bindTexture=function(target){var ext=this._spidergl.wn._ext;ext.glFunctions.bindTexture.apply(this,arguments);var current=ext.cb.getCurrentTexture(target);(current&&current._spidergl&&current._spidergl._gl_bindTexture.apply(current._spidergl,arguments));};glFunctions.getTexParameter=gl.getTexParameter;gl.getTexParameter=function(target){var ext=this._spidergl.wn._ext;var r=ext.glFunctions.getTexParameter.apply(this,arguments);var current=ext.cb.getCurrentTexture(target);(current&&current._spidergl&&current._spidergl._gl_getTexParameter.apply(current._spidergl,arguments));return r;};glFunctions.copyTexImage2D=gl.copyTexImage2D;gl.copyTexImage2D=function(target){var ext=this._spidergl.wn._ext;ext.glFunctions.copyTexImage2D.apply(this,arguments);var texTarget=ext.textureTargetMap[target];var current=ext.cb.getCurrentTexture(texTarget);(current&&current._spidergl&&current._spidergl._gl_copyTexImage2D.apply(current._spidergl,arguments));}
glFunctions.copyTexSubImage2D=gl.copyTexSubImage2D;gl.copyTexSubImage2D=function(target){var ext=this._spidergl.wn._ext;ext.glFunctions.copyTexSubImage2D.apply(this,arguments);var texTarget=ext.textureTargetMap[target];var current=ext.cb.getCurrentTexture(texTarget);(current&&current._spidergl&&current._spidergl._gl_copyTexSubImage2D.apply(current._spidergl,arguments));}
glFunctions.generateMipmap=gl.generateMipmap;gl.generateMipmap=function(target){var ext=this._spidergl.wn._ext;ext.glFunctions.generateMipmap.apply(this,arguments);var current=ext.cb.getCurrentTexture(target);(current&&current._spidergl&&current._spidergl._gl_generateMipmap.apply(current._spidergl,arguments));}
glFunctions.texImage2D=gl.texImage2D;gl.texImage2D=function(target){var ext=this._spidergl.wn._ext;ext.glFunctions.texImage2D.apply(this,arguments);var texTarget=ext.textureTargetMap[target];var current=ext.cb.getCurrentTexture(texTarget);(current&&current._spidergl&&current._spidergl._gl_texImage2D.apply(current._spidergl,arguments));}
glFunctions.texParameterf=gl.texParameterf;gl.texParameterf=function(target){var ext=this._spidergl.wn._ext;ext.glFunctions.texParameterf.apply(this,arguments);var current=ext.cb.getCurrentTexture(target);(current&&current._spidergl&&current._spidergl._gl_texParameterf.apply(current._spidergl,arguments));}
glFunctions.texParameteri=gl.texParameteri;gl.texParameteri=function(target){var ext=this._spidergl.wn._ext;ext.glFunctions.texParameteri.apply(this,arguments);var current=ext.cb.getCurrentTexture(target);(current&&current._spidergl&&current._spidergl._gl_texParameteri.apply(current._spidergl,arguments));}
glFunctions.texSubImage2D=gl.texSubImage2D;gl.texSubImage2D=function(target){var ext=this._spidergl.wn._ext;ext.glFunctions.texSubImage2D.apply(this,arguments);var texTarget=ext.textureTargetMap[target];var current=ext.cb.getCurrentTexture(texTarget);(current&&current._spidergl&&current._spidergl._gl_texSubImage2D.apply(current._spidergl,arguments));}
return true;};SpiderGL.WebGL.Context._setup_SGL_direct_state_access=function(gl,pubExt){if(!gl)return false;if(!pubExt)return false;if(!gl._spidergl)return false;if(gl._spidergl.dsa)return false;var dsa=pubExt;var ext=dsa._ext;var glFunctions=ext.glFunctions;ext.cb=gl.getExtension("SGL_current_binding");if(!ext.cb)return false;dsa.getBufferParameter=function(buffer,target,pname){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentBuffer(target);(current!=buffer)&&gl.bindBuffer(target,buffer);var r=gl.getBufferParameter(target,pname);(current!=buffer)&&gl.bindBuffer(target,current);return r;};dsa.bufferData=function(buffer,target,dataOrSize,usage){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentBuffer(target);(current!=buffer)&&gl.bindBuffer(target,buffer);gl.bufferData(target,dataOrSize,usage);(current!=buffer)&&gl.bindBuffer(target,current);}
dsa.bufferSubData=function(buffer,target,offset,data){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentBuffer(target);(current!=buffer)&&gl.bindBuffer(target,buffer);gl.bufferSubData(target,offset,data);(current!=buffer)&&gl.bindBuffer(target,current);}
dsa.vertexAttribPointer=function(buffer,indx,size,type,normalized,stride,offset){var ext=this._ext;var gl=ext.gl;var target=gl.ARRAY_BUFFER;var current=ext.cb.getCurrentBuffer(target);(current!=buffer)&&gl.bindBuffer(target,buffer);gl.vertexAttribPointer(indx,size,type,normalized,stride,offset);(current!=buffer)&&gl.bindBuffer(target,current);};dsa.drawElements=function(buffer,mode,count,type,offset){var ext=this._ext;var gl=ext.gl;var target=gl.ELEMENT_ARRAY_BUFFER;var current=ext.cb.getCurrentBuffer(target);(current!=buffer)&&gl.bindBuffer(target,buffer);gl.drawElements(mode,count,type,offset);(current!=buffer)&&gl.bindBuffer(target,current);};dsa.checkFramebufferStatus=function(framebuffer,target){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentFramebuffer(target);(current!=framebuffer)&&gl.bindFramebuffer(target,framebuffer);var r=gl.checkFramebufferStatus(target);(current!=framebuffer)&&gl.bindFramebuffer(target,current);return r;};dsa.getFramebufferAttachmentParameter=function(framebuffer,target,attachment,pname){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentFramebuffer(target);(current!=framebuffer)&&gl.bindFramebuffer(target,framebuffer);var r=gl.getFramebufferAttachmentParameter(target,attachment,pname);(current!=framebuffer)&&gl.bindFramebuffer(target,current);return r;};dsa.framebufferRenderbuffer=function(framebuffer,target,attachment,renderbuffertarget,renderbuffer){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentFramebuffer(target);(current!=framebuffer)&&gl.bindFramebuffer(target,framebuffer);gl.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);(current!=framebuffer)&&gl.bindFramebuffer(target,current);};dsa.framebufferTexture2D=function(framebuffer,target,attachment,textarget,texture,level){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentFramebuffer(target);(current!=framebuffer)&&gl.bindFramebuffer(target,framebuffer);gl.framebufferTexture2D(target,attachment,textarget,texture,level);(current!=framebuffer)&&gl.bindFramebuffer(target,current);};dsa.clear=function(framebuffer,mask){var ext=this._ext;var gl=ext.gl;var target=gl.FRAMEBUFFER
var current=ext.cb.getCurrentFramebuffer(target);(current!=framebuffer)&&gl.bindFramebuffer(target,framebuffer);gl.clear(mask);(current!=framebuffer)&&gl.bindFramebuffer(target,current);};dsa.readPixels=function(framebuffer,x,y,width,height,format,type,pixels){var ext=this._ext;var gl=ext.gl;var target=gl.FRAMEBUFFER
var current=ext.cb.getCurrentFramebuffer(target);(current!=framebuffer)&&gl.bindFramebuffer(target,framebuffer);gl.readPixels(x,y,width,height,format,type,pixels);(current!=framebuffer)&&gl.bindFramebuffer(target,current);};dsa.uniform1f=function(program,location,x){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniform1f(location,x);(current!=program)&&gl.useProgram(current);};dsa.uniform1fv=function(program,location,v){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniform1fv(location,v);(current!=program)&&gl.useProgram(current);};dsa.uniform1i=function(program,location,x){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniform1i(location,x);(current!=program)&&gl.useProgram(current);};dsa.uniform1iv=function(program,location,v){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniform1iv(location,v);(current!=program)&&gl.useProgram(current);};dsa.uniform2f=function(program,location,x,y){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniform2f(location,x,y);(current!=program)&&gl.useProgram(current);};dsa.uniform2fv=function(program,location,v){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniform2fv(location,v);(current!=program)&&gl.useProgram(current);};dsa.uniform2i=function(program,location,x,y){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniform2i(location,x,y);(current!=program)&&gl.useProgram(current);};dsa.uniform2iv=function(program,location,v){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniform2iv(location,v);(current!=program)&&gl.useProgram(current);};dsa.uniform3f=function(program,location,x,y,z){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniform3f(location,x,y,z);(current!=program)&&gl.useProgram(current);};dsa.uniform3fv=function(program,location,v){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniform3fv(location,v);(current!=program)&&gl.useProgram(current);};dsa.uniform3i=function(program,location,x,y,z){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniform3i(location,x,y,z);(current!=program)&&gl.useProgram(current);};dsa.uniform3iv=function(program,location,v){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniform3iv(location,v);(current!=program)&&gl.useProgram(current);};dsa.uniform4f=function(program,location,x,y,z,w){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniform4f(location,x,y,z,w);(current!=program)&&gl.useProgram(current);};dsa.uniform4fv=function(program,location,v){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniform4fv(location,v);(current!=program)&&gl.useProgram(current);};dsa.uniform4i=function(program,location,x,y,z,w){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniform4i(location,x,y,z,w);(current!=program)&&gl.useProgram(current);};dsa.uniform4iv=function(program,location,v){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniform4iv(location,v);(current!=program)&&gl.useProgram(current);};dsa.uniformMatrix2fv=function(program,location,transpose,value){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniformMatrix2fv(location,transpose,value);(current!=program)&&gl.useProgram(current);};dsa.uniformMatrix3fv=function(program,location,transpose,value){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniformMatrix3fv(location,transpose,value);(current!=program)&&gl.useProgram(current);};dsa.uniformMatrix4fv=function(program,location,transpose,value){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentProgram();(current!=program)&&gl.useProgram(program);gl.uniformMatrix4fv(location,transpose,value);(current!=program)&&gl.useProgram(current);};dsa.getRenderbufferParameter=function(renderbuffer,target,pname){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentRenderbuffer(target);(current!=renderbuffer)&&gl.bindRenderbuffer(target,renderbuffer);var r=gl.getRenderbufferParameter.call(gl,target,pname);(current!=renderbuffer)&&gl.bindRenderbuffer(target,current);return r;};dsa.renderbufferStorage=function(renderbuffer,target,internalformat,width,height){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentRenderbuffer(target);(current!=renderbuffer)&&gl.bindRenderbuffer(target,renderbuffer);gl.renderbufferStorage(target,internalformat,width,height);(current!=renderbuffer)&&gl.bindRenderbuffer(target,current);};dsa.shaderIsNull=function(shader){return(shader==null);};ext.textureTargetMap={};ext.textureTargetMap[gl.TEXTURE_2D]=gl.TEXTURE_2D;ext.textureTargetMap[gl.TEXTURE_CUBE_MAP]=gl.TEXTURE_CUBE_MAP;ext.textureTargetMap[gl.TEXTURE_CUBE_MAP_POSITIVE_X]=gl.TEXTURE_CUBE_MAP;ext.textureTargetMap[gl.TEXTURE_CUBE_MAP_NEGATIVE_X]=gl.TEXTURE_CUBE_MAP;ext.textureTargetMap[gl.TEXTURE_CUBE_MAP_POSITIVE_Y]=gl.TEXTURE_CUBE_MAP;ext.textureTargetMap[gl.TEXTURE_CUBE_MAP_NEGATIVE_Y]=gl.TEXTURE_CUBE_MAP;ext.textureTargetMap[gl.TEXTURE_CUBE_MAP_POSITIVE_Z]=gl.TEXTURE_CUBE_MAP;ext.textureTargetMap[gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]=gl.TEXTURE_CUBE_MAP;dsa.getTexParameter=function(texture,target,pname){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentTexture(target);(current!=texture)&&gl.bindTexture(target,texture);var r=gl.getTexParameter(target,pname);(current!=texture)&&gl.bindTexture(target,current);return r;};dsa.copyTexImage2D=function(texture,target,level,internalformat,x,y,width,height,border){var ext=this._ext;var gl=ext.gl;var texTarget=ext.textureTargetMap[target];var current=ext.cb.getCurrentTexture(texTarget);(current!=texture)&&gl.bindTexture(texTarget,texture);gl.copyTexImage2D(target,level,internalformat,x,y,width,height,border);(current!=texture)&&gl.bindTexture(texTarget,current);};dsa.copyTexSubImage2D=function(texture,target,level,xoffset,yoffset,x,y,width,height,border){var ext=this._ext;var gl=ext.gl;var texTarget=ext.textureTargetMap[target];var current=ext.cb.getCurrentTexture(texTarget);(current!=texture)&&gl.bindTexture(texTarget,texture);gl.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height,border);(current!=texture)&&gl.bindTexture(texTarget,current);};dsa.generateMipmap=function(texture,target){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentTexture(target);(current!=texture)&&gl.bindTexture(target,texture);gl.generateMipmap(target);(current!=texture)&&gl.bindTexture(target,current);};dsa.texImage2D=function(texture,target){var ext=this._ext;var gl=ext.gl;var texTarget=ext.textureTargetMap[target];var current=ext.cb.getCurrentTexture(texTarget);(current!=texture)&&gl.bindTexture(texTarget,texture);var args=Array.prototype.slice.call(arguments,1);gl.texImage2D.apply(gl,args);(current!=texture)&&gl.bindTexture(texTarget,current);};dsa.texParameterf=function(texture,target,pname,param){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentTexture(target);(current!=texture)&&gl.bindTexture(target,texture);gl.texParameterf(target,pname,param);(current!=texture)&&gl.bindTexture(target,current);};dsa.texParameteri=function(texture,target,pname,param){var ext=this._ext;var gl=ext.gl;var current=ext.cb.getCurrentTexture(target);(current!=texture)&&gl.bindTexture(target,texture);gl.texParameteri(target,pname,param);(current!=texture)&&gl.bindTexture(target,current);};dsa.texSubImage2D=function(texture,target){var ext=this._ext;var gl=ext.gl;var texTarget=ext.textureTargetMap[target];var current=ext.cb.getCurrentTexture(texTarget);(current!=texture)&&gl.bindTexture(texTarget,texture);var args=Array.prototype.slice.call(arguments,1);gl.texSubImage2D.apply(gl,args);(current!=texture)&&gl.bindTexture(texTarget,current);};dsa.bindTexture=function(unit,target,texture){var ext=this._ext;var gl=ext.gl;var cb=ext.cb;var currentUnit=cb.getCurrentTextureUnit();(currentUnit!=unit)&&gl.activeTexture(unit);gl.bindTexture(target,texture);(currentUnit!=unit)&&gl.activeTexture(currentUnit);};return true;};SpiderGL.WebGL.Context.hijack=function(gl){if(!SpiderGL.Type.instanceOf(gl,WebGLRenderingContext)){return false;}
if(gl._spidergl){return false;}
SpiderGL.WebGL.Context._prepareContex(gl);SpiderGL.WebGL.Context._addExtension(gl,"SGL_current_binding","cb",SpiderGL.WebGL.Context._setup_SGL_current_binding);SpiderGL.WebGL.Context._addExtension(gl,"SGL_wrapper_notify","wn",SpiderGL.WebGL.Context._setup_SGL_wrapper_notify);SpiderGL.WebGL.Context._addExtension(gl,"SGL_direct_state_access","dsa",SpiderGL.WebGL.Context._setup_SGL_direct_state_access);var cb=gl.getExtension("SGL_current_binding");var wn=gl.getExtension("SGL_wrapper_notify");var dsa=gl.getExtension("SGL_direct_state_access");var hijacked=(!!cb&&!!wn&&!!dsa);return hijacked;}
SpiderGL.WebGL.Context.isHijacked=function(gl){return(SpiderGL.Type.instanceOf(gl,WebGLRenderingContext)&&gl._spidergl);}
SpiderGL.WebGL.Context.getHijacked=function(canvas,args){var gl=SpiderGL.WebGL.Context.get(canvas,args);SpiderGL.WebGL.Context.hijack(gl);return gl;}
SpiderGL.WebGL.Context.setStandardGLUnpack=function(gl){gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,true);gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,false);gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL,WebGLRenderingContext.NONE);}
SpiderGL.WebGL.ObjectGL=function(gl,target,options){if(!SpiderGL.WebGL.Context.isHijacked(gl)){return null;}
options=SpiderGL.Utility.getDefaultObject({handle:null},options);SpiderGL.Core.ObjectBase.call(this);var wn=gl.getExtension("SGL_wrapper_notify");this._gl=gl;this._cb=gl.getExtension("SGL_current_binding");this._dsa=gl.getExtension("SGL_direct_state_access");this._h=options.handle;this._t=target;}
SpiderGL.WebGL.ObjectGL.TARGET=WebGLRenderingContext.NONE;SpiderGL.WebGL.ObjectGL.unbind=function(gl){};SpiderGL.WebGL.ObjectGL.prototype={get gl(){return this._gl;},get handle(){return this._h;},get target(){return this._t;},get isValid(){return(this._h!=null);},get isReady(){return false;},destroy:function(){},bind:function(){},unbind:function(){}};SpiderGL.Type.extend(SpiderGL.WebGL.ObjectGL,SpiderGL.Core.ObjectBase);SpiderGL.WebGL.Buffer=function(gl,target,options){if(!SpiderGL.WebGL.Context.isHijacked(gl)){return null;}
if(SpiderGL.Type.instanceOf(options,WebGLBuffer)){options={handle:options};}
else if(SpiderGL.Type.instanceOf(options,ArrayBuffer)||SpiderGL.Type.isTypedArray(options)){options={data:options};}
else if(SpiderGL.Type.isNumber(options)){options={size:options};}
options=SpiderGL.Utility.getDefaultObject({handle:null,data:null,size:0,usage:SpiderGL.WebGL.Buffer.DEFAULT_USAGE},options);SpiderGL.WebGL.ObjectGL.call(this,gl,target,options);if(!!this._h&&!!this._h._spidergl&&(this._h._spidergl!=this))return this._h._spidergl;var gl=this._gl;var cb=this._cb;var dsa=this._dsa;var t=this._t;var h=this._h;cb.pushBuffer(t);if(h){gl.bindBuffer(t,h);options.size=gl.getBufferParameter(t,gl.BUFFER_SIZE);options.usage=gl.getBufferParameter(t,gl.BUFFER_USAGE);}
else{h=gl.createBuffer();gl.bindBuffer(t,h);this._h=h;}
cb.popBuffer(t);h._spidergl=this;this._size=options.size;this._usage=options.usage;if(options.data){this.setData(options.data,options.usage);}
else if(options.size){this.setSize(options.size,options.usage);}}
SpiderGL.WebGL.Buffer.TARGET=WebGLRenderingContext.NONE;SpiderGL.WebGL.Buffer.DEFAULT_USAGE=WebGLRenderingContext.STATIC_DRAW;SpiderGL.WebGL.Buffer.DEFAULT_SUB_DATA_OFFSET=0;SpiderGL.WebGL.Buffer.unbind=function(gl){};SpiderGL.WebGL.Buffer.prototype={_gl_deleteBuffer:function(){this._h=null;},_gl_isBuffer:function(){},_gl_bindBuffer:function(){},_gl_getBufferParameter:function(){},_gl_bufferData:function(){var sizeOrData=arguments[1];var usage=arguments[2];this._size=(SpiderGL.Type.isNumber(sizeOrData))?(sizeOrData):(sizeOrData.byteLength);this._usage=usage;},_gl_bufferSubData:function(){},_gl_vertexAttribPointer:function(){},_gl_drawElements:function(){},get isReady(){return(this._size>0);},get size(){return this._size;},get usage(){return this._usage;},setSize:function(size,usage){usage=SpiderGL.Utility.getDefaultValue(usage,SpiderGL.WebGL.Buffer.DEFAULT_USAGE);this._dsa.bufferData(this._h,this._t,size,usage);},setData:function(data,usage){usage=SpiderGL.Utility.getDefaultValue(usage,SpiderGL.WebGL.Buffer.DEFAULT_USAGE);this._dsa.bufferData(this._h,this._t,data,usage);},setSubData:function(data,offset){offset=SpiderGL.Utility.getDefaultValue(offset,SpiderGL.WebGL.Buffer.DEFAULT_SUB_DATA_OFFSET);this._dsa.bufferSubData(this._h,this._t,offset,data);},destroy:function(){this._gl.deleteBuffer(this._h);},bind:function(){this._gl.bindBuffer(this._t,this._h);},unbind:function(){this._gl.bindBuffer(this._t,null);}};SpiderGL.Type.extend(SpiderGL.WebGL.Buffer,SpiderGL.WebGL.ObjectGL);SpiderGL.WebGL.VertexBuffer=function(gl,options){if(!SpiderGL.WebGL.Context.isHijacked(gl)){return null;}
SpiderGL.WebGL.Buffer.call(this,gl,SpiderGL.WebGL.VertexBuffer.TARGET,options);if(!!this._h&&!!this._h._spidergl&&(this._h._spidergl!=this))return this._h._spidergl;}
SpiderGL.WebGL.VertexBuffer.TARGET=WebGLRenderingContext.ARRAY_BUFFER;SpiderGL.WebGL.VertexBuffer.DEFAULT_ATTRIBUTE_INDEX=0;SpiderGL.WebGL.VertexBuffer.DEFAULT_ATTRIBUTE_SIZE=3;SpiderGL.WebGL.VertexBuffer.DEFAULT_ATTRIBUTE_TYPE=WebGLRenderingContext.FLOAT;SpiderGL.WebGL.VertexBuffer.DEFAULT_ATTRIBUTE_NORMALIZED=false;SpiderGL.WebGL.VertexBuffer.DEFAULT_ATTRIBUTE_STRIDE=0;SpiderGL.WebGL.VertexBuffer.DEFAULT_ATTRIBUTE_OFFSET=0;SpiderGL.WebGL.VertexBuffer.DEFAULT_ATTRIBUTE_ENABLE=true;SpiderGL.WebGL.VertexBuffer.unbind=function(gl){gl.bindBuffer(SpiderGL.WebGL.VertexBuffer.TARGET,null);};SpiderGL.WebGL.VertexBuffer.prototype={vertexAttribPointer:function(options){options=SpiderGL.Utility.getDefaultObject({index:SpiderGL.WebGL.VertexBuffer.DEFAULT_ATTRIBUTE_INDEX,size:SpiderGL.WebGL.VertexBuffer.DEFAULT_ATTRIBUTE_SIZE,glType:SpiderGL.WebGL.VertexBuffer.DEFAULT_ATTRIBUTE_TYPE,normalized:SpiderGL.WebGL.VertexBuffer.DEFAULT_ATTRIBUTE_NORMALIZED,stride:SpiderGL.WebGL.VertexBuffer.DEFAULT_ATTRIBUTE_STRIDE,offset:SpiderGL.WebGL.VertexBuffer.DEFAULT_ATTRIBUTE_OFFSET,enable:SpiderGL.WebGL.VertexBuffer.DEFAULT_ATTRIBUTE_ENABLE},options);this._dsa.vertexAttribPointer(this._h,options.index,options.size,options.glType,options.normalized,options.stride,options.offset);if(options.enable){this._gl.enableVertexAttribArray(options.index);}}};SpiderGL.Type.extend(SpiderGL.WebGL.VertexBuffer,SpiderGL.WebGL.Buffer);SpiderGL.WebGL.IndexBuffer=function(gl,options){if(!SpiderGL.WebGL.Context.isHijacked(gl)){return null;}
SpiderGL.WebGL.Buffer.call(this,gl,SpiderGL.WebGL.IndexBuffer.TARGET,options);if(!!this._h&&!!this._h._spidergl&&(this._h._spidergl!=this))return this._h._spidergl;}
SpiderGL.WebGL.IndexBuffer.TARGET=WebGLRenderingContext.ELEMENT_ARRAY_BUFFER;SpiderGL.WebGL.IndexBuffer.DEFAULT_DRAW_ELEMENTS_MODE=WebGLRenderingContext.TRIANGLES;SpiderGL.WebGL.IndexBuffer.DEFAULT_DRAW_ELEMENTS_COUNT=-1;SpiderGL.WebGL.IndexBuffer.DEFAULT_DRAW_ELEMENTS_TYPE=WebGLRenderingContext.UNSIGNED_SHORT;SpiderGL.WebGL.IndexBuffer.DEFAULT_DRAW_ELEMENTS_OFFSET=0;SpiderGL.WebGL.IndexBuffer.unbind=function(gl){gl.bindBuffer(SpiderGL.WebGL.IndexBuffer.TARGET,null);};SpiderGL.WebGL.IndexBuffer.prototype={drawElements:function(options){options=SpiderGL.Utility.getDefaultObject({glMode:SpiderGL.WebGL.IndexBuffer.DEFAULT_DRAW_ELEMENTS_MODE,count:SpiderGL.WebGL.IndexBuffer.DEFAULT_DRAW_ELEMENTS_COUNT,glType:SpiderGL.WebGL.IndexBuffer.DEFAULT_DRAW_ELEMENTS_TYPE,offset:SpiderGL.WebGL.IndexBuffer.DEFAULT_DRAW_ELEMENTS_OFFSET},options);if(options.count<1){var bytesPerElem=SpiderGL.Type.typeSizeFromGL(options.glType);options.count=(this._size-options.offset)/bytesPerElem;}
this._dsa.drawElements(this._h,options.glMode,options.count,options.glType,options.offset);}};SpiderGL.Type.extend(SpiderGL.WebGL.IndexBuffer,SpiderGL.WebGL.Buffer);SpiderGL.WebGL.Framebuffer=function(gl,options){if(!SpiderGL.WebGL.Context.isHijacked(gl)){return null;}
if(SpiderGL.Type.instanceOf(options,WebGLFramebuffer)){options={handle:options};}
options=SpiderGL.Utility.getDefaultObject({handle:null,autoViewport:SpiderGL.WebGL.Framebuffer.DEFAULT_AUTO_VIEWPORT},options);var that=SpiderGL.WebGL.ObjectGL.call(this,gl,SpiderGL.WebGL.Framebuffer.TARGET,options);if(!!this._h&&!!this._h._spidergl&&(this._h._spidergl!=this))return this._h._spidergl;var gl=this._gl;var cb=this._cb;var dsa=this._dsa;var t=this._t;var h=this._h;var imported=false;if(h){imported=true;}
else{h=gl.createFramebuffer();this._h=h;}
h._spidergl=this;this._attachments={};this._status=0;this._autoViewport=options.autoViewport;this._viewport=[0,0,1,1];cb.pushFramebuffer(t);gl.bindFramebuffer(t,h);if(imported){var resource=null;var type=0;var level=0;var target=0;for(var attachment in SpiderGL.WebGL.Framebuffer._attachmentName){resource=gl.getFramebufferAttachmentParameter(t,att,gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME);type=gl.getFramebufferAttachmentParameter(t,att,gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE);switch(type){case gl.RENDERBUFFER:target=gl.RENDERBUFFER;this._importRenderbuffer(t,attachment,target,resource);break;case gl.TEXTURE:level=gl.getFramebufferAttachmentParameter(t,att,gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL);target=gl.getFramebufferAttachmentParameter(t,att,gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE);if(target==0)target=gl.TEXTURE_2D;this._importTexture(t,attachment,target,resource,level);break;default:break;}}}
this._status=gl.checkFramebufferStatus(t);cb.popFramebuffer(t);this.setAttachments(options);}
SpiderGL.WebGL.Framebuffer.TARGET=WebGLRenderingContext.FRAMEBUFFER;SpiderGL.WebGL.Framebuffer.DEFAULT_AUTO_VIEWPORT=true;SpiderGL.WebGL.Framebuffer.DEFAULT_ATTACHMENT_TEXTURE_LEVEL=0;SpiderGL.WebGL.Framebuffer.DEFAULT_ATTACHMENT_CUBE_MAP_FACE=WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_X;SpiderGL.WebGL.Framebuffer.DEFAULT_READ_PIXELS_X=0;SpiderGL.WebGL.Framebuffer.DEFAULT_READ_PIXELS_Y=0;SpiderGL.WebGL.Framebuffer.DEFAULT_READ_PIXELS_WIDTH=-1;SpiderGL.WebGL.Framebuffer.DEFAULT_READ_PIXELS_HEIGHT=-1;SpiderGL.WebGL.Framebuffer.DEFAULT_READ_PIXELS_FORMAT=WebGLRenderingContext.RGBA;SpiderGL.WebGL.Framebuffer.DEFAULT_CLEAR_MASK=(WebGLRenderingContext.COLOR_BUFFER_BIT|WebGLRenderingContext.DEPTH_BUFFER_BIT|WebGLRenderingContext.STENCIL_BUFFER_BIT);SpiderGL.WebGL.Framebuffer.DEFAULT_READ_PIXELS_TYPE=WebGLRenderingContext.UNSIGNED_BYTE;SpiderGL.WebGL.Framebuffer.unbind=function(gl){gl.bindFramebuffer(SpiderGL.WebGL.Framebuffer.TARGET,null);};SpiderGL.WebGL.Framebuffer._attachmentName={};SpiderGL.WebGL.Framebuffer._attachmentName[WebGLRenderingContext.COLOR_ATTACHMENT0]="color";SpiderGL.WebGL.Framebuffer._attachmentName[WebGLRenderingContext.DEPTH_ATTACHMENT]="depth";SpiderGL.WebGL.Framebuffer._attachmentName[WebGLRenderingContext.STENCIL_ATTACHMENT]="stencil";SpiderGL.WebGL.Framebuffer._attachmentName[WebGLRenderingContext.DEPTH_STENCIL_ATTACHMENT]="depthStencil";SpiderGL.WebGL.Framebuffer.prototype={_gl_deleteFramebuffer:function(framebuffer){this._h=null;},_gl_isFramebuffer:function(framebuffer){},_gl_bindFramebuffer:function(target,framebuffer){},_gl_checkFramebufferStatus:function(target){},_gl_getFramebufferAttachmentParameter:function(target,attachment,pname){},_gl_framebufferRenderbuffer:function(target,attachment,renderbuffertarget,renderbuffer){this._importRenderbuffer.apply(this,arguments);this._status=this._gl.checkFramebufferStatus(this._t);},_gl_framebufferTexture2D:function(target,attachment,textarget,texture,level){this._importTexture.apply(this,arguments);this._status=this._gl.checkFramebufferStatus(this._t);},_gl_clear:function(mask){},_gl_readPixels:function(x,y,width,height,format,type,pixels){},_importTexture:function(target,attachment,textarget,texture,level){var name=SpiderGL.WebGL.Framebuffer._attachmentName[attachment];if(!name)return;if(!texture){delete this._attachments[name];return;}
var gl=this._gl;var att={attachment:attachment,resource:null,target:textarget,level:level,face:gl.NONE};this._attachments[name]=att;if(textarget==gl.TEXTURE_2D){att.resource=new SpiderGL.WebGL.Texture2D(gl,{handle:texture});}
else{att.resource=new SpiderGL.WebGL.TextureCubeMap(gl,{handle:texture});att.face=textarget;}
this._viewport=[0,0,SpiderGL.Math.max(att.resource.width,1),SpiderGL.Math.max(att.resource.height,1)];},_importRenderbuffer:function(target,attachment,renderbuffertarget,renderbuffer){var name=SpiderGL.WebGL.Framebuffer._attachmentName[attachment];if(!name)return;if(!renderbuffer){delete this._attachments[name];return;}
var gl=this._gl;var att={attachment:attachment,resource:null,target:renderbuffertarget,level:0,face:gl.NONE};this._attachments[name]=att;att.resource=new SpiderGL.WebGL.Renderbuffer(gl,{handle:renderbuffer});this._viewport=[0,0,SpiderGL.Math.max(att.resource.width,1),SpiderGL.Math.max(att.resource.height,1)];},_setAttachment:function(attachment,nfo){var name=SpiderGL.WebGL.Framebuffer._attachmentName[attachment];if(!name)return false;var gl=this._gl;var isNullResource=(!nfo||(("resource"in nfo)&&!nfo.resource));if(isNullResource){var att=this._attachments[name];if(att){if(att.target===gl.RENDERBUFFER){gl.framebufferRenderbuffer(t,att.attachment,gl.RENDERBUFFER,null);}
else{gl.framebufferTexture2D(t,att.attachment,gl.TEXTURE_2D,null,0);}}
return;}
var resourceType=gl.NONE;if(SpiderGL.Type.instanceOf(nfo,WebGLTexture)){nfo={resource:nfo};resourceType=gl.TEXTURE;}
else if(SpiderGL.Type.instanceOf(nfo,WebGLRenderbuffer)){nfo={resource:nfo};resourceType=gl.RENDERBUFFER;}
else if(SpiderGL.Type.instanceOf(nfo,SpiderGL.WebGL.Texture)){nfo={resource:nfo.handle};resourceType=gl.TEXTURE;}
else if(SpiderGL.Type.instanceOf(nfo,SpiderGL.WebGL.Renderbuffer)){nfo={resource:nfo.handle};resourceType=gl.RENDERBUFFER;}
var cubeFaceSpecified=!!nfo&&(typeof(nfo.face)!="undefined");nfo=SpiderGL.Utility.getDefaultObject({resource:null,level:SpiderGL.WebGL.Framebuffer.DEFAULT_ATTACHMENT_TEXTURE_LEVEL,face:SpiderGL.WebGL.Framebuffer.DEFAULT_ATTACHMENT_CUBE_MAP_FACE},nfo);var t=this._t;switch(resourceType){case gl.TEXTURE:var isCubemap=SpiderGL.Type.instanceOf(nfo,SpiderGL.WebGL.TextureCubeMap)||cubeFaceSpecified;var target=(isCubemap)?(nfo.face):(gl.TEXTURE_2D);gl.framebufferTexture2D(t,attachment,target,nfo.resource,nfo.level);break;case gl.RENDERBUFFER:gl.framebufferRenderbuffer(t,attachment,gl.RENDERBUFFER,nfo.resource);break;default:break;}
return true;},get isReady(){return this.isComplete;},get status(){return this._status;},get isComplete(){return(this._status===this._gl.FRAMEBUFFER_COMPLETE);},get viewport(){return this._viewport.slice();},get width(){return this._viewport[2];},get height(){return this._viewport[3];},get autoViewport(){return this._autoViewport;},set autoViewport(on){this._autoViewport=!!on;},setAttachments:function(attachments){attachments=attachments||{};var gl=this._gl;var cb=this._cb;var t=this._t;var h=this._h;cb.pushFramebuffer(t);gl.bindFramebuffer(t,h);if("color"in attachments){this._setAttachment(gl.COLOR_ATTACHMENT0,attachments.color);}
if("depthStencil"in attachments){this._setAttachment(gl.DEPTH_ATTACHMENT,null);this._setAttachment(gl.STENCIL_ATTACHMENT,null);this._setAttachment(gl.DEPTH_STENCIL_ATTACHMENT,attachments.depthStencil);}
else if("depth"in attachments){this._setAttachment(gl.DEPTH_STENCIL_ATTACHMENT,null);this._setAttachment(gl.STENCIL_ATTACHMENT,null);this._setAttachment(gl.DEPTH_ATTACHMENT,attachments.depth);}
else if("stencil"in attachments){this._setAttachment(gl.DEPTH_STENCIL_ATTACHMENT,null);this._setAttachment(gl.DEPTH_ATTACHMENT,null);this._setAttachment(gl.STENCIL_ATTACHMENT,attachments.stencil);}
this._status=gl.checkFramebufferStatus(t);cb.popFramebuffer(t);return this.isComplete;},getAttachments:function(){var rAtts={};var att=null;for(var a in this._attachments){att=this._attachments[a];rAtts[a]={attachment:att.attachment,resource:att.resource,target:att.target,level:att.level};}
return rAtts;},detachAll:function(){this.setAttachments({color:null,depthStencil:null});},get colorTarget(){var att=this._attachments.color;if(!att)return null
return att.resource;},set colorTarget(rt){this.setAttachments({color:rt});},get depthTarget(){var att=this._attachments.depth;if(!att)return null
return att.resource;},set depthTarget(rt){this.setAttachments({depth:rt});},get stencilTarget(){var att=this._attachments.stencil;if(!att)return null
return att.resource;},set stencilTarget(rt){this.setAttachments({stencil:rt});},get depthStencilTarget(){var att=this._attachments.depthStencil;if(!att)return null
return att.resource;},set depthStencilTarget(rt){this.setAttachments({depthStencil:rt});},clear:function(mask){mask=SpiderGL.Utility.getDefaultValue(mask,SpiderGL.WebGL.Framebuffer.DEFAULT_CLEAR_MASK);this._dsa.clear(this._h,mask);},readPixels:function(buffer,options){options=SpiderGL.Utility.getDefaultObject({x:SpiderGL.WebGL.Framebuffer.DEFAULT_READ_PIXELS_X,y:SpiderGL.WebGL.Framebuffer.DEFAULT_READ_PIXELS_Y,width:SpiderGL.WebGL.Framebuffer.DEFAULT_READ_PIXELS_WIDTH,height:SpiderGL.WebGL.Framebuffer.DEFAULT_READ_PIXELS_HEIGHT,format:SpiderGL.WebGL.Framebuffer.DEFAULT_READ_PIXELS_FORMAT,type:SpiderGL.WebGL.Framebuffer.DEFAULT_READ_PIXELS_TYPE},options);if(options.width<0){options.width=this._viewport[2];}
if(options.height<0){options.height=this._viewport[3];}
this._dsa.readPixels(this._h,options.x,options.y,options.width,options.height,options.format,options.type,buffer);},applyViewport:function(){var gl=this._gl;var vp=this._viewport;gl.viewport(vp[0],vp[1],vp[2],vp[3]);},destroy:function(){this._gl.deleteFramebuffer(this._h);},bind:function(setViewport){var gl=this._gl;gl.bindFramebuffer(this._t,this._h);var svp=SpiderGL.Utility.getDefaultValue(setViewport,this._autoViewport);if(svp){var vp=this._viewport;gl.viewport(vp[0],vp[1],vp[2],vp[3]);}},unbind:function(){this._gl.bindFramebuffer(this._t,null);}};SpiderGL.Type.extend(SpiderGL.WebGL.Framebuffer,SpiderGL.WebGL.ObjectGL);SpiderGL.WebGL.Program=function(gl,options){if(!SpiderGL.WebGL.Context.isHijacked(gl)){return null;}
if(SpiderGL.Type.instanceOf(options,WebGLProgram)){options={handle:options};}
options=SpiderGL.Utility.getDefaultObject({handle:null,autoLink:SpiderGL.WebGL.Program.DEFAULT_AUTO_LINK},options);SpiderGL.WebGL.ObjectGL.call(this,gl,SpiderGL.WebGL.Program.TARGET,options);if(!!this._h&&!!this._h._spidergl&&(this._h._spidergl!=this))return this._h._spidergl;var gl=this._gl;var cb=this._cb;var dsa=this._dsa;var h=this._h;var linked=false;var log="";var imported=false;if(h){imported=true;linked=!!gl.getProgramParameter(h,gl.LINK_STATUS);log=gl.getProgramInfoLog(h);if(!log){log="";}}
else{h=gl.createProgram();this._h=h;}
h._spidergl=this;this._shaders=[];this._linked=linked;this._log=log;this._autoLink=options.autoLink;this._attributes={};this._uniforms={};if(imported){var shaders=gl.getAttachedShaders(h);for(var i=0,n=shaders.length;i<n;++i){this._importShader(shaders[i]);}}
var mustLink=false;if(this._addShaders(options.shaders)){mustLink=true;}
if(this._setAttributes(options.attributes)){mustLink=true;}
if(mustLink&&this._autoLink){this.link();}
else if(imported){this._postLink();}
this.setUniforms(options.uniforms);}
SpiderGL.WebGL.Program.TARGET=WebGLRenderingContext.NONE;SpiderGL.WebGL.Program.DEFAULT_AUTO_LINK=true;SpiderGL.WebGL.Program.unbind=function(gl){gl.useProgram(null);};SpiderGL.WebGL.Program._uniformSetFunctions={};SpiderGL.WebGL.Program._uniformSetFunctions[WebGLRenderingContext.BOOL]=function(dsa,h,v){dsa.uniform1i(h,this.location,v);};SpiderGL.WebGL.Program._uniformSetFunctions[WebGLRenderingContext.BOOL_VEC2]=function(dsa,h,v){dsa.uniform2iv(h,this.location,v);};SpiderGL.WebGL.Program._uniformSetFunctions[WebGLRenderingContext.BOOL_VEC3]=function(dsa,h,v){dsa.uniform3iv(h,this.location,v);};SpiderGL.WebGL.Program._uniformSetFunctions[WebGLRenderingContext.BOOL_VEC4]=function(dsa,h,v){dsa.uniform4iv(h,this.location,v);};SpiderGL.WebGL.Program._uniformSetFunctions[WebGLRenderingContext.INT]=function(dsa,h,v){dsa.uniform1i(h,this.location,v);};SpiderGL.WebGL.Program._uniformSetFunctions[WebGLRenderingContext.INT_VEC2]=function(dsa,h,v){dsa.uniform2iv(h,this.location,v);};SpiderGL.WebGL.Program._uniformSetFunctions[WebGLRenderingContext.INT_VEC3]=function(dsa,h,v){dsa.uniform3iv(h,this.location,v);};SpiderGL.WebGL.Program._uniformSetFunctions[WebGLRenderingContext.INT_VEC4]=function(dsa,h,v){dsa.uniform4iv(h,this.location,v);};SpiderGL.WebGL.Program._uniformSetFunctions[WebGLRenderingContext.FLOAT]=function(dsa,h,v){dsa.uniform1f(h,this.location,v);};SpiderGL.WebGL.Program._uniformSetFunctions[WebGLRenderingContext.FLOAT_VEC2]=function(dsa,h,v){dsa.uniform2fv(h,this.location,v);};SpiderGL.WebGL.Program._uniformSetFunctions[WebGLRenderingContext.FLOAT_VEC3]=function(dsa,h,v){dsa.uniform3fv(h,this.location,v);};SpiderGL.WebGL.Program._uniformSetFunctions[WebGLRenderingContext.FLOAT_VEC4]=function(dsa,h,v){dsa.uniform4fv(h,this.location,v);};SpiderGL.WebGL.Program._uniformSetFunctions[WebGLRenderingContext.FLOAT_MAT2]=function(dsa,h,v){dsa.uniformMatrix2fv(h,this.location,false,v);};SpiderGL.WebGL.Program._uniformSetFunctions[WebGLRenderingContext.FLOAT_MAT3]=function(dsa,h,v){dsa.uniformMatrix3fv(h,this.location,false,v);};SpiderGL.WebGL.Program._uniformSetFunctions[WebGLRenderingContext.FLOAT_MAT4]=function(dsa,h,v){dsa.uniformMatrix4fv(h,this.location,false,v);};SpiderGL.WebGL.Program._uniformSetFunctions[WebGLRenderingContext.SAMPLER_2D]=function(dsa,h,v){dsa.uniform1i(h,this.location,v);};SpiderGL.WebGL.Program._uniformSetFunctions[WebGLRenderingContext.SAMPLER_CUBE]=function(dsa,h,v){dsa.uniform1i(h,this.location,v);};SpiderGL.WebGL.Program.prototype={_gl_deleteProgram:function(program){this._h=null;},_gl_isProgram:function(program){},_gl_useProgram:function(program){},_gl_getActiveAttrib:function(program,index){},_gl_getActiveUniform:function(program,index){},_gl_getAttachedShaders:function(program){},_gl_getAttribLocation:function(program,name){},_gl_getProgramParameter:function(program,pname){},_gl_getProgramInfoLog:function(program){},_gl_getUniform:function(program,location){},_gl_getUniformLocation:function(program,name){},_gl_attachShader:function(program,shader){this._importShader(shader);},_gl_bindAttribLocation:function(program,index,name){},_gl_detachShader:function(program,shader){if(!shader){return;}
var idx=this._shaderHandleIndex(shader);if(idx<0){return;}
this._shaders.splice(idx,1);},_gl_linkProgram:function(program){this._postLink();},_gl_uniform1f:function(location,x){},_gl_uniform1fv:function(location,v){},_gl_uniform1i:function(location,x){},_gl_uniform1iv:function(location,v){},_gl_uniform2f:function(location,x,y){},_gl_uniform2fv:function(location,v){},_gl_uniform2i:function(location,x,y){},_gl_uniform2iv:function(location,v){},_gl_uniform3f:function(location,x,y,z){},_gl_uniform3fv:function(location,v){},_gl_uniform3i:function(location,x,y,z){},_gl_uniform3iv:function(location,v){},_gl_uniform4f:function(location,x,y,z,w){},_gl_uniform4fv:function(location,v){},_gl_uniform4i:function(location,x,y,z,w){},_gl_uniform4iv:function(location,v){},_gl_uniformMatrix2fv:function(location,transpose,value){},_gl_uniformMatrix3fv:function(location,transpose,value){},_gl_uniformMatrix4fv:function(location,transpose,value){},_gl_validateProgram:function(program){},_shaderHandleIndex:function(shader){for(var i=0,n=this._shaders.length;i<n;++i){if(this._shaders[i].handle===shader){return i;}}
return-1;},_shaderIndex:function(shader){if(this._shaders.indexOf){return this._shaders.indexOf(shader);}
else{for(var i=0,n=this._shaders.length;i<n;++i){if(this._shaders[i]===shader){return i;}}
return-1;}},_importShader:function(shader){if(!shader){return;}
if(this._shaderHandleIndex(shader)>=0){return;}
var gl=this._gl;var shd=shader._spidergl;if(!shd){var type=gl.getShaderParameter(shader,gl.SHADER_TYPE);switch(type){case gl.VERTEX_SHADER:shd=new SpiderGL.WebGL.VertexShader(gl,{handle:shader});break;case gl.FRAGMENT_SHADER:shd=new SpiderGL.WebGL.FragmentShader(gl,{handle:shader});break;default:return;break;}}
this._shaders.push(shd);},_updateActiveInfo:function(){var gl=this._gl;var h=this._h;var n=0;var nfo=null;var name=null;var loc=null;var attributes={};n=gl.getProgramParameter(h,gl.ACTIVE_ATTRIBUTES);for(var i=0;i<n;++i){nfo=gl.getActiveAttrib(h,i);name=nfo.name;loc=gl.getAttribLocation(h,name);attributes[name]={index:i,name:name,size:nfo.size,type:nfo.type,location:loc};}
var uniforms={};n=gl.getProgramParameter(h,gl.ACTIVE_UNIFORMS);for(var i=0;i<n;++i){nfo=gl.getActiveUniform(h,i);name=nfo.name;loc=gl.getUniformLocation(h,name);uniforms[name]={index:i,name:name,size:nfo.size,type:nfo.type,location:loc,setValue:SpiderGL.WebGL.Program._uniformSetFunctions[nfo.type]};if(nfo.size>1){var subs=name.lastIndexOf("[0]");if(subs==(name.length-3)){var arrayName=name.slice(0,subs);for(var j=1;j<nfo.size;++j){var subName=arrayName+"["+j+"]";loc=gl.getUniformLocation(h,subName);uniforms[subName]={index:i,name:subName,size:nfo.size,type:nfo.type,location:loc,setValue:SpiderGL.WebGL.Program._uniformSetFunctions[nfo.type]};}}}}
this._attributes=attributes;this._uniforms=uniforms;},_postLink:function(){var gl=this._gl;var h=this._h;this._linked=!!gl.getProgramParameter(h,gl.LINK_STATUS);this._log=gl.getProgramInfoLog(h);if(!this._log){this._log="";}
this._updateActiveInfo();},_addShaders:function(shaders){if(!shaders){return false;}
var gl=this._gl;var h=this._h;var shd=null;var hshd=null;for(var i=0,n=shaders.length;i<n;++i){shd=shaders[i];hshd=null;if(SpiderGL.Type.instanceOf(shd,SpiderGL.WebGL.Shader)){hshd=shd.handle;}
if(SpiderGL.Type.instanceOf(shd,WebGLShader)){hshd=shd;}
if(hshd){gl.attachShader(h,hshd);}}
return true;},_removeShaders:function(shaders){if(!shaders){return false;}
var gl=this._gl;var h=this._h;var shd=null;var hshd=null;for(var i=0,n=shaders.length;i<n;++i){shd=shaders[i];hshd=null;if(SpiderGL.Type.instanceOf(shd,SpiderGL.WebGL.Shader)){hshd=shd.handle;}
if(SpiderGL.Type.instanceOf(shd,SpiderGL.WebGL.Shader)){hshd=shd;}
if(hshd){gl.detachShader(h,hshd);}}
return true;},_setAttributes:function(attributes){if(!attributes){return false;}
var gl=this._gl;var h=this._h;for(var a in attributes){gl.bindAttribLocation(h,attributes[a],a);}
return true;},get isReady(){return this.isLinked;},get isLinked(){return this._linked;},get log(){return this._log;},get autoLink(){return this._autoLink;},set autoLink(on){this._autoLink=!!on;},addShaders:function(shaders,link){var mustLink=this._addShaders(shaders);if(!mustLink){return true;};mustLink=SpiderGL.Utility.getDefaultValue(link,this._autoLink);if(!mustLink){return true;}
return this.link()},removeShaders:function(shaders,link){var mustLink=this._removeShaders(shaders);if(!mustLink){return true;};mustLink=SpiderGL.Utility.getDefaultValue(link,this._autoLink);if(!mustLink){return true;}
return this.link()},hasShader:function(shader){return(this._shaderIndex(shader)>=0);},getShaders:function(){return this._shaders.slice();},link:function(){this._gl.linkProgram(this._h);return this._linked;},validate:function(){var gl=this._gl;var h=this._h;gl.validateProgram(h);var validated=!!gl.getProgramParameter(h,gl.VALIDATE_STATUS);return validated;},setAttributes:function(attributes){if(!this._setAttributes(attributes))return false;if(this._autoLink)return this.link();return true;},getAttributesNames:function(){var attributes=this._attributes;var rAttributes=[];for(var a in attributes){rAttributes.push(attributes[a].name);}
return rAttributes;},getAttributesIndices:function(){var attributes=this._attributes;var rAttributes={};for(var a in attributes){rAttributes[a]=attributes[a].location;}
return rAttributes;},getAttributesInfo:function(){var attributes=this._attributes;var attribute=null;var rAttributes={};for(var a in attributes){attribute=attributes[a];rAttributes[a]={index:attribute.index,name:attribute.name,size:attribute.size,type:attribute.type,location:attribute.location};}
return rAttributes;},setUniforms:function(uniforms){if(!uniforms){return false;}
var gl=this._gl;var cb=this._cb;var dsa=this._dsa;var h=this._h;cb.pushProgram();gl.useProgram(h);var _uniforms=this._uniforms;var uniform=null;var value=null;for(var u in uniforms){uniform=_uniforms[u];if(uniform){uniform.setValue(dsa,h,uniforms[u]);}}
cb.popProgram();return true;},getUniformsNames:function(){var uniforms=this._uniforms;var rUniforms=[];for(var u in uniforms){rUniforms.push(uniforms[u].name);}
return rUniforms;},getUniformsValues:function(){var gl=this._gl;var h=this._h;var uniforms=this._uniforms;var rUniforms={};for(var u in uniforms){rUniforms[u]=gl.getUniform(h,uniforms[u].location);}
return rUniforms;},getUniformsInfo:function(){var uniforms=this._uniforms;var uniform=null;var value=null;var rUniforms={};for(var u in uniforms){uniform=uniforms[u];rUniforms[u]={index:uniform.index,name:uniform.name,size:uniform.size,type:uniform.type,location:uniform.location};}
return rUniforms;},destroy:function(){this._gl.deleteProgram(this._h);},bind:function(){this._gl.useProgram(this._h);},unbind:function(){this._gl.useProgram(null);}};SpiderGL.Type.extend(SpiderGL.WebGL.Program,SpiderGL.WebGL.ObjectGL);SpiderGL.WebGL.Renderbuffer=function(gl,options){if(!SpiderGL.WebGL.Context.isHijacked(gl)){return null;}
if(SpiderGL.Type.instanceOf(h,WebGLRenderbuffer)){options={handle:options};}
options=SpiderGL.Utility.getDefaultObject({handle:null,},options);SpiderGL.WebGL.ObjectGL.call(this,gl,SpiderGL.WebGL.Renderbuffer.TARGET,options);if(!!this._h&&!!this._h._spidergl&&(this._h._spidergl!=this))return this._h._spidergl;var gl=this._gl;var cb=this._cb;var dsa=this._dsa;var t=this._t;var h=this._h;var format=gl.NONE;var width=0;var height=0;if(h){cb.pushRenderbuffer(t);gl.bindRenderbuffer(t,h);format=gl.getRenderbufferParameter(t,gl.RENDERBUFFER_INTERNAL_FORMAT);width=gl.getRenderbufferParameter(t,gl.RENDERBUFFER_WIDTH);height=gl.getRenderbufferParameter(t,gl.RENDERBUFFER_HEIGHT);cb.popRenderbuffer(t);}
else{h=gl.createRenderbuffer();this._h=h;}
h._spidergl=this;this._width=width;this._height=height;this._format=format;if(SpiderGL.Type.isNumber(options.internalFormat)&&SpiderGL.Type.isNumber(options.width)&&SpiderGL.Type.isNumber(options.height)){this.setStorage(options.internalFormat,options.width,options.height,options.format);}}
SpiderGL.WebGL.Renderbuffer.TARGET=WebGLRenderingContext.RENDERBUFFER;SpiderGL.WebGL.Renderbuffer.unbind=function(gl){gl.bindRenderbuffer(SpiderGL.WebGL.Renderbuffer.TARGET,null);};SpiderGL.WebGL.Renderbuffer.prototype={_gl_deleteRenderbuffer:function(renderbuffer){this._h=null;},_gl_isRenderbuffer:function(renderbuffer){},_gl_bindRenderbuffer:function(target,renderbuffer){},_gl_getRenderbufferParameter:function(target,pname){},_gl_renderbufferStorage:function(target,internalformat,width,height){this._format=internalformat;this._width=width;this._height=height;},get isReady(){return((this._width>0)&&(this._height>0));},get format(){return this._format;},get width(){return this._width;},get height(){return this._height;},setStorage:function(internalFormat,width,height){this._dsa.renderbufferStorage(this._h,this._t,internalFormat,width,height);},destroy:function(){this._gl.deleteRenderbuffer(this._h);},bind:function(){this._gl.bindRenderbuffer(this._t,this._h);},unbind:function(){this._gl.bindRenderbuffer(this._t,null);}};SpiderGL.Type.extend(SpiderGL.WebGL.Renderbuffer,SpiderGL.WebGL.ObjectGL);SpiderGL.WebGL.Shader=function(gl,target,type,options){if(!SpiderGL.WebGL.Context.isHijacked(gl)){return null;}
if(SpiderGL.Type.instanceOf(options,WebGLShader)){options={handle:options};}
else if(SpiderGL.Type.isString(options)){options={source:options};}
options=SpiderGL.Utility.getDefaultObject({handle:null,source:null,autoCompile:SpiderGL.WebGL.Shader.DEFAULT_AUTO_COMPILE},options);SpiderGL.WebGL.ObjectGL.call(this,gl,target,options);if(!!this._h&&!!this._h._spidergl&&(this._h._spidergl!=this))return this._h._spidergl;var gl=this._gl;var cb=this._cb;var dsa=this._dsa;var source="";var compiled=false;var deleted=false;var log="";var h=this._h;if(h){source=gl.getShaderSource(h);if(!source){source="";}
compiled=!!gl.getShaderParameter(h,gl.COMPILE_STATUS);deleted=!!gl.getShaderParameter(h,gl.DELETE_STATUS);log=gl.getShaderInfoLog(h);if(!log){log="";}}
else{h=gl.createShader(type);this._h=h;}
h._spidergl=this;this._source=source;this._compiled=compiled;this._log=log;this._autoCompile=options.autoCompile;if(options.source){this.setSource(options.source);}}
SpiderGL.WebGL.Shader.TARGET=WebGLRenderingContext.NONE;SpiderGL.WebGL.Shader.DEFAULT_AUTO_COMPILE=true;SpiderGL.WebGL.Shader.unbind=function(gl){};SpiderGL.WebGL.Shader.prototype={_gl_deleteShader:function(shader){this._h=null;},_gl_isShader:function(shader){},_gl_getShaderParameter:function(shader,pname){},_gl_getShaderInfoLog:function(shader){},_gl_getShaderSource:function(shader){},_gl_compileShader:function(shader){this._postCompile();},_gl_shaderSource:function(shader,source){this._source=source;if(!this._source){this._source="";}},_postCompile:function(){var gl=this._gl;var h=this._h;this._compiled=!!gl.getShaderParameter(h,gl.COMPILE_STATUS);this._log=gl.getShaderInfoLog(h);if(!this._log){this._log="";}},get isReady(){return this.isCompiled;},get isCompiled(){return this._compiled;},get log(){return this._log;},get autoCompile(){return this._autoCompile;},set autoCompile(on){this._autoCompile=!!on;},setSource:function(src,compile){var gl=this._gl;var h=this._h;gl.shaderSource(h,src);var c=SpiderGL.Utility.getDefaultValue(compile,this._autoCompile);if(!c){true;}
return this.compile();},get source(){return this._source;},set source(src){this.setSource(src);},compile:function(){this._gl.compileShader(this._h);return this._compiled;},destroy:function(){this._gl.deleteShader(this._h);},bind:function(){},unbind:function(){}};SpiderGL.Type.extend(SpiderGL.WebGL.Shader,SpiderGL.WebGL.ObjectGL);SpiderGL.WebGL.VertexShader=function(gl,options){if(!SpiderGL.WebGL.Context.isHijacked(gl)){return null;}
SpiderGL.WebGL.Shader.call(this,gl,SpiderGL.WebGL.VertexShader.TARGET,gl.VERTEX_SHADER,options);if(!!this._h&&!!this._h._spidergl&&(this._h._spidergl!=this))return this._h._spidergl;}
SpiderGL.WebGL.VertexShader.TARGET=WebGLRenderingContext.NONE;SpiderGL.WebGL.VertexShader.unbind=function(gl){};SpiderGL.WebGL.VertexShader.prototype={};SpiderGL.Type.extend(SpiderGL.WebGL.VertexShader,SpiderGL.WebGL.Shader);SpiderGL.WebGL.FragmentShader=function(gl,options){if(!SpiderGL.WebGL.Context.isHijacked(gl)){return null;}
SpiderGL.WebGL.Shader.call(this,gl,SpiderGL.WebGL.FragmentShader.TARGET,gl.FRAGMENT_SHADER,options);if(!!this._h&&!!this._h._spidergl&&(this._h._spidergl!=this))return this._h._spidergl;}
SpiderGL.WebGL.FragmentShader.TARGET=WebGLRenderingContext.NONE;SpiderGL.WebGL.FragmentShader.unbind=function(gl){};SpiderGL.WebGL.FragmentShader.prototype={};SpiderGL.Type.extend(SpiderGL.WebGL.FragmentShader,SpiderGL.WebGL.Shader);SpiderGL.WebGL.Texture=function(gl,target,options){if(!SpiderGL.WebGL.Context.isHijacked(gl)){return null;}
if(SpiderGL.Type.instanceOf(options,WebGLTexture)){options={handle:options};}
else if(SpiderGL.Type.isString(options)){options={url:options};}
options=SpiderGL.Utility.getDefaultObject({handle:null,magFilter:SpiderGL.WebGL.Texture.DEFAULT_MAG_FILTER,minFilter:SpiderGL.WebGL.Texture.DEFAULT_MIN_FILTER,wrapS:SpiderGL.WebGL.Texture.DEFAULT_WRAP_S,wrapT:SpiderGL.WebGL.Texture.DEFAULT_WRAP_T,flipYPolicy:SpiderGL.WebGL.Context.DEFAULT_UNPACK_FLIP_Y,premultiplyAlphaPolicy:SpiderGL.WebGL.Context.DEFAULT_UNPACK_PREMULTIPLY_ALPHA,colorspaceConversionPolicy:SpiderGL.WebGL.Context.DEFAULT_UNPACK_COLORSPACE_CONVERSION,autoMipmap:SpiderGL.WebGL.Texture.DEFAULT_AUTO_GENERATE_MIPMAP,format:gl.NONE,width:0,height:0},options);SpiderGL.WebGL.ObjectGL.call(this,gl,target,options);if(!!this._h&&!!this._h._spidergl&&(this._h._spidergl!=this))return this._h._spidergl;var gl=this._gl;var cb=this._cb;var dsa=this._dsa;var t=this._t;var h=this._h;if(!h){h=gl.createTexture();this._h=h;}
cb.pushTexture(t);gl.bindTexture(t,h);this._magFilter=gl.getTexParameter(t,gl.TEXTURE_MAG_FILTER);this._minFilter=gl.getTexParameter(t,gl.TEXTURE_MIN_FILTER);this._wrapS=gl.getTexParameter(t,gl.TEXTURE_WRAP_S);this._wrapT=gl.getTexParameter(t,gl.TEXTURE_WRAP_T);cb.popTexture(t);h._spidergl=this;this._format=options.format;this._width=options.width;this._height=options.height;this._flipY=options.flipYPolicy;this._premultiplyAlpha=options.premultiplyAlphaPolicy;this._colorspaceConversion=options.colorspaceConversionPolicy;this._autoMipmap=options.autoMipmap;this._missingFaces=SpiderGL.WebGL.Texture._FACE_ALL_BITS;this.setSampler(options);}
SpiderGL.WebGL.Texture.TARGET=WebGLRenderingContext.NONE;SpiderGL.WebGL.Texture.DEFAULT_BORDER=0;SpiderGL.WebGL.Texture.DEFAULT_FORMAT=WebGLRenderingContext.RGBA;SpiderGL.WebGL.Texture.DEFAULT_AUTO_GENERATE_MIPMAP=false;SpiderGL.WebGL.Texture.DEFAULT_INTERNAL_FORMAT=WebGLRenderingContext.RGBA;SpiderGL.WebGL.Texture.DEFAULT_LEVEL=0;SpiderGL.WebGL.Texture.DEFAULT_MAG_FILTER=WebGLRenderingContext.LINEAR;SpiderGL.WebGL.Texture.DEFAULT_MIN_FILTER=WebGLRenderingContext.LINEAR;SpiderGL.WebGL.Texture.DEFAULT_TYPE=WebGLRenderingContext.UNSIGNED_BYTE;SpiderGL.WebGL.Texture.DEFAULT_WRAP_S=WebGLRenderingContext.REPEAT;SpiderGL.WebGL.Texture.DEFAULT_WRAP_T=WebGLRenderingContext.REPEAT;SpiderGL.WebGL.Texture.DEFAULT_X_OFFSET=0;SpiderGL.WebGL.Texture.DEFAULT_Y_OFFSET=0;SpiderGL.WebGL.Texture.DEFAULT_UNPACK_FLIP_Y=true;SpiderGL.WebGL.Texture.DEFAULT_UNPACK_PREMULTIPLY_ALPHA=false;SpiderGL.WebGL.Texture.DEFAULT_UNPACK_COLORSPACE_CONVERSION=WebGLRenderingContext.NONE;SpiderGL.WebGL.Texture.unbind=function(gl){};SpiderGL.WebGL.Texture._FACE_POSITIVE_X_BIT=(1<<0);SpiderGL.WebGL.Texture._FACE_NEGATIVE_X_BIT=(1<<1);SpiderGL.WebGL.Texture._FACE_POSITIVE_Y_BIT=(1<<2);SpiderGL.WebGL.Texture._FACE_NEGATIVE_Y_BIT=(1<<3);SpiderGL.WebGL.Texture._FACE_POSITIVE_Z_BIT=(1<<4);SpiderGL.WebGL.Texture._FACE_NEGATIVE_Z_BIT=(1<<5);SpiderGL.WebGL.Texture._FACE_ALL_BITS=(SpiderGL.WebGL.Texture._FACE_POSITIVE_X_BIT|SpiderGL.WebGL.Texture._FACE_NEGATIVE_X_BIT|SpiderGL.WebGL.Texture._FACE_POSITIVE_Y_BIT|SpiderGL.WebGL.Texture._FACE_NEGATIVE_Y_BIT|SpiderGL.WebGL.Texture._FACE_POSITIVE_Z_BIT|SpiderGL.WebGL.Texture._FACE_NEGATIVE_Z_BIT);SpiderGL.WebGL.Texture._faceBits={};SpiderGL.WebGL.Texture._faceBits[WebGLRenderingContext.TEXTURE_2D]=SpiderGL.WebGL.Texture._FACE_ALL_BITS;SpiderGL.WebGL.Texture._faceBits[WebGLRenderingContext.TEXTURE_CUBE_MAP]=SpiderGL.WebGL.Texture._FACE_ALL_BITS;SpiderGL.WebGL.Texture._faceBits[WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_X]=SpiderGL.WebGL.Texture._FACE_POSITIVE_X_BIT;SpiderGL.WebGL.Texture._faceBits[WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_X]=SpiderGL.WebGL.Texture._FACE_NEGATIVE_X_BIT;SpiderGL.WebGL.Texture._faceBits[WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Y]=SpiderGL.WebGL.Texture._FACE_POSITIVE_Y_BIT;SpiderGL.WebGL.Texture._faceBits[WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Y]=SpiderGL.WebGL.Texture._FACE_NEGATIVE_Y_BIT;SpiderGL.WebGL.Texture._faceBits[WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Z]=SpiderGL.WebGL.Texture._FACE_POSITIVE_Z_BIT;SpiderGL.WebGL.Texture._faceBits[WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Z]=SpiderGL.WebGL.Texture._FACE_NEGATIVE_Z_BIT;SpiderGL.WebGL.Texture.prototype={_gl_deleteTexture:function(texture){this._h=null;},_gl_isTexture:function(texture){},_gl_bindTexture:function(target,texture){},_gl_getTexParameter:function(target,pname){},_gl_copyTexImage2D:function(target,level,internalformat,x,y,width,height,border){if(level==0){this._format=internalformat;this._width=width;this._height=height;}},_gl_copyTexSubImage2D:function(target,level,xoffset,yoffset,x,y,width,height,border){},_gl_generateMipmap:function(target){},_gl_texImage2D:function(target){var n=arguments.length;if(n===6){if(arguments[1]===0){this._format=arguments[2];this._width=arguments[5].width;this._height=arguments[5].height;}}
else if(n===9){if(arguments[1]===0){this._format=arguments[2];this._width=arguments[3];this._height=arguments[4];}}},_gl_texParameterf:function(target,pname,param){this._setTexParameter(pname,param);},_gl_texParameteri:function(target,pname,param){this._setTexParameter(pname,param);},_gl_texSubImage2D:function(target){},_setTexParameter:function(pname,param){var gl=this._gl;switch(pname){case gl.TEXTURE_MAG_FILTER:this._magFilter=param;break;case gl.TEXTURE_MIN_FILTER:this._minFilter=param;break;case gl.TEXTURE_WRAP_S:this._wrapS=param;break;case gl.TEXTURE_WRAP_T:this._wrapT=param;break;default:break;}},_setImageData:function(fullImage,target,options){options=SpiderGL.Utility.getDefaultObject({internalFormat:SpiderGL.WebGL.Texture.DEFAULT_INTERNAL_FORMAT,border:SpiderGL.WebGL.Texture.DEFAULT_BORDER,xoffset:SpiderGL.WebGL.Texture.DEFAULT_X_OFFSET,yoffset:SpiderGL.WebGL.Texture.DEFAULT_Y_OFFSET,level:SpiderGL.WebGL.Texture.DEFAULT_LEVEL,format:SpiderGL.WebGL.Texture.DEFAULT_FORMAT,type:SpiderGL.WebGL.Texture.DEFAULT_TYPE,width:0,height:0,generateMipmap:this._autoMipmap,flipY:this._flipY,premultiplyAlpha:this._premultiplyAlpha,colorspaceConversion:this._colorspaceConversion,data:null,url:null,onCancel:null,onError:null,onProgress:null,onSuccess:null},options);var isURL=!!options.url;var isData=false;if(!isURL){isData=(!options.data||SpiderGL.Type.isTypedArray(options.data));}
var isElement=false;if(!isURL&&!isData){isElement=(SpiderGL.Type.instanceOf(options.data,HTMLImageElement)||SpiderGL.Type.instanceOf(options.data,HTMLCanvasElement)||SpiderGL.Type.instanceOf(options.data,HTMLVideoElement));if(!isElement){if(typeof ImageData!="undefined"){isElement=SpiderGL.Type.instanceOf(options.data,ImageData);}}}
var gl=this._gl;var cb=this._cb;var dsa=this._dsa;var t=target;var h=this._h;var userFlipY=-1;var flipY=-1;var userPremultiplyAlpha=-1;var premultiplyAlpha=-1;var userColorspaceConversion=-1;var colorspaceConversion=-1;if(isData||isElement){userFlipY=options.flipY;if(userFlipY!=SpiderGL.Core.DONT_CARE){flipY=gl.getParameter(gl.UNPACK_FLIP_Y_WEBGL);if(userFlipY==flipY){flipY=-1;}
else{gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,userFlipY);}}
userPremultiplyAlpha=options.premultiplyAlpha;if(userPremultiplyAlpha!=SpiderGL.Core.DONT_CARE){premultiplyAlpha=gl.getParameter(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL);if(userPremultiplyAlpha==premultiplyAlpha){premultiplyAlpha=-1;}
else{gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,userPremultiplyAlpha);}}
userColorspaceConversion=options.colorspaceConversion;if(userColorspaceConversion!=SpiderGL.Core.DONT_CARE){colorspaceConversion=gl.getParameter(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL);if(userColorspaceConversion==colorspaceConversion){colorspaceConversion=-1;}
else{gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL,userColorspaceConversion);}}}
var imageUpdated=false;if(isURL){var opts={internalFormat:options.internalFormat,border:options.border,xoffset:options.xoffset,yoffset:options.yoffset,level:options.level,format:options.format,type:options.type,generateMipmap:options.generateMipmap,flipY:options.flipY,premultiplyAlpha:options.premultiplyAlpha,colorspaceConversion:options.colorspaceConversion,data:null};var that=this;var onSuccess=options.onSuccess;var req=new SpiderGL.IO.ImageRequest(options.url,{onCancel:options.onCancel,onError:options.onError,onProgress:options.onProgress,onSuccess:function(){opts.data=req.image;if(fullImage){that._setImage(target,opts);}
else{that._setSubImage(target,opts);}
if(onSuccess){onSuccess();}},send:true});return true;}
else if(isData){if((options.width<=0)||(options.height<=0)){return false;}
if(fullImage){dsa.texImage2D(h,t,options.level,options.internalFormat,options.width,options.height,options.border,options.format,options.type,options.data);imageUpdated=true;}
else{dsa.texSubImage2D(h,t,options.level,options.xoffset,options.yoffset,options.width,options.height,options.format,options.type,options.data);}}
else if(isElement){if(fullImage){dsa.texImage2D(h,t,options.level,options.internalFormat,options.format,options.type,options.data);imageUpdated=true;}
else{dsa.texSubImage2D(h,t,options.level,options.xoffset,options.yoffset,options.format,options.type,options.data);}}
else{return false;}
if(imageUpdated){this._missingFaces&=~(SpiderGL.WebGL.Texture._faceBits[t]);}
if(isData||isElement){if(flipY!=-1){gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,flipY);}
if(premultiplyAlpha!=-1){gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,premultiplyAlpha);}
if(colorspaceConversion!=-1){gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL,colorspaceConversion);}}
if(options.generateMipmap){this.generateMipmap();}
return true;},_setImage:function(target,options){return this._setImageData(true,target,options);},_setSubImage:function(target,options){return this._setImageData(false,target,options);},get isReady(){return((this._missingFaces==0)&&(this._width>0)&&(this._height>0));},get flipYPolicy(){return this._flipY;},set flipYPolicy(x){this._flipY=SpiderGL.Utility.getDefaultValue(x,SpiderGL.WebGL.Context.DEFAULT_UNPACK_FLIP_Y);},get premultuplyAlphaPolicy(){return this._premultuplyAlpha;},set premultuplyAlphaPolicy(x){this._premultuplyAlpha=SpiderGL.Utility.getDefaultValue(x,SpiderGL.WebGL.Context.DEFAULT_UNPACK_PREMULTIPLY_ALPHA);},get colorspaceConversionPolicy(){return this._colorspaceConversion;},set colorspaceConversionPolicy(x){this._colorspaceConversion=SpiderGL.Utility.getDefaultValue(x,SpiderGL.WebGL.Context.DEFAULT_UNPACK_COLORSPACE_CONVERSION);},get autoMipmap(){return this._autoMipmap;},set autoMipmap(on){this._autoMipmap=on;},get format(){return this._format;},get width(){return this._width;},get height(){return this._height;},get magFilter(){return this._magFilter;},set magFilter(f){f=SpiderGL.Utility.getDefaultValue(w,SpiderGL.WebGL.Texture.DEFAULT_MAG_FILTER);this._dsa.texParameteri(this._h,this._t,gl.TEXTURE_MAG_FILTER,f);},get minFilter(){return this._minFilter;},set minFilter(f){f=SpiderGL.Utility.getDefaultValue(w,SpiderGL.WebGL.Texture.DEFAULT_MIN_FILTER);this._dsa.texParameteri(this._h,this._t,gl.TEXTURE_MIN_FILTER,f);},get wrapS(){return this._wrapS;},set wrapS(w){w=SpiderGL.Utility.getDefaultValue(w,SpiderGL.WebGL.Texture.DEFAULT_WRAP_S);this._dsa.texParameteri(this._h,this._t,gl.TEXTURE_WRAP_S,w);},get wrapT(){return this._wrapT;},set wrapT(w){w=SpiderGL.Utility.getDefaultValue(w,SpiderGL.WebGL.Texture.DEFAULT_WRAP_T);this._dsa.texParameteri(this._h,this._t,gl.TEXTURE_WRAP_T,w);},setSampler:function(sampler){if(!sampler)return false;var gl=this._gl;var cb=this._cb;var dsa=this._dsa;var t=this._t;var h=this._h;cb.pushTexture(t);gl.bindTexture(t,h);var p=0;if("magFilter"in sampler){p=SpiderGL.Utility.getDefaultValue(sampler.magFilter,SpiderGL.WebGL.Texture.DEFAULT_MAG_FILTER);gl.texParameteri(t,gl.TEXTURE_MAG_FILTER,p);}
if("minFilter"in sampler){p=SpiderGL.Utility.getDefaultValue(sampler.minFilter,SpiderGL.WebGL.Texture.DEFAULT_MIN_FILTER);gl.texParameteri(t,gl.TEXTURE_MIN_FILTER,p);}
if("wrapS"in sampler){p=SpiderGL.Utility.getDefaultValue(sampler.wrapS,SpiderGL.WebGL.Texture.DEFAULT_WRAP_S);gl.texParameteri(t,gl.TEXTURE_WRAP_S,p);}
if("wrapT"in sampler){p=SpiderGL.Utility.getDefaultValue(sampler.wrapT,SpiderGL.WebGL.Texture.DEFAULT_WRAP_T);gl.texParameteri(t,gl.TEXTURE_WRAP_T,p);}
cb.popTexture(t);return true;},getSampler:function(){return{magFilter:this._magFilter,minFilter:this._minFilter,wrapS:this._wrapS,wrapT:this._wrapT};},generateMipmap:function(){if(this._missingFaces!=0)return;this._dsa.generateMipmap(this._h,this._t);},destroy:function(){this._gl.deleteTexture(this._h);},bind:function(unit){var gl=this._gl;var cb=this._cb;var dsa=this._dsa;if(typeof unit=="undefined"){gl.bindTexture(this._t,this._h);}
else{dsa.bindTexture(gl.TEXTURE0+unit,this._t,this._h);}},unbind:function(unit){var gl=this._gl;var cb=this._cb;var dsa=this._dsa;if(typeof unit=="undefined"){gl.bindTexture(this._t,null);}
else{dsa.bindTexture(gl.TEXTURE0+unit,this._t,null);}}};SpiderGL.Type.extend(SpiderGL.WebGL.Texture,SpiderGL.WebGL.ObjectGL);SpiderGL.WebGL.Texture2D=function(gl,options){if(!SpiderGL.WebGL.Context.isHijacked(gl)){return null;}
SpiderGL.WebGL.Texture.call(this,gl,SpiderGL.WebGL.Texture2D.TARGET,options);if(!!this._h&&!!this._h._spidergl&&(this._h._spidergl!=this))return this._h._spidergl;options=options||{};if(SpiderGL.Type.instanceOf(options,WebGLTexture)){options={handle:options};}
else if(SpiderGL.Type.isString(options)){options={url:options};}
if(("url"in options)||("data"in options)||(("width"in options)&&("height"in options))){this.setImage(options);}}
SpiderGL.WebGL.Texture2D.TARGET=WebGLRenderingContext.TEXTURE_2D;SpiderGL.WebGL.Texture2D.unbind=function(gl,unit){var cb=gl.getExtension("SGL_current_binding");var dsa=gl.getExtension("SGL_direct_state_access");if(typeof unit=="undefined"){gl.bindTexture(SpiderGL.WebGL.Texture2D.TARGET,null);}
else{dsa.bindTexture(gl.TEXTURE0+unit,SpiderGL.WebGL.Texture2D.TARGET,null);}};SpiderGL.WebGL.Texture2D.prototype={setImage:function(options){return this._setImage(this._t,options);},setSubImage:function(options){return this._setSubImage(this._t,options);}};SpiderGL.Type.extend(SpiderGL.WebGL.Texture2D,SpiderGL.WebGL.Texture);SpiderGL.WebGL.TextureCubeMap=function(gl,options){if(!SpiderGL.WebGL.Context.isHijacked(gl)){return null;}
SpiderGL.WebGL.Texture.call(this,gl,SpiderGL.WebGL.TextureCubeMap.TARGET,options);if(!!this._h&&!!this._h._spidergl&&(this._h._spidergl!=this))return this._h._spidergl;options=options||{};if(SpiderGL.Type.instanceOf(options,WebGLTexture)){options={handle:options};}
else if(SpiderGL.Type.isString(options)){options={url:options};}
var faceTargets=SpiderGL.WebGL.TextureCubeMap._faceTargets;if(options.url){var urls=options.url;var onSuccess=options.onSuccess;if(onSuccess){options.onSuccess=(function(){var imagesLeft=6;return function(){--imagesLeft;if(imagesLeft==0)onSuccess.apply(options,null);}})();}
for(var i=0;i<6;++i){options.url=urls[i];this.setImage(faceTargets[i],options);}
options.onSuccess=onSuccess;}
else if(options.data){var datas=options.data;for(var i=0;i<6;++i){options.data=datas[i];this.setImage(faceTargets[i],options);}}
else if((options.width>0)&&(options.height>0)){for(var i=0;i<6;++i){this.setImage(faceTargets[i],options);}}}
SpiderGL.WebGL.TextureCubeMap.TARGET=WebGLRenderingContext.TEXTURE_CUBE_MAP;SpiderGL.WebGL.TextureCubeMap.unbind=function(gl,unit){var cb=gl.getExtension("SGL_current_binding");var dsa=gl.getExtension("SGL_direct_state_access");if(typeof unit=="undefined"){gl.bindTexture(SpiderGL.WebGL.TextureCubeMap.TARGET,null);}
else{dsa.bindTexture(gl.TEXTURE0+unit,SpiderGL.WebGL.TextureCubeMap.TARGET,null);}};SpiderGL.WebGL.TextureCubeMap._faceTargets=[WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_X,WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_X,WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Y,WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Y,WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Z,WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Z];SpiderGL.WebGL.TextureCubeMap.prototype={setImage:function(face,options){return this._setImage(face,options);},setSubImage:function(face,options){return this._setSubImage(face,options);}};SpiderGL.Type.extend(SpiderGL.WebGL.TextureCubeMap,SpiderGL.WebGL.Texture);SpiderGL.Model={};SpiderGL.Model.Model=function(gl,descriptor,options){SpiderGL.Core.ObjectBase.call(this);options=SpiderGL.Utility.getDefaultObject({},options);if(descriptor&&("vertices"in descriptor)){descriptor=SpiderGL.Model.Model._createSimpleDescriptor(descriptor);}
this._descriptor=SpiderGL.Model.Model._fixDescriptor(descriptor);this._gl=null;this._renderData={};if(gl){this.updateGL(gl,options);this.updateRenderData();}};SpiderGL.Model.Model.DEFAULT_VERTEX_STREAM_SIZE=3;SpiderGL.Model.Model.DEFAULT_VERTEX_STREAM_TYPE=SpiderGL.Type.FLOAT32;SpiderGL.Model.Model.DEFAULT_VERTEX_STREAM_NORMALIZED=false;SpiderGL.Model.Model.DEFAULT_VERTEX_STREAM_STRIDE=0;SpiderGL.Model.Model.DEFAULT_VERTEX_STREAM_OFFSET=0;SpiderGL.Model.Model.DEFAULT_PRIMITIVE_STREAM_MODE=SpiderGL.Type.TRIANGLES;SpiderGL.Model.Model.DEFAULT_PRIMITIVE_STREAM_FIRST=0;SpiderGL.Model.Model.DEFAULT_PRIMITIVE_STREAM_COUNT=-1;SpiderGL.Model.Model.DEFAULT_PRIMITIVE_STREAM_TYPE=SpiderGL.Type.UINT16;SpiderGL.Model.Model.DEFAULT_PRIMITIVE_STREAM_OFFSET=0;SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_VERTEX_MAP={};SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_VERTEX_MAP["position"]={size:3,type:SpiderGL.Type.FLOAT32,normalized:false,semantic:"POSITION",index:0,value:[0.0,0.0,0.0,1.0]};SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_VERTEX_MAP["normal"]={size:3,type:SpiderGL.Type.FLOAT32,normalized:false,semantic:"NORMAL",index:0,value:[0.0,0.0,1.0,0.0]};SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_VERTEX_MAP["color"]={size:4,type:SpiderGL.Type.UINT8,normalized:true,semantic:"COLOR",index:0,value:[0,0,0,255]};SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_VERTEX_MAP["texcoord"]={size:2,type:SpiderGL.Type.FLOAT32,normalized:false,semantic:"TEXCOORD",index:0,value:[0.0,0.0,0.0,1.0]};SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_VERTEX_MAP["user"]={size:3,type:SpiderGL.Type.FLOAT32,normalized:false,semantic:"USER",index:0,value:[0.0,0.0,0.0,1.0]};SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_PRIMITIVE_MAP={};SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_PRIMITIVE_MAP["triangles"]={mode:SpiderGL.Type.TRIANGLES,type:SpiderGL.Type.UINT16,count:-1,semantic:"FILL"};SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_PRIMITIVE_MAP["triangleStrip"]={mode:SpiderGL.Type.TRIANGLE_STRIP,type:SpiderGL.Type.UINT16,count:-1,semantic:"FILL"};SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_PRIMITIVE_MAP["triangleFan"]={mode:SpiderGL.Type.TRIANGLE_FAN,type:SpiderGL.Type.UINT16,count:-1,semantic:"FILL"};SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_PRIMITIVE_MAP["lines"]={mode:SpiderGL.Type.LINES,type:SpiderGL.Type.UINT16,count:-1,semantic:"LINE"};SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_PRIMITIVE_MAP["lineStrip"]={mode:SpiderGL.Type.LINE_STRIP,type:SpiderGL.Type.UINT16,count:-1,semantic:"LINE"};SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_PRIMITIVE_MAP["lineLoop"]={mode:SpiderGL.Type.LINE_LOOP,type:SpiderGL.Type.UINT16,count:-1,semantic:"LINE"};SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_PRIMITIVE_MAP["points"]={mode:SpiderGL.Type.POINTS,type:SpiderGL.Type.UINT16,count:-1,semantic:"POINT"};SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_PRIMITIVE_MAP["user"]={mode:SpiderGL.Type.TRIANGLES,type:SpiderGL.Type.UINT16,count:-1,semantic:"FILL"};SpiderGL.Model.Model._fixDescriptor=function(d){d=SpiderGL.Utility.getDefaultObject({version:"0.0.0.1 EXP",meta:null,data:null,access:null,semantic:null,logic:null},d);d.meta=SpiderGL.Model.Model._fixDescriptorMeta(d.meta);d.data=SpiderGL.Model.Model._fixDescriptorData(d.data);d.access=SpiderGL.Model.Model._fixDescriptorAccess(d.access);d.semantic=SpiderGL.Model.Model._fixDescriptorSemantic(d.semantic);d.logic=SpiderGL.Model.Model._fixDescriptorLogic(d.logic);return d;};SpiderGL.Model.Model._fixDescriptorMeta=function(d){d=SpiderGL.Utility.getDefaultObject({author:null,date:null,description:null},d);return d;};SpiderGL.Model.Model._fixDescriptorData=function(d){d=SpiderGL.Utility.getDefaultObject({vertexBuffers:null,indexBuffers:null},d);d.vertexBuffers=SpiderGL.Model.Model._fixDescriptorDataVertexBuffers(d.vertexBuffers);d.indexBuffers=SpiderGL.Model.Model._fixDescriptorDataIndexBuffers(d.indexBuffers);return d;};SpiderGL.Model.Model._fixDescriptorDataVertexBuffers=function(d){d=SpiderGL.Utility.getDefaultObject({},d);for(var x in d){d[x]=SpiderGL.Model.Model._fixDescriptorDataVertexBuffer(d[x]);}
return d;};SpiderGL.Model.Model._fixDescriptorDataVertexBuffer=function(d){return SpiderGL.Model.Model._fixDescriptorDataBuffer(d);};SpiderGL.Model.Model._fixDescriptorDataIndexBuffers=function(d){d=SpiderGL.Utility.getDefaultObject({},d);for(var x in d){d[x]=SpiderGL.Model.Model._fixDescriptorDataIndexBuffer(d[x]);}
return d;};SpiderGL.Model.Model._fixDescriptorDataIndexBuffer=function(d){return SpiderGL.Model.Model._fixDescriptorDataBuffer(d);};SpiderGL.Model.Model._fixDescriptorDataBuffer=function(d){d=SpiderGL.Utility.getDefaultObject({type:SpiderGL.Type.NO_TYPE,glType:WebGLRenderingContext.NONE,untypedArray:null,typedArray:null,glBuffer:null},d);return d;};SpiderGL.Model.Model._fixDescriptorAccess=function(d){d=SpiderGL.Utility.getDefaultObject({vertexStreams:null,primitiveStreams:null},d);d.vertexStreams=SpiderGL.Model.Model._fixDescriptorAccessVertexStreams(d.vertexStreams);d.primitiveStreams=SpiderGL.Model.Model._fixDescriptorAccessPrimitiveStreams(d.primitiveStreams);return d;};SpiderGL.Model.Model._fixDescriptorAccessVertexStreams=function(d){d=SpiderGL.Utility.getDefaultObject({},d);for(var x in d){d[x]=SpiderGL.Model.Model._fixDescriptorAccessVertexStream(d[x]);}
return d;};SpiderGL.Model.Model._fixDescriptorAccessVertexStream=function(d){d=SpiderGL.Utility.getDefaultObject({buffer:null,size:SpiderGL.Model.Model.DEFAULT_VERTEX_STREAM_SIZE,type:SpiderGL.Model.Model.DEFAULT_VERTEX_STREAM_TYPE,glType:SpiderGL.Type.typeToGL(SpiderGL.Model.Model.DEFAULT_VERTEX_STREAM_TYPE),normalized:SpiderGL.Model.Model.DEFAULT_VERTEX_STREAM_NORMALIZED,stride:SpiderGL.Model.Model.DEFAULT_VERTEX_STREAM_STRIDE,offset:SpiderGL.Model.Model.DEFAULT_VERTEX_STREAM_OFFSET},d);return d;};SpiderGL.Model.Model._fixDescriptorAccessPrimitiveStreams=function(d){d=SpiderGL.Utility.getDefaultObject({},d);for(var x in d){d[x]=SpiderGL.Model.Model._fixDescriptorAccessPrimitiveStream(d[x]);}
return d;};SpiderGL.Model.Model._fixDescriptorAccessPrimitiveStream=function(d){d=SpiderGL.Utility.getDefaultObject({buffer:null,mode:SpiderGL.Model.Model.DEFAULT_PRIMITIVE_STREAM_MODE,first:SpiderGL.Model.Model.DEFAULT_PRIMITIVE_STREAM_FIRST,count:SpiderGL.Model.Model.DEFAULT_PRIMITIVE_STREAM_COUNT,type:SpiderGL.Model.Model.DEFAULT_PRIMITIVE_STREAM_TYPE,glType:SpiderGL.Type.typeToGL(SpiderGL.Model.Model.DEFAULT_PRIMITIVE_STREAM_TYPE),offset:SpiderGL.Model.Model.DEFAULT_PRIMITIVE_STREAM_OFFSET},d);return d;};SpiderGL.Model.Model._fixDescriptorSemantic=function(d){d=SpiderGL.Utility.getDefaultObject({bindings:null,chunks:null},d);d.bindings=SpiderGL.Model.Model._fixDescriptorSemanticBindings(d.bindings);d.chunks=SpiderGL.Model.Model._fixDescriptorSemanticChunks(d.chunks);return d;};SpiderGL.Model.Model._fixDescriptorSemanticBindings=function(d){d=SpiderGL.Utility.getDefaultObject({},d);for(var x in d){d[x]=SpiderGL.Model.Model._fixDescriptorSemanticBinding(d[x]);}
return d;};SpiderGL.Model.Model._fixDescriptorSemanticBinding=function(d){d=SpiderGL.Utility.getDefaultObject({vertexStreams:null,primitiveStreams:null},d);d.vertexStreams=SpiderGL.Model.Model._fixDescriptorSemanticBindingVertexStreams(d.vertexStreams);d.primitiveStreams=SpiderGL.Model.Model._fixDescriptorSemanticBindingPrimitiveStreams(d.primitiveStreams);return d;};SpiderGL.Model.Model._fixDescriptorSemanticBindingVertexStreams=function(d){d=SpiderGL.Utility.getDefaultObject({},d);for(var x in d){d[x]=SpiderGL.Model.Model._fixDescriptorSemanticBindingVertexStream(d[x]);}
return d;};SpiderGL.Model.Model._fixDescriptorSemanticBindingVertexStream=function(d){if(!d)return null;if(SpiderGL.Type.isArray(d))return d.slice();return[d];};SpiderGL.Model.Model._fixDescriptorSemanticBindingPrimitiveStreams=function(d){d=SpiderGL.Utility.getDefaultObject({},d);for(var x in d){d[x]=SpiderGL.Model.Model._fixDescriptorSemanticBindingPrimitiveStream(d[x]);}
return d;};SpiderGL.Model.Model._fixDescriptorSemanticBindingPrimitiveStream=function(d){if(!d)return null;if(SpiderGL.Type.isArray(d))return d.slice();return[d];};SpiderGL.Model.Model._fixDescriptorSemanticChunks=function(d){d=SpiderGL.Utility.getDefaultObject({},d);for(var x in d){d[x]=SpiderGL.Model.Model._fixDescriptorSemanticChunk(d[x]);}
return d;};SpiderGL.Model.Model._fixDescriptorSemanticChunk=function(d){d=SpiderGL.Utility.getDefaultObject({techniques:null},d);d.techniques=SpiderGL.Model.Model._fixDescriptorSemanticChunkTechniques(d.techniques);return d;};SpiderGL.Model.Model._fixDescriptorSemanticChunkTechniques=function(d){d=SpiderGL.Utility.getDefaultObject({},d);for(var x in d){d[x]=SpiderGL.Model.Model._fixDescriptorSemanticChunkTechnique(d[x]);}
return d;};SpiderGL.Model.Model._fixDescriptorSemanticChunkTechnique=function(d){d=SpiderGL.Utility.getDefaultObject({binding:null},d);return d;};SpiderGL.Model.Model._fixDescriptorLogic=function(d){d=SpiderGL.Utility.getDefaultObject({parts:null},d);d.parts=SpiderGL.Model.Model._fixDescriptorLogicParts(d.parts);return d;};SpiderGL.Model.Model._fixDescriptorLogicParts=function(d){d=SpiderGL.Utility.getDefaultObject({},d);for(var x in d){d[x]=SpiderGL.Model.Model._fixDescriptorLogicPart(d[x]);}
return d;};SpiderGL.Model.Model._fixDescriptorLogicPart=function(d){d=SpiderGL.Utility.getDefaultObject({chunks:null},d);d.chunks=SpiderGL.Model.Model._fixDescriptorLogicPartChunks(d.chunks);return d;};SpiderGL.Model.Model._fixDescriptorLogicPartChunks=function(d){if(!d)return null;if(SpiderGL.Type.isArray(d))return d.slice();return[d];};SpiderGL.Model.Model._createSimpleDescriptor=function(options){options=SpiderGL.Utility.getDefaultObject({vertices:null,primitives:null,options:null},options);var bindingName="mainBinding";var chunkName="mainChunk";var partName="mainPart";var vertexBufferSuffix="VertexBuffer";var indexBufferSuffix="IndexBuffer";var d={data:{vertexBuffers:{},indexBuffers:{},},access:{vertexStreams:{},primitiveStreams:{}},semantic:{bindings:{},chunks:{}},logic:{parts:{}}};var binding={vertexStreams:{},primitiveStreams:{}};d.semantic.bindings[bindingName]=binding;var chunk={techniques:{"common":{binding:bindingName}}};d.semantic.chunks[chunkName]=chunk;var part={chunks:[chunkName]};d.logic.parts[partName]=part;var minBufferedCount=-1;var hasBuffered=false;var hasConstant=false;for(var x in options.vertices){var src=options.vertices[x];if(!src)continue;if(SpiderGL.Type.isArray(src)||SpiderGL.Type.isTypedArray(src)||SpiderGL.Type.instanceOf(src,ArrayBuffer)){src={data:src};}
var map=SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_VERTEX_MAP[x];var mapSemantic=null;if(!map){map=SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_VERTEX_MAP["user"];mapSemantic=x.toUpperCase();}
else{mapSemantic=map.semantic;}
var info=SpiderGL.Utility.getDefaultObject({size:map.size,type:map.type,normalized:map.normalized,semantic:mapSemantic,index:map.index,data:null,value:map.value.slice()},src);var accessor={buffer:null,size:info.size,type:info.type,normalized:info.normalized,stride:0,offset:0,value:info.value.slice(),};if(info.data){var buffer={type:info.type};var count=0;if(SpiderGL.Type.isArray(info.data)){buffer.untypedArray=info.data;count=buffer.untypedArray.length/accessor.size;}
else if(SpiderGL.Type.isTypedArray(src)||SpiderGL.Type.instanceOf(src,ArrayBuffer)){buffer.typedArray=info.data;count=(buffer.typedArray.byteLength-accessor.offset)/(accessor.size*SpiderGL.Type.typeSize(accessor.type));}
else{continue;}
count=SpiderGL.Math.floor(count);hasBuffered=true;minBufferedCount=(minBufferedCount>=0)?(SpiderGL.Math.min(minBufferedCount,count)):(count);var bufferName=x+vertexBufferSuffix;d.data.vertexBuffers[bufferName]=buffer;accessor.buffer=bufferName;}
else{hasConstant=true;}
var streamName=x;d.access.vertexStreams[streamName]=accessor;var streams=new Array(info.index+1);streams[info.index]=streamName;binding.vertexStreams[info.semantic]=streams;}
var minCount=0;if(hasBuffered){minCount=minBufferedCount;}
else if(hasConstant){minCount=1;}
var optionsPrimitives=options.primitives;if(SpiderGL.Type.isString(optionsPrimitives)){optionsPrimitives=[optionsPrimitives];}
if(SpiderGL.Type.isArray(optionsPrimitives)){var op=optionsPrimitives;optionsPrimitives={};for(var i=0,n=op.length;i<n;++i){var pn=op[i];if(!SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_PRIMITIVE_MAP[pn])continue;optionsPrimitives[pn]={};}}
for(var x in optionsPrimitives){var src=optionsPrimitives[x];if(!src)continue;if(SpiderGL.Type.isArray(src)||SpiderGL.Type.isTypedArray(src)||SpiderGL.Type.instanceOf(src,ArrayBuffer)){src={data:src};}
var map=SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_PRIMITIVE_MAP[x];if(!map)map=SpiderGL.Model.Model.DEFAULT_SIMPLE_MODEL_PRIMITIVE_MAP["user"];var info=SpiderGL.Utility.getDefaultObject({mode:map.mode,type:map.type,count:((map.count>=0)?(map.count):(minCount)),semantic:map.semantic},src);var accessor={buffer:null,mode:info.mode,first:0,count:info.count,type:info.type,offset:0};if(info.data){var buffer={type:info.type};var count=0
if(SpiderGL.Type.isArray(info.data)){buffer.untypedArray=info.data;count=buffer.untypedArray.length;}
else if(SpiderGL.Type.isTypedArray(src)||SpiderGL.Type.instanceOf(src,ArrayBuffer)){buffer.typedArray=info.data;count=(buffer.typedArray.byteLength-accessor.offset)/(SpiderGL.Type.typeSize(accessor.type));}
else{continue;}
count=SpiderGL.Math.floor(count);var bufferName=x+indexBufferSuffix;d.data.indexBuffers[bufferName]=buffer;accessor.buffer=bufferName;accessor.count=count;}
var streamName=x;d.access.primitiveStreams[streamName]=accessor;var streams=new Array(1);streams[0]=streamName;binding.primitiveStreams[info.semantic]=streams;}
return d;};SpiderGL.Model.Model.prototype={get descriptor(){return this._descriptor;},get isReady(){return!!this._descriptor;},get gl(){return this._gl;},get renderData(){return this._renderData;},updateTypedArrays:function(){var d=this._descriptor;if(!d)return false;var buffer=null;var ctor=null;var vertexBuffers=d.data.vertexBuffers;for(var x in vertexBuffers){buffer=vertexBuffers[x];if(!buffer.untypedArray)continue;ctor=SpiderGL.Type.typeToTypedArrayConstructor(buffer.type);buffer.typedArray=new ctor(buffer.untypedArray);}
var indexBuffers=d.data.indexBuffers;for(var x in indexBuffers){buffer=indexBuffers[x];if(!buffer.untypedArray)continue;ctor=SpiderGL.Type.typeToTypedArrayConstructor(buffer.type);buffer.typedArray=new ctor(buffer.untypedArray);}
return true;},updateGL:function(gl,options){if(!gl)return false;var d=this._descriptor;if(!d)return false;this._gl=gl;var buffer=null;var typedArray=null;var ctor=null;var bufferOptions=SpiderGL.Utility.getDefaultObject({data:null,usage:SpiderGL.Core.DEFAULT},options);bufferOptions.data=null;for(var x in d.data.vertexBuffers){buffer=d.data.vertexBuffers[x];bufferOptions.data=buffer.typedArray;if(!bufferOptions.data){ctor=SpiderGL.Type.typeToTypedArrayConstructor(buffer.type);bufferOptions.data=new ctor(buffer.untypedArray);}
if(buffer.glBuffer){buffer.glBuffer.destroy();buffer.glBuffer=null;}
buffer.glBuffer=new SpiderGL.WebGL.VertexBuffer(gl,bufferOptions);}
for(var x in d.data.indexBuffers){buffer=d.data.indexBuffers[x];bufferOptions.data=buffer.typedArray;if(!bufferOptions.data){ctor=SpiderGL.Type.typeToTypedArrayConstructor(buffer.type);bufferOptions.data=new ctor(buffer.untypedArray);}
if(buffer.glBuffer){buffer.glBuffer.destroy();buffer.glBuffer=null;}
buffer.glBuffer=new SpiderGL.WebGL.IndexBuffer(gl,bufferOptions);}
var stream=null;for(var x in d.access.vertexStreams){stream=d.access.vertexStreams[x];stream.glType=SpiderGL.Type.typeToGL(stream.type);}
for(var x in d.access.primitiveStreams){stream=d.access.primitiveStreams[x];stream.glMode=SpiderGL.Type.primitiveToGL(stream.mode);stream.glType=SpiderGL.Type.typeToGL(stream.type);}
return true;},destroyGL:function(){var d=this._descriptor;if(!d)return false;var buffer=null;for(var x in d.data.vertexBuffers){buffer=d.data.vertexBuffers[x];if(buffer.glBuffer){buffer.glBuffer.destroy();buffer.glBuffer=null;}}
for(var x in d.data.indexBuffers){buffer=d.data.indexBuffers[x];if(buffer.glBuffer){buffer.glBuffer.destroy();buffer.glBuffer=null;}}},updateRenderData:function(){var d=this._descriptor;if(!d)return false;var renderData={partMap:{}};for(var partName in d.logic.parts){var part=d.logic.parts[partName];var chunkNames=part.chunks;var partInfo={};renderData.partMap[partName]=partInfo;for(var i=0,n=chunkNames.length;i<n;++i){var chunkName=chunkNames[i];var chunk=d.semantic.chunks[chunkName];var chunkInfo={};partInfo[chunkName]=chunkInfo;var techniques=chunk.techniques;for(var techniqueName in techniques){var techique=techniques[techniqueName];var techiqueInfo={vertexStreams:{buffered:[],constant:[]},primitiveStreams:{}};chunkInfo[techniqueName]=techiqueInfo;var binding=d.semantic.bindings[techique.binding];var streams=binding.vertexStreams;var bufferMap={};for(var semantic in streams){var streamNames=streams[semantic];for(var j=0,m=streamNames.length;j<m;++j){var streamName=streamNames[j];var stream=d.access.vertexStreams[streamName];var streamInfo={semantic:semantic,index:j,stream:stream}
var bufferName=stream.buffer;if(bufferName){bufferMap[bufferName]=bufferMap[bufferName]||[];bufferMap[bufferName].push(streamInfo);}
else{techiqueInfo.vertexStreams.constant.push(streamInfo);}}}
for(var bufferName in bufferMap){var bufferInfo={buffer:d.data.vertexBuffers[bufferName],streams:bufferMap[bufferName].slice()};techiqueInfo.vertexStreams.buffered.push(bufferInfo);}
var streams=binding.primitiveStreams;for(var semantic in streams){var bufferMap={};var primitiveStreamsInfo={buffered:[],array:[]};techiqueInfo.primitiveStreams[semantic]=primitiveStreamsInfo;var streamNames=streams[semantic];for(var j=0,m=streamNames.length;j<m;++j){var streamName=streamNames[j];var stream=d.access.primitiveStreams[streamName];var bufferName=stream.buffer;if(bufferName){bufferMap[bufferName]=bufferMap[bufferName]||[];bufferMap[bufferName].push(stream);}
else{primitiveStreamsInfo.array.push(stream);}}
for(var bufferName in bufferMap){var bufferInfo={buffer:d.data.indexBuffers[bufferName],streams:bufferMap[bufferName].slice()};primitiveStreamsInfo.buffered.push(bufferInfo);}}}}}
this._renderData=renderData;}};SpiderGL.Type.extend(SpiderGL.Model.Model,SpiderGL.Core.ObjectBase);SpiderGL.Model.Technique=function(gl,descriptor,options){SpiderGL.Core.ObjectBase.call(this);options=SpiderGL.Utility.getDefaultObject({},options);if(descriptor&&("vertexShader"in descriptor)&&("fragmentShader"in descriptor)){descriptor=SpiderGL.Model.Technique._createSimpleDescriptor(gl,descriptor);}
this._descriptor=SpiderGL.Model.Technique._fixDescriptor(descriptor);this._gl=this._descriptor.program.gl;this._renderData={};if(gl){this.updateRenderData();}};SpiderGL.Model.Technique._fixDescriptor=function(d){d=SpiderGL.Utility.getDefaultObject({name:"common",program:null,semantic:{}},d);if(d.vertexStreams){d.semantic.vertexStreams=d.vertexStreams;delete d.vertexStreams;}
if(d.globals){d.semantic.globals=d.globals;delete d.globals;}
d.semantic=SpiderGL.Model.Technique._fixSemantic(d.program,d.semantic);return d;};SpiderGL.Model.Technique._fixSemantic=function(p,d){d=SpiderGL.Utility.getDefaultObject({vertexStreams:null,globals:null},d);d.vertexStreams=SpiderGL.Model.Technique._fixVertexStreams(p,d.vertexStreams);d.globals=SpiderGL.Model.Technique._fixGlobals(p,d.globals);return d;};SpiderGL.Model.Technique._fixVertexStreams=function(p,d){var num="0123456789";var attribNames=p.getAttributesNames();var requiredAttribs={};for(var i=0,n=attribNames.length;i<n;++i){var attribName=attribNames[i];var semanticStr="";var indexStr="";for(var j=attribName.length-1;j>=0;--j){var ch=attribName.charAt(j);if(num.indexOf(ch,0)==-1){semanticStr=attribName.substring(0,j+1);break;}
indexStr=ch+indexStr;}
var index=((indexStr.length>0)?(parseInt(indexStr)):(0));var len=semanticStr.length;if(len>=2){if(semanticStr.charAt(0)=="a"){var ch=semanticStr.charAt(1);if((ch=="_")&&(len>2)){semanticStr=semanticStr.substring(2);}
else if(ch==semanticStr.charAt(1).toUpperCase()){semanticStr=semanticStr.substring(1);}}}
var semantic=semanticStr.toUpperCase();requiredAttribs[attribName]={semantic:semantic,index:index,value:[0.0,0.0,0.0,1.0]};}
var dd={};for(var x in d){var r=requiredAttribs[x];if(!r)continue;var s=d[x];if(SpiderGL.Type.isString(s)){s={semantic:s};}
else if(SpiderGL.Type.isArray(s)||SpiderGL.Type.isTypedArray(s)){s={value:s};}
else if(SpiderGL.Type.isNumber(s)){s={value:[s,s,s,s]};}
dd[x]=SpiderGL.Utility.getDefaultObject({semantic:r.semantic,index:r.index,value:r.value},s);}
d=SpiderGL.Utility.getDefaultObject(requiredAttribs,dd);return d;};SpiderGL.Model.Technique._fixGlobals=function(p,d){var uniformValues=p.getUniformsValues();var requiredUniforms={};for(var uniformName in uniformValues){var semanticStr=uniformName;var len=semanticStr.length;if(len>=2){if(semanticStr.charAt(0)=="u"){var ch=semanticStr.charAt(1);if((ch=="_")&&(len>2)){semanticStr=semanticStr.substring(2);}
else if(ch==semanticStr.charAt(1).toUpperCase()){semanticStr=semanticStr.substring(1);}}}
var semantic=semanticStr.toUpperCase();requiredUniforms[uniformName]={semantic:semantic,value:uniformValues[uniformName]};};d=SpiderGL.Utility.getDefaultObject(requiredUniforms,d);return d;};SpiderGL.Model.Technique._createSimpleDescriptor=function(gl,options){options=SpiderGL.Utility.getDefaultObject({name:"common",vertexShader:null,fragmentShader:null,attributes:null,uniforms:null,semantic:{},vertexStreams:null,globals:null,options:null},options);if(options.vertexStreams){options.semantic.vertexStreams=options.vertexStreams;delete options.vertexStreams;}
if(options.globals){options.semantic.globals=options.globals;delete options.globals;}
var d={name:options.name,program:null,semantic:options.semantic};if(!gl){return d;}
var vertexShader=options.vertexShader;var fragmentShader=options.fragmentShader;if(!vertexShader||!fragmentShader){return d;}
if(SpiderGL.Type.isString(vertexShader)){vertexShader=new SpiderGL.WebGL.VertexShader(gl,vertexShader);}
else if(!SpiderGL.Type.instanceOf(vertexShader,SpiderGL.WebGL.VertexShader)){return d;}
if(SpiderGL.Type.isString(fragmentShader)){fragmentShader=new SpiderGL.WebGL.FragmentShader(gl,fragmentShader);}
else if(!SpiderGL.Type.instanceOf(fragmentShader,SpiderGL.WebGL.FragmentShader)){return d;}
var program=new SpiderGL.WebGL.Program(gl,{shaders:[vertexShader,fragmentShader],attributes:options.attributes,uniforms:options.uniforms});d.program=program;return d;};SpiderGL.Model.Technique.prototype={get descriptor(){return this._descriptor;},get isReady(){return!!this._descriptor;},get gl(){return this._gl;},get name(){return this._descriptor.name;},get renderData(){return this._renderData;},get program(){return this._descriptor.program;},setUniforms:function(uniforms){this._descriptor.program.setUniforms(uniforms);},updateRenderData:function(){var d=this._descriptor;var renderData={};this._renderData=renderData;var attributesMap={};renderData.attributesMap=attributesMap;var attributesIndices=d.program.getAttributesIndices();for(var attribName in d.semantic.vertexStreams){var semanticInfo=d.semantic.vertexStreams[attribName];var semanticName=semanticInfo.semantic;var attribs=attributesMap[semanticName];if(!attribs){attribs=[];attributesMap[semanticName]=attribs;}
attribs[semanticInfo.index]={index:attributesIndices[attribName],value:semanticInfo.value};}
var globalsMap={};renderData.globalsMap=globalsMap;for(var uniformName in d.semantic.globals){var semanticInfo=d.semantic.globals[uniformName];globalsMap[semanticInfo.semantic]={name:uniformName,value:semanticInfo.value};}}};SpiderGL.Model.ModelRenderer=function(gl){this._gl=gl;this._vertexAttributesCount=gl.getParameter(gl.MAX_VERTEX_ATTRIBS);this._textureUnitsCount=gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);this._internalFramebuffer=new SpiderGL.WebGL.Framebuffer(gl);this._reset();};SpiderGL.Model.ModelRenderer.prototype={_reset:function(){this._technique=null;this._model=null;this._partName=null;this._chunkName=null;this._primMode=null;this._framebuffer=null;this._inBegin=false;this._enabledArrays=[];this._boundTextures=[];this._attribValues=[];this._primitiveStreams=[];this._techniqueDirty=true;this._modelDirty=true;this._modelPartDirty=true;this._modelChunkDirty=true;this._primModeDirty=true;this._framebufferDirty=true;this._viewportDirty=true;this._dirty=true;},_resetContext:function(){var gl=this._gl;for(var i=0,n=this._vertexAttributesCount;i<n;++i){gl.disableVertexAttribArray(i);}
for(var i=this._textureUnitsCount-1;i>=0;--i){gl.activeTexture(gl.TEXTURE0+i);gl.bindTexture(gl.TEXTURE_2D,null);gl.bindTexture(gl.TEXTURE_CUBE_MAP,null);}
SpiderGL.WebGL.VertexBuffer.unbind(gl);SpiderGL.WebGL.IndexBuffer.unbind(gl);SpiderGL.WebGL.Program.unbind(gl);SpiderGL.WebGL.Framebuffer.unbind(gl);},_update:function(){if(!this._dirty)return true;var gl=this._gl;if(this._techniqueDirty){var technique=this._technique;if(!technique)return false;var techniqueRenderData=technique.renderData;var attributesMap=techniqueRenderData.attributesMap;var attribValues=[];for(var semantic in attributesMap){var attribs=attributesMap[semantic];for(var i in attribs){var attribInfo=attribs[i];var attribData=null;if(attribInfo){attribData={index:attribInfo.index,value:attribInfo.value};}
attribValues.push(attribData);}}
this._attribValues=attribValues;technique.program.bind();this._techniqueDirty=false;}
if(this._modelDirty){var model=this._model;if(!model)return false;var attribValues=this._attribValues;for(var i=0,n=attribValues.length;i<n;++i){var attribData=attribValues[i];if(!attribData)continue;gl.vertexAttrib4fv(attribData.index,attribData.value);}
var modelRenderData=model.renderData;var technique=this._technique;if(!technique)return false;var techniqueRenderData=technique.renderData;if(!techniqueRenderData)return false;var attributesMap=techniqueRenderData.attributesMap;if(this._modelPartDirty){var partName=this._partName;if(!partName)return false;this._modelPartDirty=false;}
if(this._modelChunkDirty){var chunkName=this._chunkName;if(!chunkName)return false;var partInfo=modelRenderData.partMap[this._partName];if(!partInfo)return false;var chunkInfo=partInfo[chunkName];if(!chunkInfo)return false;var techniqueInfo=chunkInfo[technique.name];if(!techniqueInfo){techniqueInfo=chunkInfo["common"];}
if(!techniqueInfo)return false;var enabledArrays=this._enabledArrays;for(var i=0,n=enabledArrays.length;i<n;++i){gl.disableVertexAttribArray(enabledArrays[i]);}
enabledArrays=[];var streams=techniqueInfo.vertexStreams.buffered;for(var i=0,n=streams.length;i<n;++i){var data=streams[i];var buffer=data.buffer.glBuffer;buffer.bind();var infos=data.streams;for(var j=0,m=infos.length;j<m;++j){var info=infos[j];if(!attributesMap[info.semantic]||!attributesMap[info.semantic][info.index])continue;var index=attributesMap[info.semantic][info.index].index;var stream=info.stream;stream.index=index;enabledArrays.push(index);buffer.vertexAttribPointer(stream);}}
this._enabledArrays=enabledArrays;var infos=techniqueInfo.vertexStreams.constant;for(var j=0,n=infos.length;j<n;++j){var info=infos[j];if(!attributesMap[info.semantic]||!attributesMap[info.semantic][info.index])continue;var index=attributesMap[info.semantic][info.index].index;var stream=info.stream;gl.vertexAttrib4fv(index,stream.value);}
this._modelChunkDirty=false;}
if(this._primModeDirty){var primMode=this._primMode;if(!primMode)return false;var partInfo=modelRenderData.partMap[this._partName];if(!partInfo)return false;var chunkInfo=partInfo[this._chunkName];if(!chunkInfo)return false;var techniqueInfo=chunkInfo[technique.name];if(!techniqueInfo){techniqueInfo=chunkInfo["common"];}
if(!techniqueInfo)return false;var primitiveStreams=techniqueInfo.primitiveStreams[primMode];if(!primitiveStreams)return false;this._primitiveStreams=primitiveStreams;this._primModeDirty=false;}
this._modelDirty=false;}
if(this._framebufferDirty){if(this._framebuffer){this._framebuffer.bind();}
else{SpiderGL.WebGL.Framebuffer.unbind(gl);}
this._framebufferDirty=false;}
if(this._viewportDirty){if(this._framebuffer){if(this._framebuffer.autoViewport){this._framebuffer.applyViewport();}}
this._viewportDirty=false;}
this._dirty=false;return true;},get gl(){return this._gl;},get isValid(){return(!!this._gl);},destroy:function(){this.end();this._internalFramebuffer.destroy();this._internalFramebuffer=null;this._gl=null;},begin:function(){if(this._inBegin)return;this._resetContext();this._inBegin=true;},end:function(){if(!this._inBegin)return;this._inBegin=false;var gl=this._gl;var enabledArrays=this._enabledArrays;for(var i=0,n=enabledArrays.length;i<n;++i){gl.disableVertexAttribArray(enabledArrays[i]);}
var boundTextures=this._boundTextures;for(var i=0,n=boundTextures.length;i<n;++i){var tex=boundTextures[i];if(!tex)continue;if(tex.target==gl.TEXTURE_2D){SpiderGL.WebGL.Texture2D.unbind(gl,tex.unit);}
else if(tex.target==gl.TEXTURE_CUBE_MAP){SpiderGL.WebGL.TextureCubeMap.unbind(gl,tex.unit);}}
if(this._framebuffer){SpiderGL.WebGL.Framebuffer.unbind(this._gl);}
this._internalFramebuffer.detachAll();this._reset();this._resetContext();},get isInBegin(){return this._inBegin;},setTechnique:function(t){if(!this._inBegin)return;if(this._technique==t)return;this._technique=t;this._techniqueDirty=true;this._dirty=true;if(!t){SpiderGL.WebGL.Program.unbind(this._gl);}},get technique(){return this._technique;},setModel:function(m){if(!this._inBegin)return;if(this._model==m)return;this._model=m;this._modelDirty=true;this._modelPartDirty=true;this._modelChunkDirty=true;this._dirty=true;},get model(){return this._model;},setPart:function(p){if(!this._inBegin)return;if(this._part==p)return;this._partName=p;this._modelPartDirty=true;this._modelDirty=true;this._dirty=true;},get part(){return this._partName;},setChunk:function(c){if(!this._inBegin)return;if(this._chunk==c)return;this._chunkName=c;this._modelDirty=true;this._modelChunkDirty=true;this._primModeDirty=true;this._dirty=true;},get chunk(){return this._chunkName;},setPrimitiveMode:function(m){if(!this._inBegin)return;if(this._primMode==m)return;this._primMode=m;this._primModeDirty=true;this._modelDirty=true;this._dirty=true;},get primitiveMode(){return this._primMode;},setUniforms:function(u){if(!this._inBegin)return;if(!this._technique)return;this._technique.program.setUniforms(u);},setDefaultGlobals:function(){if(!this._inBegin)return;var technique=this._technique;if(!technique)return;var globalsMap=technique.renderData.globalsMap;var uniforms={};for(var semantic in globalsMap){var uniformName=globalsMap[semantic].name;var uniformValue=globalsMap[semantic].value;uniforms[uniformName]=uniformValue;}
technique.program.setUniforms(uniforms);},setGlobals:function(g){if(!this._inBegin)return;if(!g)return;var technique=this._technique;if(!technique)return;var globalsMap=technique.renderData.globalsMap;var uniforms={};for(var semantic in g){if(!globalsMap[semantic])continue;var uniformName=globalsMap[semantic].name;var uniformValue=g[semantic];uniforms[uniformName]=uniformValue;}
technique.program.setUniforms(uniforms);},setFramebuffer:function(fb){if(!this._inBegin)return;if(this._framebuffer==fb)return;this._framebuffer=fb;this._framebufferDirty=true;this._viewportDirty=true;this._dirty=true;if(fb){fb.bind();}
else{SpiderGL.WebGL.Framebuffer.unbind(this._gl);}},activateOffScreenFramebuffer:function(){this.setFramebuffer(this._internalFramebuffer);},activateMainFramebuffer:function(){return this.setFramebuffer(null);},setFramebufferAttachments:function(attachments){if(!this._inBegin)return;if(!this._framebuffer)return;this._framebuffer.setAttachments(attachments);this._framebufferDirty=true;this._viewportDirty=true;},setColorRenderTarget:function(rt){if(!this._inBegin)return;if(!this._framebuffer)return;this._framebuffer.colorTarget=rt;this._viewportDirty=true;this._dirty=true;},setDepthRenderTarget:function(rt){if(!this._inBegin)return;if(!this._framebuffer)return;this._framebuffer.depthTarget=rt;this._viewportDirty=true;this._dirty=true;},setStencilRenderTarget:function(rt){if(!this._inBegin)return;if(!this._framebuffer)return;this._framebuffer.stencilTarget=rt;this._viewportDirty=true;this._dirty=true;},setDepthStencilRenderTarget:function(rt){if(!this._inBegin)return;if(!this._framebuffer)return;this._framebuffer.depthStencilTarget=rt;this._viewportDirty=true;this._dirty=true;},clearFramebuffer:function(options){if(!this._inBegin)return;if(!options)return;var gl=this._gl;var mask=0;if(SpiderGL.Type.isNumber(options)){mask=options;}
else{if("color"in options){var color=options.color;if(color){gl.clearColor(color[0],color[1],color[2],color[3]);}
mask|=gl.COLOR_BUFFER_BIT;}
if("depth"in options){var depth=options.depth;if(SpiderGL.Type.isNumber(depth)){gl.clearDepth(depth);}
mask|=gl.DEPTH_BUFFER_BIT;}
if("stencil"in options){var stencil=options.stencil;if(SpiderGL.Type.isNumber(stencil)){gl.clearStencil(stencil);}
mask|=gl.Stencil_BUFFER_BIT;}}
if(mask){var fb=this._framebuffer;if(fb){fb.clear(mask);}
else{gl.clear(mask);}}},setViewport:function(x,y,width,height){if(!this._inBegin)return;var gl=this._gl;gl.viewport(x,y,width,height);},setTexture:function(unit,texture){if(texture){texture.bind(unit);}
else{var gl=this._gl;SpiderGL.WebGL.Texture2D.unbind(gl,unit);SpiderGL.WebGL.TextureCubeMap.unbind(gl,unit);}},get canRender(){return(!!this._inBegin&&!!this._technique&&!!this._model&&!!this._partName&&!!this._chunkName&&!!this._primMode);},render:function(){if(!this.canRender)return;if(!this._update())return;var gl=this._gl;var primitiveStreams=this._primitiveStreams;var bufferedStreams=primitiveStreams.buffered;var arrayStreams=primitiveStreams.array;for(var i=0,n=bufferedStreams.length;i<n;++i){var data=bufferedStreams[i];var buffer=data.buffer.glBuffer;buffer.bind();var infos=data.streams;for(var j=0,m=infos.length;j<m;++j){var stream=infos[j];buffer.drawElements(stream);}}
for(var j=0,n=arrayStreams.length;j<n;++j){var stream=arrayStreams[j];gl.drawArrays(stream.glMode,stream.first,stream.count);}},renderModelPart:function(partName){var part=this.model.descriptor.logic.parts[partName];this.setPart(partName);for(var c in part.chunks){var chunkName=part.chunks[c];this.setChunk(chunkName);this.render();}},renderModel:function(){var parts=this.model.descriptor.logic.parts;for(var partName in parts){var part=parts[partName];this.setPart(partName);for(var c in part.chunks){var chunkName=part.chunks[c];this.setChunk(chunkName);this.render();}}}};SpiderGL.UserInterface={};SpiderGL.UserInterface.CanvasHandler=function(gl,handler,options){SpiderGL.Core.ObjectBase.call(this);options=options||{};var that=this;var canvas=gl.canvas;this._gl=gl;this._canvas=canvas;this._handler=handler;this._ignoreKeyRepeat=SpiderGL.Utility.getDefaultValue(options.ignoreKeyRepeat,SpiderGL.UserInterface.CanvasHandler.DEFAULT_IGNORE_KEY_REPEAT);this._keysDown={};this._mouseButtonsDown=[false,false,false];this._dragging=[false,false,false];this._dragStartPos=[[0,0],[0,0],[0,0]];this._dragEndPos=[[0,0],[0,0],[0,0]];this._dragDeltaPos=[[0,0],[0,0],[0,0]];this._cursorPos=[0,0];this._cursorPrevPos=[0,0];this._cursorDeltaPos=[0,0];this._drawEventPending=false;this._drawEventHandler=function(){that._onDraw();};this._postDrawEventFunction=function(){that._postDrawEvent();};this._animateTime=Date.now();this._animatePrevTime=this._animateTime;this._animateDeltaTime=0;this._animateRate=0;this._animateID=null;this._animateEventHandler=function(){that._onAnimate();};this._animateMS=-1;this._animateWithTimeout=false;this._fastAnimate=false;this._fpsUpdateMS=1000;this._fpsTime=Date.now();this._fpsCount=0;this._fps=0;var handleMessage=function(evt){if(evt.source!=window)return;if(evt.data==SpiderGL.UserInterface.CanvasHandler._FAST_ANIMATE_MESSAGE_NAME){evt.stopPropagation();that._onAnimate();}
else if(evt.data==SpiderGL.UserInterface.CanvasHandler._FAST_DRAW_MESSAGE_NAME){evt.stopPropagation();that._onDraw();}};window.addEventListener("message",handleMessage,true);canvas.tabIndex=0;canvas.addEventListener("unload",function(e){that._onTerminate(e);},false);canvas.addEventListener("keydown",function(e){that._onKeyDown(e);},false);canvas.addEventListener("keyup",function(e){that._onKeyUp(e);},false);canvas.addEventListener("keypress",function(e){that._onKeyPress(e);},false);canvas.addEventListener("mousedown",function(e){that._onMouseButtonDown(e);},false);canvas.addEventListener("mouseup",function(e){that._onMouseButtonUp(e);},false);canvas.addEventListener("mousemove",function(e){that._onMouseMove(e);},false);canvas.addEventListener("mouseout",function(e){that._onMouseOut(e);},false);canvas.addEventListener("click",function(e){that._onClick(e);},false);canvas.addEventListener("dblclick",function(e){that._onDoubleClick(e);},false);canvas.addEventListener("resize",function(e){that._onResize(e);},false);canvas.addEventListener("DOMMouseScroll",function(e){that._onMouseWheel(e);},false);canvas.addEventListener("mousewheel",function(e){that._onMouseWheel(e);},false);canvas.addEventListener("blur",function(e){that._onBlur(e);},false);window.addEventListener("mouseup",function(e){that._onWindowMouseButtonUp(e);},false);window.addEventListener("mousemove",function(e){that._onWindowMouseMove(e);},false);canvas.addEventListener("touchstart",SpiderGL.UserInterface.CanvasHandler._touchHandler,true);canvas.addEventListener("touchend",SpiderGL.UserInterface.CanvasHandler._touchHandler,true);canvas.addEventListener("touchmove",SpiderGL.UserInterface.CanvasHandler._touchHandler,true);canvas.addEventListener("touchcancel",SpiderGL.UserInterface.CanvasHandler._touchHandler,true);var standardGLUnpack=SpiderGL.Utility.getDefaultValue(options.standardGLUnpack,SpiderGL.UserInterface.CanvasHandler.DEFAULT_STANDARD_GL_UNPACK);if(standardGLUnpack){SpiderGL.WebGL.Context.setStandardGLUnpack(gl);}
this.animateRate=SpiderGL.Utility.getDefaultValue(options.animateRate,SpiderGL.UserInterface.CanvasHandler.DEFAULT_ANIMATE_RATE);}
SpiderGL.UserInterface.CanvasHandler._FAST_DRAW_MESSAGE_NAME="spidergl-fast-draw-message";SpiderGL.UserInterface.CanvasHandler._FAST_ANIMATE_MESSAGE_NAME="spidergl-fast-animate-message";SpiderGL.UserInterface.CanvasHandler.DEFAULT_ANIMATE_RATE=0;SpiderGL.UserInterface.CanvasHandler.DEFAULT_IGNORE_KEY_REPEAT=true;SpiderGL.UserInterface.CanvasHandler.DEFAULT_STANDARD_GL_UNPACK=true;SpiderGL.UserInterface.CanvasHandler.DEFAULT_PROPERTY_NAME="ui";SpiderGL.UserInterface.CanvasHandler._touchHandler=function(event){var touches=event.changedTouches,first=touches[0],type="";switch(event.type)
{case"touchstart":type="mousedown";break;case"touchmove":type="mousemove";break;case"touchend":type="mouseup";break;default:return;}
var simulatedEvent=document.createEvent("MouseEvent");simulatedEvent.initMouseEvent(type,true,true,window,1,first.screenX,first.screenY,first.clientX,first.clientY,false,false,false,false,0,null);first.target.dispatchEvent(simulatedEvent);event.preventDefault();};SpiderGL.UserInterface.CanvasHandler.prototype={_firstNotify:function(){this._onInitialize();if(this._animateRate>0){this._onAnimate();}
this.postDrawEvent();},_dispatch:function(){var evt=arguments[0];var handler=this._handler;var method=handler[evt];if(!method)return;var args=Array.prototype.slice.call(arguments,1);var r=method.apply(handler,args);},_postDrawEvent:function(){if(this._drawEventPending)return;this._drawEventPending=true;window.postMessage(SpiderGL.UserInterface.CanvasHandler._FAST_DRAW_MESSAGE_NAME,"*");},_getMouseClientPos:function(e){var r=this._canvas.getBoundingClientRect();var w=this._canvas.width;var h=this._canvas.height;var x=e.clientX-r.left;var y=h-(e.clientY-r.top);var outside=((x<0)||(x>=w)||(y<0)||(y>=h));return[x,y,outside];},_onInitialize:function(){this._dispatch("onInitialize");},_onTerminate:function(){this._dispatch("onTerminate");},_onBlur:function(e){var gl=this._gl;var ks=this._keysDown;for(var c in ks){if(ks[c]){ks[c]=false;this._dispatch("onKeyUp",c,null);}}},_onKeyDown:function(e){var c=e.keyCode;if(((c>=48)&&(c<=90)))
{var s=String.fromCharCode(c);c=s.toUpperCase();}
var wasDown=this._keysDown[c];this._keysDown[c]=true;if(!wasDown||!this._ignoreKeyRepeat){this._dispatch("onKeyDown",c,e);}},_onKeyUp:function(e){var c=e.keyCode;if(((c>=48)&&(c<=90)))
{var s=String.fromCharCode(c);c=s.toUpperCase();}
this._keysDown[c]=false;this._dispatch("onKeyUp",c,e);},_onKeyPress:function(e){var c=e.keyCode;if(((c>=48)&&(c<=90)))
{var s=String.fromCharCode(c);c=s.toUpperCase();}
this._dispatch("onKeyPress",c,e);},_onMouseButtonDown:function(e){this._canvas.focus();var xy=this._getMouseClientPos(e);this._cursorPos=xy;var btn=e.button;this._mouseButtonsDown[btn]=true;this._dragStartPos[btn]=[xy[0],xy[1]];this._dispatch("onMouseButtonDown",btn,xy[0],xy[1],e);e.preventDefault();e.stopPropagation();},_onMouseButtonUp:function(e){var xy=this._getMouseClientPos(e);this._cursorPos=xy;var btn=e.button;this._mouseButtonsDown[btn]=false;this._dispatch("onMouseButtonUp",btn,xy[0],xy[1],e);if(this._dragging[btn]){this._dragging[btn]=false;var sPos=this._dragStartPos[btn];var ePos=[xy[0],xy[1]];this._dragEndPos[btn]=ePos;this._dragDeltaPos[btn]=[ePos[0]-sPos[0],ePos[1]-sPos[1]];this._dispatch("onDragEnd",btn,ePos[0],ePos[1]);}
e.stopPropagation();},_onWindowMouseButtonUp:function(e){var xy=this._getMouseClientPos(e);this._cursorPos=xy;var btn=e.button;if(!this._mouseButtonsDown[btn])return;this._mouseButtonsDown[btn]=false;this._dispatch("onMouseButtonUp",btn,xy[0],xy[1],e);if(this._dragging[btn]){this._dragging[btn]=false;var sPos=this._dragStartPos[btn];var ePos=[xy[0],xy[1]];this._dragEndPos[btn]=ePos;this._dragDeltaPos[btn]=[ePos[0]-sPos[0],ePos[1]-sPos[1]];this._dispatch("onDragEnd",btn,ePos[0],ePos[1]);}
e.stopPropagation();},_onMouseMove:function(e){this._cursorPrevPos=this._cursorPos;var xy=this._getMouseClientPos(e);this._cursorPos=xy;this._cursorDeltaPos=[this._cursorPos[0]-this._cursorPrevPos[0],this._cursorPos[1]-this._cursorPrevPos[1]];for(var i=0;i<3;++i){if(!this._mouseButtonsDown[i]||(this._cursorDeltaPos[0]==0&&this._cursorDeltaPos[1]==0))continue;var sPos=this._dragStartPos[i];var ePos=[xy[0],xy[1]];this._dragEndPos[i]=ePos;this._dragDeltaPos[i]=[ePos[0]-sPos[0],ePos[1]-sPos[1]];if(!this._dragging[i]){this._dragging[i]=true;this._dispatch("onDragStart",i,sPos[0],sPos[1]);}
else this._dispatch("onDrag",i,ePos[0],ePos[1]);}
this._dispatch("onMouseMove",xy[0],xy[1],e);e.stopPropagation();},_onWindowMouseMove:function(e){this._cursorPrevPos=this._cursorPos;var xy=this._getMouseClientPos(e);this._cursorPos=xy;this._cursorDeltaPos=[this._cursorPos[0]-this._cursorPrevPos[0],this._cursorPos[1]-this._cursorPrevPos[1]];for(var i=0;i<3;++i){if(!this._dragging[i])continue;var sPos=this._dragStartPos[i];var ePos=[xy[0],xy[1]];this._dragEndPos[i]=ePos;this._dragDeltaPos[i]=[ePos[0]-sPos[0],ePos[1]-sPos[1]];this._dispatch("onDrag",i,ePos[0],ePos[1]);}
if(xy[2])return;this._dispatch("onMouseMove",xy[0],xy[1],e);e.stopPropagation();},_onMouseWheel:function(e){var xy=this._getMouseClientPos(e);var delta=0;if(!e){e=window.event;}
if(e.wheelDelta){delta=e.wheelDelta/120;if(window.opera){delta=-delta;}}
else if(e.detail){delta=-e.detail/3;}
if(delta){this._dispatch("onMouseWheel",delta,xy[0],xy[1],e);}
if(e.preventDefault){e.preventDefault();}
e.stopPropagation();},_onMouseOut:function(e){var xy=this._getMouseClientPos(e);this._dispatch("onMouseOut",xy[0],xy[1],e);},_onClick:function(e){var xy=this._getMouseClientPos(e);this._dispatch("onClick",e.button,xy[0],xy[1],e);},_onDoubleClick:function(e){var xy=this._getMouseClientPos(e);this._dispatch("onDoubleClick",e.button,xy[0],xy[1],e);},_onResize:function(e){this._dispatch("onResize",this._canvas.width,this._canvas.height,e);},_onAnimate:function(){this._animatePrevTime=this._animateTime;this._animateTime=Date.now();this._animateDeltaTime=this._animateTime-this._animatePrevTime;this._dispatch("onAnimate",this._animateDeltaTime/1000);if(this._animateMS>=0){if(this._animateWithTimeout){setTimeout(this._animateEventHandler,this._animateMS);}}
else if(this._fastAnimate){window.postMessage(SpiderGL.UserInterface.CanvasHandler._FAST_ANIMATE_MESSAGE_NAME,"*");}},_onDraw:function(){this._drawEventPending=false;this._fpsCount++;var now=Date.now();var fpsDT=now-this._fpsTime;if(fpsDT>=this._fpsUpdateMS){this._fps=SpiderGL.Math.floor(this._fpsCount*1000/fpsDT);this._fpsTime=now;this._fpsCount=0;}
this._dispatch("onDraw");},get gl(){return this._gl;},get canvas(){return this._canvas;},get width(){return this._canvas.width;},get height(){return this._canvas.height;},get postDrawEvent(){return this._postDrawEventFunction;},get animateTime(){return this._animateTime;},get animatePrevTime(){return this._animatePrevTime;},get animateDeltaTime(){return this._animateDeltaTime;},get animateRate(){return this._animateRate;},set animateRate(r){r=SpiderGL.Utility.getDefaultValue(r,SpiderGL.UserInterface.CanvasHandler.DEFAULT_ANIMATE_RATE);if(this._animateRate===r)return;this._fastAnimate=false;this._animateMS=-1;this._animateTime=Date.now();this._animatePrevTime=this._animateTime;this._animateDeltaTime=0;if(this._animateID){clearInterval(this._animateID);this._animateID=null;}
this._animateRate=r;if(r>0){this._animateMS=SpiderGL.Math.floor(1000/r);if(this._animateWithTimeout){setTimeout(this._animateEventHandler,this._animateMS);}
else{this._animateID=setInterval(this._animateEventHandler,this._animateMS);}}
else if(r<0){this._fastAnimate=true;window.postMessage(SpiderGL.UserInterface.CanvasHandler._FAST_ANIMATE_MESSAGE_NAME,"*");}},get framesPerSecond(){return this._fps;},get ignoreKeyRepeat(){return this._ignoreKeyRepeat;},set ignoreKeyRepeat(on){this._ignoreKeyRepeat=SpiderGL.Utility.getDefaultValue(on,SpiderGL.UserInterface.CanvasHandler.DEFAULT_IGNORE_KEY_REPEAT);},isKeyDown:function(key){if(key.toUpperCase){key=key.toUpperCase();}
return this._keysDown[key];},isMouseButtonDown:function(btn){return this._mouseButtonsDown[btn];},isDragging:function(btn){return this._dragging[btn];},dragStartX:function(btn){return this._dragStartPos[btn][0];},dragStartY:function(btn){return this._dragStartPos[btn][1];},dragEndX:function(btn){return this._dragEndPos[btn][0];},dragEndY:function(btn){return this._dragEndPos[btn][1];},dragDeltaX:function(btn){return this._dragDeltaPos[btn][0];},dragDeltaY:function(btn){return this._dragDeltaPos[btn][1];},get cursorX(){return this._cursorPos[0];},get cursorY(){return this._cursorPos[1];},get cursorPrevX(){return this._cursorPrevPos[0];},get cursorPrevY(){return this._cursorPrevPos[1];},get cursorDeltaX(){return this._cursorDeltaPos[0];},get cursorDeltaY(){return this._cursorDeltaPos[1];},draw:function(){this._onDraw();}};SpiderGL.Type.extend(SpiderGL.UserInterface.CanvasHandler,SpiderGL.Core.ObjectBase);SpiderGL.UserInterface.handleCanvas=function(canvas,handler,options){if(!canvas||!handler)return false;options=options||{};var gl=SpiderGL.WebGL.Context.getHijacked(canvas,options);if(!gl)return false;var ui=new SpiderGL.UserInterface.CanvasHandler(gl,handler,options);if(!ui)return false;var uiName=SpiderGL.Utility.getDefaultValue(options.uiName,SpiderGL.UserInterface.CanvasHandler.DEFAULT_PROPERTY_NAME);handler[uiName]=ui;ui._firstNotify();return true;}
SpiderGL.UserInterface.handleCanvasOnLoad=function(canvas,handler,options){if(!canvas||!handler)return false;options=options||{};var onLoad=SpiderGL.Utility.getDefaultValue(options.onLoad,null);function doHandle(){SpiderGL.UserInterface.handleCanvas(canvas,handler,options);if(onLoad){onLoad();}}
window.addEventListener("load",doHandle,false);return true;}
SpiderGL.openNamespace();const SGL_TRACKBALL_NO_ACTION=0;const SGL_TRACKBALL_ROTATE=1;const SGL_TRACKBALL_PAN=2;const SGL_TRACKBALL_DOLLY=3;const SGL_TRACKBALL_SCALE=4;const HOP_ALL=256;Presenter=function(canvas){this._isDebugging=false;this._lightDirection=[0,0,-1];this._supportsWebGL=sglHandleCanvas(canvas,this);};Presenter.prototype={_parseScene:function(options){options=options||{};var r={background:this._parseBackground(options.background),meshes:this._parseMeshes(options.meshes),texturedQuads:this._parseTexturedQuads(options.texturedQuads),modelInstances:this._parseModelInstances(options.modelInstances),spots:this._parseSpots(options.spots),trackball:this._parseTrackball(options.trackball),space:this._parseSpace(options.space)};return r;},_parseBackground:function(options){options=options||{};var r=sglGetDefaultObject({image:null,isEnvironment:false,color:[0.0,0.0,0.0,0.0]},options);return r;},_parseMeshes:function(options){var r={};for(var m in options){r[m]=this._parseMesh(options[m]);}
return r;},_parseMesh:function(options){var r=sglGetDefaultObject({url:null,transform:null},options);r.transform=this._parseTransform(r.transform);return r;},_parseTexturedQuads:function(options){var r={};for(var m in options){r[m]=this._parseTexturedQuad(options[m]);}
return r;},_parseTexturedQuad:function(options){return options;},_parseModelInstances:function(options){var r={};for(var m in options){r[m]=this._parseModelInstance(options[m]);}
return r;},_parseModelInstance:function(options){var r=sglGetDefaultObject({mesh:null,color:[1.0,1.0,1.0],cursor:"default",ID:0,transform:null,hotspots:{},visible:true,tags:[]},options);r.transform=this._parseTransform(r.transform);r.ID=this._instancesProgressiveID;this._instancesProgressiveID+=1;for(var m in r.hotspots){r.hotspots[m]=this._parseHotSpot(r.hotspots[m]);}
return r;},_parseSpots:function(options){var r={};for(var m in options){r[m]=this._parseSpot(options[m]);}
return r;},_parseSpot:function(options){var r=sglGetDefaultObject({mesh:null,color:[0.8,0.2,0.2,0.2],cursor:"pointer",ID:0,transform:null,visible:true,tags:[]},options);r.transform=this._parseTransform(r.transform);r.ID=this._spotsProgressiveID;if(!r.color[3])r.color[3]=0.2;r.alpha=r.color[3];this._spotsProgressiveID+=1;return r;},_parseTrackball:function(options){var r=sglGetDefaultObject({type:TurnTableTrackball,trackOptions:{}},options);return r;},_parseSpace:function(options){options=options||{};var r=sglGetDefaultObject({centerMode:"first",radiusMode:"first",whichInstanceCenter:"",whichInstanceRadius:"",explicitCenter:[0.0,0.0,0.0],explicitRadius:1.0,cameraFOV:60.0,cameraNearFar:[0.1,10.0],},options);if(r.cameraFOV<2.0)r.cameraFOV=2.0;if(r.cameraFOV>88.0)r.cameraFOV=88.0;return r;},_parseTransform:function(options){var r=sglGetDefaultObject({matrix:SglMat4.identity()},options);return r;},_parseHotSpot:function(options){var r=sglGetDefaultObject({textureQuad:null,transform:null},options);r.transform=this._parseTransform(r.transform);return r;},_createStandardNXSProgram:function(){var gl=this.ui.gl;var nxsVertexShader=new SglVertexShader(gl,"\
            precision highp float;                                                \n\
                                                                                  \n\
            uniform   mat4 uWorldViewProjectionMatrix;                            \n\
            uniform   mat3 uViewSpaceNormalMatrix;                                \n\
                                                                                  \n\
            attribute vec3 aPosition;                                             \n\
            attribute vec3 aNormal;                                               \n\
            attribute vec3 aColor;                                                \n\
                                                                                  \n\
            varying   vec3 vNormal;                                               \n\
            varying   vec3 vColor;                                                \n\
                                                                                  \n\
            void main(void)                                                       \n\
            {                                                                     \n\
                vNormal     = uViewSpaceNormalMatrix * aNormal;                   \n\
                vColor      = aColor;                                             \n\
                                                                                  \n\
                gl_Position = uWorldViewProjectionMatrix * vec4(aPosition, 1.0);  \n\
            }                                                                     \n\
        ");if(this._isDebugging)
console.log("Vertex Shader Log:\n"+vertexShader.log);var nxsFragmentShader=new SglFragmentShader(gl,"\
            precision highp float;                                                \n\
                                                                                  \n\
            uniform   vec3 uViewSpaceLightDirection;                              \n\
                                                                                  \n\
            varying   vec3 vNormal;                                               \n\
            varying   vec3 vColor;                                                \n\
                                                                                  \n\
            void main(void)                                                       \n\
            {                                                                     \n\
                vec3  normal  = normalize(vNormal);                               \n\
                float nDotL   = dot(normal, -uViewSpaceLightDirection);           \n\
                float lambert = max(0.0, nDotL);                                  \n\
                vec3  diffuse = vColor * lambert;                                 \n\
                                                                                  \n\
                gl_FragColor  = vec4(diffuse, 1.0);                               \n\
            }                                                                     \n\
        ");if(this._isDebugging)
console.log("Fragment Shader Log:\n"+fragmentShader.log);var program=new SglProgram(gl,{shaders:[nxsVertexShader,nxsFragmentShader],attributes:{"aPosition":0,"aNormal":1,"aColor":2},uniforms:{"uWorldViewProjectionMatrix":SglMat4.identity(),"uViewSpaceNormalMatrix":SglMat3.identity(),"uViewSpaceLightDirection":this._lightDirection}});if(this._isDebugging)
console.log("Program Log:\n"+program.log);return program;},_createColorCodedIDNXSProgram:function(){var gl=this.ui.gl;var nxsVertexShader=new SglVertexShader(gl,"\
            precision highp float;                                                \n\
                                                                                  \n\
            uniform   mat4 uWorldViewProjectionMatrix;                            \n\
                                                                                  \n\
            attribute vec3 aPosition;                                             \n\
            attribute vec3 aNormal;                                               \n\
            attribute vec3 aColor;                                                \n\
                                                                                  \n\
            void main(void)                                                       \n\
            {                                                                     \n\
                gl_Position = uWorldViewProjectionMatrix * vec4(aPosition, 1.0);  \n\
            }                                                                     \n\
        ");if(this._isDebugging)
console.log("Vertex Shader Log:\n"+vertexShader.log);var nxsFragmentShader=new SglFragmentShader(gl,"\
            precision highp float;                                                \n\
                                                                                  \n\
            uniform   vec4 uColorID;                                              \n\
                                                                                  \n\
            void main(void)                                                       \n\
            {                                                                     \n\
                gl_FragColor  = uColorID;                                         \n\
            }                                                                     \n\
        ");if(this._isDebugging)
console.log("Fragment Shader Log:\n"+fragmentShader.log);var program=new SglProgram(gl,{shaders:[nxsVertexShader,nxsFragmentShader],attributes:{"aPosition":0,"aNormal":1,"aColor":2},uniforms:{"uWorldViewProjectionMatrix":SglMat4.identity(),"uColorID":[1.0,0.5,0.0,1.0]}});if(this._isDebugging)
console.log("Program Log:\n"+program.log);return program;},_createColorShadedNXSProgram:function(){var gl=this.ui.gl;var nxsVertexShader=new SglVertexShader(gl,"\
            precision highp float;                                                \n\
                                                                                  \n\
            uniform   mat4 uWorldViewProjectionMatrix;                            \n\
            uniform   mat3 uViewSpaceNormalMatrix;                                \n\
                                                                                  \n\
            attribute vec3 aPosition;                                             \n\
            attribute vec3 aNormal;                                               \n\
            attribute vec3 aColor;                                                \n\
                                                                                  \n\
            varying   vec3 vNormal;                                               \n\
                                                                                  \n\
            void main(void)                                                       \n\
            {                                                                     \n\
                vNormal     = uViewSpaceNormalMatrix * aNormal;                   \n\
                gl_Position = uWorldViewProjectionMatrix * vec4(aPosition, 1.0);  \n\
            }                                                                     \n\
        ");if(this._isDebugging)
console.log("Vertex Shader Log:\n"+vertexShader.log);var nxsFragmentShader=new SglFragmentShader(gl,"\
            precision highp float;                                                \n\
                                                                                  \n\
            uniform   vec3 uViewSpaceLightDirection;                              \n\
            uniform   vec4 uColorID;                                              \n\
                                                                                  \n\
            varying   vec3 vNormal;                                               \n\
                                                                                  \n\
            void main(void)                                                       \n\
            {                                                                     \n\
                vec3  normal  = normalize(vNormal);                               \n\
                float nDotL   = dot(normal, -uViewSpaceLightDirection);           \n\
    float lambert   = max(-nDotL, nDotL);                             \n\
                      \n\
    vec3  baseColor = vec3(uColorID[0], uColorID[1], uColorID[2]);    \n\
    vec3  diffuse   = (baseColor*0.5) + (baseColor * lambert * 0.5);  \n\
                                                                                  \n\
                gl_FragColor  = vec4(diffuse, uColorID[3]);                       \n\
            }                                                                     \n\
        ");if(this._isDebugging)
console.log("Fragment Shader Log:\n"+fragmentShader.log);var program=new SglProgram(gl,{shaders:[nxsVertexShader,nxsFragmentShader],attributes:{"aPosition":0,"aNormal":1,"aColor":2},uniforms:{"uWorldViewProjectionMatrix":SglMat4.identity(),"uViewSpaceNormalMatrix":SglMat3.identity(),"uViewSpaceLightDirection":this._lightDirection}});if(this._isDebugging)
console.log("Program Log:\n"+program.log);return program;},_createStandardPLYtechnique:function(){var gl=this.ui.gl;var technique=new SglTechnique(gl,{vertexShader:"\
    precision highp float;                                                \n\
                       \n\
    uniform   mat4 uWorldViewProjectionMatrix;                            \n\
    uniform   mat3 uViewSpaceNormalMatrix;                                \n\
                       \n\
    attribute vec3 aPosition;                                             \n\
    attribute vec3 aNormal;                                               \n\
    attribute vec3 aColor;                                                \n\
                       \n\
    varying   vec3 vNormal;                                               \n\
    varying   vec3 vColor;                                                \n\
                       \n\
    void main(void)                                                       \n\
    {                                                                     \n\
     vNormal     = uViewSpaceNormalMatrix * aNormal;                   \n\
     vColor      = aColor;                                             \n\
                       \n\
     gl_Position = uWorldViewProjectionMatrix * vec4(aPosition, 1.0);  \n\
    }                                                                     \n\
   ",fragmentShader:"\
    precision highp float;                                                \n\
                       \n\
    uniform   vec3      uViewSpaceLightDirection;                         \n\
                       \n\
    varying   vec3 vNormal;                                               \n\
    varying   vec3 vColor;                                                \n\
                       \n\
    void main(void)                                                       \n\
    {                                                                     \n\
     vec3  normal    = normalize(vNormal);                             \n\
     float nDotL     = dot(normal, -uViewSpaceLightDirection);         \n\
     float lambert   = max(0.0, nDotL);                                \n\
                       \n\
     vec3  baseColor = vec3(1.0);                                      \n\
     vec3  diffuse   = vColor * baseColor * lambert;                   \n\
                       \n\
     gl_FragColor    = vec4(diffuse, 1.0);                             \n\
    }                                                                     \n\
   ",vertexStreams:{"aNormal":[0.0,0.0,1.0,0.0],"aColor":[0.4,0.4,0.8,1.0]},globals:{"uWorldViewProjectionMatrix":{semantic:"uWorldViewProjectionMatrix",value:SglMat4.identity()},"uViewSpaceNormalMatrix":{semantic:"uViewSpaceNormalMatrix",value:SglMat3.identity()},"uViewSpaceLightDirection":{semantic:"uViewSpaceLightDirection",value:[0.0,0.0,-1.0]}}});return technique;},_createColorCodedIDPLYtechnique:function(){var gl=this.ui.gl;var technique=new SglTechnique(gl,{vertexShader:"\
    precision highp float;                                                \n\
                       \n\
    uniform   mat4 uWorldViewProjectionMatrix;                            \n\
                       \n\
    attribute vec3 aPosition;                                             \n\
    attribute vec3 aNormal;                                               \n\
    attribute vec3 aColor;                                                \n\
                       \n\
    void main(void)                                                       \n\
    {                                                                     \n\
     gl_Position = uWorldViewProjectionMatrix * vec4(aPosition, 1.0);  \n\
    }                                                                     \n\
   ",fragmentShader:"\
    precision highp float;                                                \n\
                       \n\
                uniform   vec4 uColorID;                                              \n\
                       \n\
    void main(void)                                                       \n\
    {                                                                     \n\
     gl_FragColor    = uColorID;                                       \n\
    }                                                                     \n\
   ",vertexStreams:{"aNormal":[0.0,0.0,1.0,0.0],"aColor":[0.4,0.4,0.8,1.0]},globals:{"uWorldViewProjectionMatrix":{semantic:"uWorldViewProjectionMatrix",value:SglMat4.identity()},"uColorID":{semantic:"uColorID",value:[1.0,0.5,0.25,1.0]}}});return technique;},_createColorShadedPLYtechnique:function(){var gl=this.ui.gl;var technique=new SglTechnique(gl,{vertexShader:"\
    precision highp float;                                                \n\
                       \n\
    uniform   mat4 uWorldViewProjectionMatrix;                            \n\
    uniform   mat3 uViewSpaceNormalMatrix;                                \n\
                       \n\
    attribute vec3 aPosition;                                             \n\
    attribute vec3 aNormal;                                               \n\
    attribute vec3 aColor;                                                \n\
                       \n\
    varying   vec3 vNormal;                                               \n\
                       \n\
    void main(void)                                                       \n\
    {                                                                     \n\
     vNormal     = uViewSpaceNormalMatrix * aNormal;                   \n\
     gl_Position = uWorldViewProjectionMatrix * vec4(aPosition, 1.0);  \n\
    }                                                                     \n\
   ",fragmentShader:"\
    precision highp float;                                                \n\
                       \n\
                uniform   vec4 uColorID;                                              \n\
    uniform   vec3 uViewSpaceLightDirection;                              \n\
                       \n\
    varying   vec3 vNormal;                                               \n\
    varying   vec3 vColor;                                                \n\
                       \n\
    void main(void)                                                       \n\
    {                                                                     \n\
     vec3  normal    = normalize(vNormal);                             \n\
     float nDotL     = dot(normal, -uViewSpaceLightDirection);         \n\
     float lambert   = max(-nDotL, nDotL);                             \n\
                       \n\
     vec3  baseColor = vec3(uColorID[0], uColorID[1], uColorID[2]);    \n\
     vec3  diffuse   = (baseColor*0.5) + (baseColor * lambert * 0.5);  \n\
                       \n\
     gl_FragColor    = vec4(diffuse, uColorID[3]);                     \n\
    }                                                                     \n\
   ",vertexStreams:{"aNormal":[0.0,0.0,1.0,0.0],"aColor":[0.4,0.4,0.8,1.0]},globals:{"uWorldViewProjectionMatrix":{semantic:"uWorldViewProjectionMatrix",value:SglMat4.identity()},"uViewSpaceNormalMatrix":{semantic:"uViewSpaceNormalMatrix",value:SglMat3.identity()},"uViewSpaceLightDirection":{semantic:"uViewSpaceLightDirection",value:[0.0,0.0,-1.0]},"uColorID":{semantic:"uColorID",value:[1.0,0.5,0.25,1.0]}}});return technique;},_isSceneReady:function(){var r=(this._scene&&this._sceneParsed&&(this._objectsToLoad==0));return r;},_testReady:function(){if(this._objectsToLoad!=0)return;this.trackball.track(SglMat4.identity(),0.0,0.0,0.0);this.ui.postDrawEvent();},_objectLoaded:function(){this._objectsToLoad--;this._testReady();},_onMeshReady:function(){this._objectLoaded();},_onTextureReady:function(){this._objectLoaded();},_onBackgroundReady:function(){this._objectLoaded();},_pickingRefresh:function(x,y){this._pickpoint[0]=x;this._pickpoint[1]=y;var pickedPixel;var ID,cursor;if(this._onPickedSpot||this._onEnterSpot||this._onLeaveSpot){pickedPixel=this._drawScenePickingSpots();ID=this._Color2ID(pickedPixel);if(this._lastSpotID!=ID){var spots=this._scene.spots;if(ID!=0){for(var spt in spots){if(spots[spt].ID==ID){this._pickedSpot=spt;if(this._onHover){if(spots[this._lastPickedSpot])spots[this._lastPickedSpot].alpha=spots[this._lastPickedSpot].color[3];spots[this._pickedSpot].alpha=spots[this._pickedSpot].color[3]+0.2;cursor=spots[spt].cursor;if(!this._movingLight){this._lastCursor=document.getElementById(this.ui.canvas.id).style.cursor;document.getElementById(this.ui.canvas.id).style.cursor=cursor;}
this.ui.postDrawEvent();if(this._onLeaveSpot&&this._lastPickedSpot!="null")this._onLeaveSpot(this._lastPickedSpot);if(this._onEnterSpot&&this._pickedSpot!="null")this._onEnterSpot(this._pickedSpot);}
this._lastPickedSpot=spt;break;}}
this._lastSpotID=ID;}
else{this._pickedSpot="null";if(this._onHover){if(spots[this._lastPickedSpot])spots[this._lastPickedSpot].alpha=spots[this._lastPickedSpot].color[3];if(!this._movingLight)document.getElementById(this.ui.canvas.id).style.cursor=this._lastCursor;this.ui.postDrawEvent();if(this._onLeaveSpot&&this._lastPickedSpot!="null")this._onLeaveSpot(this._lastPickedSpot);this._lastPickedSpot="null";}
this._lastSpotID=ID;}}}
if(this._onPickedInstance||this._onEnterInstance||this._onLeaveInstance){pickedPixel=this._drawScenePickingInstances();ID=this._Color2ID(pickedPixel);if(this._lastInstanceID==ID)return;if(ID!=0){var instances=this._scene.modelInstances;for(var inst in instances){if(instances[inst].ID==ID){this._pickedInstance=inst;if(this._onHover){cursor=instances[inst].cursor;if(!this._movingLight){this._lastCursor=cursor;if(this._pickedSpot=="null")document.getElementById(this.ui.canvas.id).style.cursor=cursor;}
if(this._onLeaveInstance&&this._lastPickedInstance!="null")this._onLeaveInstance(this._lastPickedInstance);if(this._onEnterInstance&&this._pickedInstance!="null")this._onEnterInstance(this._pickedInstance);}
this._lastPickedInstance=inst;break;}}}
else{this._pickedInstance="null";if(this._onHover){this._lastCursor="default";if(!this._movingLight&&this._pickedSpot=="null")document.getElementById(this.ui.canvas.id).style.cursor="default";if(this._onLeaveInstance&&this._lastPickedInstance!="null")this._onLeaveInstance(this._lastPickedInstance);}
this._lastPickedInstance="null";}
this._lastInstanceID=ID;}},_setSceneCenterRadius:function(){var meshes=this._scene.meshes;var instances=this._scene.modelInstances;this.sceneCenter=[0.0,0.0,0.0];this.sceneRadiusInv=1.0;if(this._scene.space.centerMode=="explicit")
{this.sceneCenter=this._scene.space.explicitCenter;}
else if(this._scene.space.centerMode=="specific"&&this._scene.space.whichInstanceCenter!="")
{var mesh=meshes[instances[this._scene.space.whichInstanceCenter].mesh];if((mesh)&&(mesh.renderable)){var instCenter=SglVec3.to4(mesh.renderable.datasetCenter,1);instCenter=SglMat4.mul4(mesh.transform.matrix,instCenter);instCenter=SglMat4.mul4(instances[this._scene.space.whichInstanceCenter].transform.matrix,instCenter);instCenter=SglVec4.to3(instCenter);this.sceneCenter=instCenter;}}
else
{for(var inst in instances){var mesh=meshes[instances[inst].mesh];if((mesh)&&(mesh.renderable)){var instCenter=SglVec3.to4(mesh.renderable.datasetCenter,1);instCenter=SglMat4.mul4(mesh.transform.matrix,instCenter);instCenter=SglMat4.mul4(instances[inst].transform.matrix,instCenter);instCenter=SglVec4.to3(instCenter);this.sceneCenter=instCenter;break;}}}
if(this._scene.space.radiusMode=="explicit")
{this.sceneRadiusInv=1.0/this._scene.space.explicitRadius;}
else if(this._scene.space.radiusMode=="specific"&&this._scene.space.whichInstanceRadius!="")
{var mesh=meshes[instances[this._scene.space.whichInstanceRadius].mesh];if((mesh)&&(mesh.renderable)){var radius=mesh.renderable.datasetRadius;var vector111=SglVec3.one();vector111=SglMat3.mul3(SglMat4.to33(mesh.transform.matrix),vector111);vector111=SglMat3.mul3(SglMat4.to33(instances[this._scene.space.whichInstanceRadius].transform.matrix),vector111);var scalefactor=SglVec3.length(vector111)/SglVec3.length([1,1,1]);this.sceneRadiusInv=1.0/(radius*scalefactor);}}
else
{for(var inst in instances){var mesh=meshes[instances[inst].mesh];if((mesh)&&(mesh.renderable)){var radius=mesh.renderable.datasetRadius;var vector111=SglVec3.one();vector111=SglMat3.mul3(SglMat4.to33(mesh.transform.matrix),vector111);vector111=SglMat3.mul3(SglMat4.to33(instances[inst].transform.matrix),vector111);var scalefactor=SglVec3.length(vector111)/SglVec3.length([1,1,1]);this.sceneRadiusInv=1.0/(radius*scalefactor);break;}}}},_destroyPickFramebuffer:function(){if(this.pickFramebuffer){this.pickFramebuffer.destroy();this.pickFramebuffer=null;}
if(this.pickColorTexture){this.pickColorTexture.destroy();this.pickColorTexture=null;}
if(this.pickDepthRenderbuffer){this.pickDepthRenderbuffer.destroy();this.pickDepthRenderbuffer=null;}},_createPickFramebuffer:function(width,height){if(this.pickFramebuffer&&(this.pickFramebuffer.width==width)&&(this.pickFramebuffer.height==height))
return;else
this._destroyPickFramebuffer();var gl=this.ui.gl;this.pickColorTexture=new SglTexture2D(gl,{internalFormat:gl.RGBA,width:width,height:height});this.pickDepthRenderbuffer=new SglRenderbuffer(gl,{internalFormat:gl.DEPTH_COMPONENT16,width:width,height:height});this.pickFramebuffer=new SglFramebuffer(gl,{color:this.pickColorTexture,depth:this.pickDepthRenderbuffer,autoViewport:true});},_setupDraw:function(){var gl=this.ui.gl;var width=this.ui.width;var height=this.ui.height;var xform=this.xform;gl.viewport(0,0,width,height);var FOV=this._scene.space.cameraFOV;var nearP=this._scene.space.cameraNearFar[0];var farP=this._scene.space.cameraNearFar[1];xform.projection.loadIdentity();xform.projection.perspective(sglDegToRad(FOV),width/height,nearP,farP);xform.view.loadIdentity();xform.view.lookAt([0.0,0.0,0.0],[0.0,0.0,-1.0],[0.0,1.0,0.0]);this.viewMatrix=xform.viewMatrix;xform.model.loadIdentity();xform.model.multiply(this.trackball.matrix);this._setSceneCenterRadius();xform.model.scale([this.sceneRadiusInv,this.sceneRadiusInv,this.sceneRadiusInv]);xform.model.translate(SglVec3.neg(this.sceneCenter));},_ID2Color:function(ID){var intID=ID|0;var IDr=intID%5;var IDg=((intID-IDr)/5)%5;var IDb=((((intID-IDr)/5)-IDg)/5)%5;var colorID=[IDr*0.2,IDg*0.2,IDb*0.2,1.0];return colorID;},_Color2ID:function(color){var IDr=(((color[0]+2)/255.0)/0.2)|0;var IDg=((((color[1]+2)/255.0)/0.2)*5)|0;var IDb=((((color[2]+2)/255.0)/0.2)*25)|0;var ID=(IDr+IDg+IDb)|0;return ID;},_onPlyLoaded:function(req,thatmesh,gl){var plyData=req.buffer;var modelDescriptor=importPly(plyData);thatmesh.renderable=new SglModel(gl,modelDescriptor);thatmesh.renderable.boundingBox=modelDescriptor.extra.boundingBox;var TMR=thatmesh.renderable;TMR.datasetCenter=[0.0,0.0,0.0];TMR.datasetRadius=1.0;TMR.datasetCenter[0]=(TMR.boundingBox.max[0]+TMR.boundingBox.min[0])/2.0;TMR.datasetCenter[1]=(TMR.boundingBox.max[1]+TMR.boundingBox.min[1])/2.0;TMR.datasetCenter[2]=(TMR.boundingBox.max[2]+TMR.boundingBox.min[2])/2.0;TMR.datasetRadius=Math.sqrt(Math.pow((TMR.boundingBox.max[0]-TMR.boundingBox.min[0]),2)+
Math.pow((TMR.boundingBox.max[1]-TMR.boundingBox.min[1]),2)+
Math.pow((TMR.boundingBox.max[2]-TMR.boundingBox.min[2]),2))/2.0;this._onMeshReady();},_drawScene:function(){var gl=this.ui.gl;var width=this.ui.width;var height=this.ui.height;var xform=this.xform;var renderer=this.renderer;var CurrProgram=this.basicNXSProgram;var CurrTechnique=this.basicPLYTechnique;var CCProgram=this.colorShadedNXSProgram;var CCTechnique=this.colorShadedPLYtechnique;var meshes=this._scene.meshes;var instances=this._scene.modelInstances;var spots=this._scene.spots;var bkg=this._scene.background.color;this._setupDraw();gl.clearColor(bkg[0],bkg[1],bkg[2],bkg[3]);gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT|gl.STENCIL_BUFFER_BIT);for(var inst in instances){var instance=instances[inst];var mesh=meshes[instance.mesh];if(!mesh)continue;var renderable=mesh.renderable;if(!renderable)continue;if(!instance.visible)continue;gl.enable(gl.DEPTH_TEST);xform.model.push();xform.model.multiply(instance.transform.matrix);xform.model.multiply(mesh.transform.matrix);var uniforms={"uWorldViewProjectionMatrix":xform.modelViewProjectionMatrix,"uViewSpaceNormalMatrix":xform.viewSpaceNormalMatrix,"uViewSpaceLightDirection":this._lightDirection};if(mesh.isNexus){if(!renderable.isReady)continue;var nexus=renderable;nexus.modelMatrix=xform.modelMatrix;nexus.viewMatrix=xform.viewMatrix;nexus.projectionMatrix=xform.projectionMatrix;nexus.viewport=[0,0,width,height];CurrProgram.bind();CurrProgram.setUniforms(uniforms);nexus.begin();nexus.render();nexus.end();CurrProgram.unbind();}
else{renderer.begin();renderer.setTechnique(CurrTechnique);renderer.setDefaultGlobals();renderer.setPrimitiveMode("FILL");renderer.setGlobals(uniforms);renderer.setModel(renderable);renderer.renderModel();renderer.end();}
gl.disable(gl.DEPTH_TEST);xform.model.pop();}
for(var spt in spots){var spot=spots[spt];var mesh=meshes[spot.mesh];if(!mesh)continue;var renderable=mesh.renderable;if(!renderable)continue;if(!spot.visible)continue;gl.enable(gl.DEPTH_TEST);gl.depthMask(false);gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE);xform.model.push();xform.model.multiply(spot.transform.matrix);xform.model.multiply(mesh.transform.matrix);var uniforms={"uWorldViewProjectionMatrix":xform.modelViewProjectionMatrix,"uViewSpaceNormalMatrix":xform.viewSpaceNormalMatrix,"uViewSpaceLightDirection":this._lightDirection,"uColorID":[spot.color[0],spot.color[1],spot.color[2],spot.alpha]};if(mesh.isNexus){if(!renderable.isReady)continue;var nexus=renderable;nexus.modelMatrix=xform.modelMatrix;nexus.viewMatrix=xform.viewMatrix;nexus.projectionMatrix=xform.projectionMatrix;nexus.viewport=[0,0,width,height];CCProgram.bind();CurrProgram.setUniforms(uniforms);nexus.begin();nexus.render();nexus.end();CCProgram.unbind();}
else{renderer.begin();renderer.setTechnique(CCTechnique);renderer.setDefaultGlobals();renderer.setPrimitiveMode("FILL");renderer.setGlobals(uniforms);renderer.setModel(renderable);renderer.renderModel();renderer.end();}
gl.disable(gl.BLEND);gl.depthMask(true);gl.disable(gl.DEPTH_TEST);xform.model.pop();}},_drawScenePickingInstances:function(){var gl=this.ui.gl;var width=this.ui.width;var height=this.ui.height;var xform=this.xform;var renderer=this.renderer;var CurrProgram=this.colorCodedIDNXSProgram;var CurrTechnique=this.colorCodedIDPLYtechnique;var meshes=this._scene.meshes;var instances=this._scene.modelInstances;var pixel=new Uint8Array(4);this._createPickFramebuffer(width,height);this._setupDraw();this.pickFramebuffer.bind();gl.clearColor(0.0,0.0,0.0,0.0);gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT|gl.STENCIL_BUFFER_BIT);this.pickFramebuffer.unbind();for(var inst in instances){var instance=instances[inst];var mesh=meshes[instance.mesh];if(!mesh)continue;var renderable=mesh.renderable;if(!renderable)continue;if(!instance.visible)continue;gl.enable(gl.DEPTH_TEST);xform.model.push();xform.model.multiply(instance.transform.matrix);xform.model.multiply(mesh.transform.matrix);var colorID=this._ID2Color(instance.ID);var uniforms={"uWorldViewProjectionMatrix":xform.modelViewProjectionMatrix,"uColorID":colorID};if(mesh.isNexus){if(!renderable.isReady)continue;var nexus=renderable;nexus.modelMatrix=xform.modelMatrix;nexus.viewMatrix=xform.viewMatrix;nexus.projectionMatrix=xform.projectionMatrix;nexus.viewport=[0,0,width,height];this.pickFramebuffer.bind();CurrProgram.bind();CurrProgram.setUniforms(uniforms);nexus.begin();nexus.render();nexus.end();CurrProgram.unbind();this.pickFramebuffer.unbind();}
else{renderer.begin();renderer.setFramebuffer(this.pickFramebuffer);renderer.setTechnique(CurrTechnique);renderer.setDefaultGlobals();renderer.setPrimitiveMode("FILL");renderer.setGlobals(uniforms);renderer.setModel(renderable);renderer.renderModel();renderer.end();}
gl.disable(gl.DEPTH_TEST);xform.model.pop();}
this.pickFramebuffer.readPixels(pixel,{x:this._pickpoint[0],y:this._pickpoint[1],width:1,height:1,format:gl.RGBA,type:gl.UNSIGNED_BYTE});return pixel;},_drawScenePickingSpots:function(){var gl=this.ui.gl;var width=this.ui.width;var height=this.ui.height;var xform=this.xform;var renderer=this.renderer;var CurrProgram=this.colorCodedIDNXSProgram;var CurrTechnique=this.colorCodedIDPLYtechnique;var meshes=this._scene.meshes;var spots=this._scene.spots;var instances=this._scene.modelInstances;var pixel=new Uint8Array(4);this._createPickFramebuffer(width,height);this._setupDraw();this.pickFramebuffer.bind();gl.clearColor(0.0,0.0,0.0,0.0);gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT|gl.STENCIL_BUFFER_BIT);this.pickFramebuffer.unbind();for(var inst in instances){var instance=instances[inst];var mesh=meshes[instance.mesh];if(!mesh)continue;var renderable=mesh.renderable;if(!renderable)continue;if(!instance.visible)continue;gl.enable(gl.DEPTH_TEST);xform.model.push();xform.model.multiply(instance.transform.matrix);xform.model.multiply(mesh.transform.matrix);var uniforms={"uWorldViewProjectionMatrix":xform.modelViewProjectionMatrix,"uColorID":[0.0,0.0,0.0,0.0]};if(mesh.isNexus){if(!renderable.isReady)continue;var nexus=renderable;nexus.modelMatrix=xform.modelMatrix;nexus.viewMatrix=xform.viewMatrix;nexus.projectionMatrix=xform.projectionMatrix;nexus.viewport=[0,0,width,height];this.pickFramebuffer.bind();CurrProgram.bind();CurrProgram.setUniforms(uniforms);nexus.begin();nexus.render();nexus.end();CurrProgram.unbind();this.pickFramebuffer.unbind();}
else{renderer.begin();renderer.setFramebuffer(this.pickFramebuffer);renderer.setTechnique(CurrTechnique);renderer.setDefaultGlobals();renderer.setPrimitiveMode("FILL");renderer.setGlobals(uniforms);renderer.setModel(renderable);renderer.renderModel();renderer.end();}
gl.disable(gl.DEPTH_TEST);xform.model.pop();}
for(var spt in spots){var spot=spots[spt];var mesh=meshes[spot.mesh];if(!mesh)continue;var renderable=mesh.renderable;if(!renderable)continue;if(!spot.visible)continue;gl.enable(gl.DEPTH_TEST);xform.model.push();xform.model.multiply(spot.transform.matrix);xform.model.multiply(mesh.transform.matrix);var colorID=this._ID2Color(spot.ID);var uniforms={"uWorldViewProjectionMatrix":xform.modelViewProjectionMatrix,"uColorID":colorID};if(mesh.isNexus){if(!renderable.isReady)continue;var nexus=renderable;nexus.modelMatrix=xform.modelMatrix;nexus.viewMatrix=xform.viewMatrix;nexus.projectionMatrix=xform.projectionMatrix;nexus.viewport=[0,0,width,height];this.pickFramebuffer.bind();CurrProgram.bind();CurrProgram.setUniforms(uniforms);nexus.begin();nexus.render();nexus.end();CurrProgram.unbind();this.pickFramebuffer.unbind();}
else{renderer.begin();renderer.setFramebuffer(this.pickFramebuffer);renderer.setTechnique(CurrTechnique);renderer.setDefaultGlobals();renderer.setPrimitiveMode("FILL");renderer.setGlobals(uniforms);renderer.setModel(renderable);renderer.renderModel();renderer.end();}
gl.disable(gl.DEPTH_TEST);xform.model.pop();}
this.pickFramebuffer.readPixels(pixel,{x:this._pickpoint[0],y:this._pickpoint[1],width:1,height:1,format:gl.RGBA,type:gl.UNSIGNED_BYTE});return pixel;},_drawNull:function(){var gl=this.ui.gl;gl.clearColor(0.0,0.0,0.0,0.0);gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT|gl.STENCIL_BUFFER_BIT);},onInitialize:function(){var gl=this.ui.gl;gl.clearColor(0.5,0.5,0.5,1.0);var xform=new SglTransformationStack();var renderer=new SglModelRenderer(gl);var viewMatrix=SglMat4.identity();this.basicNXSProgram=this._createStandardNXSProgram();this.colorCodedIDNXSProgram=this._createColorCodedIDNXSProgram();this.basicPLYTechnique=this._createStandardPLYtechnique();this.colorCodedIDPLYtechnique=this._createColorCodedIDPLYtechnique();this.colorShadedNXSProgram=this._createColorShadedNXSProgram();this.colorShadedPLYtechnique=this._createColorShadedPLYtechnique();this.renderer=renderer;this.xform=xform;this.viewMatrix=viewMatrix;this.sceneCenter=[0.0,0.0,0.0];this.sceneRadiusInv=1.0;this.ui.animateRate=0;this.diff=0.0;this.x=0.0;this.y=0.0;this.dstartx=0.0;this.dstarty=0.0;this.dendx=0.0;this.dendy=0.0;this.ax1=0.0;this.ay1=0.0;this._scene=null;this._sceneParsed=false;this._objectsToLoad=0;this._targetInstanceName="null";this._targetHotSpotName="null";this._instancesProgressiveID=1;this._spotsProgressiveID=1;this._animating=false;this._movingLight=false;this._clickable=false;this._onHover=false;this._onPickedInstance=0;this._onPickedSpot=0;this._onEnterInstance=0;this._onEnterSpot=0;this._onLeaveInstance=0;this._onLeaveSpot=0;this._lastCursor="default";this._pickedInstance="null";this._pickedSpot="null";this._lastPickedInstance="null";this._lastPickedSpot="null";this._lastInstanceID=0;this._lastSpotID=0;this._pickpoint=[10,10];},onDrag:function(button,x,y,e){var ui=this.ui;this.ax1=(x/(ui.width-1))*2.0-1.0;this.ay1=(y/(ui.height-1))*2.0-1.0;if(this._movingLight&&ui.isMouseButtonDown(0)){this.rotateLight(this.ax1/2,this.ay1/2);return;}
if(this.dstartx==ui.dragStartX(button)){this.diff=ui.dragEndX(button)-this.dendx;if(ui.dragDeltaX(button)!=0)this.x+=(this.diff/500);}
if(this.dstarty==ui.dragStartY(button)){this.diff=ui.dragEndY(button)-this.dendy;if(ui.dragDeltaY(button)!=0)this.y+=(this.diff/500);}
var action=SGL_TRACKBALL_NO_ACTION;if((ui.isMouseButtonDown(0)&&ui.isKeyDown(17))||ui.isMouseButtonDown(1)){action=SGL_TRACKBALL_PAN;}
else if(ui.isMouseButtonDown(0)){action=SGL_TRACKBALL_ROTATE;}
this.trackball.action=action;this.trackball.track(this.viewMatrix,this.x,this.y,0.0);ui.postDrawEvent();this.dstartx=ui.dragStartX(button);this.dstarty=ui.dragStartY(button);this.dendx=ui.dragEndX(button);this.dendy=ui.dragEndY(button);},onMouseMove:function(x,y,e){if(e.target.id!=this.ui.gl.canvas.id)return;if(this._onHover&&!this.ui.isDragging(0)&&!this.isAnimate())this._pickingRefresh(x,y);},onMouseOut:function(x,y){if(this._onHover&&!this.ui.isDragging(0))this._pickingRefresh();},onMouseButtonDown:function(button,x,y,e){this._clickable=true;},onMouseButtonUp:function(button,x,y,e){if(this._clickable&&!this.ui.isDragging(0)&&button==0){this._pickingRefresh(x,y);if(this._onPickedSpot&&this._pickedSpot!="null")this._onPickedSpot(this._pickedSpot);if(this._onPickedInstance&&this._pickedInstance!="null")this._onPickedInstance(this._pickedInstance);}
this._clickable=false;},onKeyPress:function(key,evt){if(this._isDebugging)
{if((evt.charCode=='80')||(evt.charCode=='112'))
console.log(this.trackball.getState());if(evt.charCode=='49'){Nexus.Debug.flags[1]=!Nexus.Debug.flags[1];this.ui.postDrawEvent();}}},onMouseWheel:function(wheelDelta,x,y,e){var ui=this.ui;var action=SGL_TRACKBALL_SCALE;var factor=wheelDelta<0.0?(0.90):(1.10);this.trackball.action=action;this.trackball.track(this.viewMatrix,0.0,0.0,factor);this.trackball.action=SGL_TRACKBALL_NO_ACTION;ui.postDrawEvent();},onAnimate:function(dt){if(this._isSceneReady()){if(this.trackball.tick(dt)){this.ui.postDrawEvent();}
else{this.ui.animateRate=0;if(this._onHover&&!this.ui.isDragging(0))this._pickingRefresh(this.ui.cursorX,this.ui.cursorY);}}},onDraw:function(){if(this._isSceneReady())
this._drawScene();else
this._drawNull();},supportsWebGL:function(){return this._supportsWebGL;},toggleDebugMode:function(){this._isDebugging=!this._isDebugging;},setScene:function(options){if(!options)return;var scene=this._parseScene(options);if(!scene)return;this._scene=scene;this._objectsToLoad=0;for(var m in scene.meshes){var mesh=scene.meshes[m];if(mesh.url){this._objectsToLoad++;}}
for(var t in scene.texturedQuads){var tex=scene.texturedQuads[t];if(tex.url){this._objectsToLoad++;}}
if(scene.background.image){this._objectsToLoad++;}
var trackball=new this._scene.trackball.type();trackball.setup(this._scene.trackball.trackOptions);this.trackball=trackball;var that=this;var gl=this.ui.gl;for(var m in scene.meshes){var mesh=scene.meshes[m];if(!mesh.url)continue;if(String(mesh.url).lastIndexOf(".nxs")==(String(mesh.url).length-4)){var nexus=new Nexus.Renderer(gl);mesh.renderable=nexus;mesh.isNexus=true;nexus.targetError=5.0;nexus.onSceneReady=function(){that._onMeshReady();};nexus.onUpdate=this.ui.postDrawEvent;nexus.open(mesh.url);}
else{mesh.renderable=null;mesh.isNexus=false;sglRequestBinary(mesh.url,{onSuccess:(function(m){return function(req){that._onPlyLoaded(req,m,gl);};})(mesh)});}}
for(var t in scene.texturedQuads){var tex=scene.texturedQuads[t];if(!tex.url)continue;scene.background.texture=new SglTexture2D(gl,{internalFormat:gl.RGBA,format:gl.RGBA,type:gl.UNSIGNED_BYTE,generateMipmap:true,onSuccess:function(){that._onTextureReady();},url:tex.url});}
if(scene.background.image){scene.background.texture=new SglTexture2D(gl,{internalFormat:gl.RGBA,format:gl.RGBA,type:gl.UNSIGNED_BYTE,generateMipmap:true,onSuccess:function(){that._onBackgroundReady();},url:scene.background.image});}
this._testReady();this._sceneParsed=true;},resetTrackball:function(){this.trackball.reset();this.trackball.track(SglMat4.identity(),0.0,0.0,0.0);this._lightDirection=[0,0,-1];this.ui.postDrawEvent();},getTrackballPosition:function(){return this.trackball.getState();},setTrackballPosition:function(newposition){this.trackball.setState(newposition);this.ui.postDrawEvent();},animateToTrackballPosition:function(newposition){this.ui.animateRate=30;this.trackball.animateToState(newposition);this.ui.postDrawEvent();},isAnimate:function(){if(this.ui.animateRate>0)this._animating=true;else this._animating=false;return this._animating;},setInstanceVisibility:function(tag,state,redraw){var ui=this.ui;var instances=this._scene.modelInstances;for(var inst in instances){if(tag==HOP_ALL)
{instances[inst].visible=state;}
else
{for(var tg in instances[inst].tags){if(instances[inst].tags[tg]==tag)
instances[inst].visible=state;}}}
if(redraw)
ui.postDrawEvent();},toggleInstanceVisibility:function(tag,redraw){var ui=this.ui;var instances=this._scene.modelInstances;for(var inst in instances){if(tag==HOP_ALL)
{instances[inst].visible=!instances[inst].visible;}
else
{for(var tg in instances[inst].tags){if(instances[inst].tags[tg]==tag)
instances[inst].visible=!instances[inst].visible;}}}
if(redraw)
ui.postDrawEvent();},isInstanceVisibilityEnabled:function(tag){var visibility=false;var instances=this._scene.modelInstances;for(var inst in instances){if(!tag||tag==HOP_ALL){if(instances[inst].visible){visibility=true;return visibility;}}
else{for(var tg in instances[inst].tags){if(instances[inst].tags[tg]==tag){if(instances[inst].visible){visibility=true;return visibility;}}}}}
return visibility;},setSpotVisibility:function(tag,state,redraw){var ui=this.ui;var spots=this._scene.spots;for(var spt in spots){if(tag==HOP_ALL)
{spots[spt].visible=state;}
else
{for(var tg in spots[spt].tags){if(spots[spt].tags[tg]==tag)
spots[spt].visible=state;}}}
if(redraw)
ui.postDrawEvent();},toggleSpotVisibility:function(tag,redraw){var ui=this.ui;var spots=this._scene.spots;for(var spt in spots){if(tag==HOP_ALL)
{spots[spt].visible=!spots[spt].visible;}
else
{for(var tg in spots[spt].tags){if(spots[spt].tags[tg]==tag)
spots[spt].visible=!spots[spt].visible;}}}
if(redraw)
ui.postDrawEvent();},isSpotVisibilityEnabled:function(tag){var visibility=false;var spots=this._scene.spots;for(var spt in spots){if(!tag||tag==HOP_ALL){if(spots[spt].visible){visibility=true;return visibility;}}
else{for(var tg in spots[spt].tags){if(spots[spt].tags[tg]==tag){if(spots[spt].visible){visibility=true;return visibility;}}}}}
return visibility;},zoomIn:function(){this.onMouseWheel(-1);},zoomOut:function(){this.onMouseWheel(1);},rotateLight:function(x,y){x*=2;y*=2;var r=Math.sqrt(x*x+y*y);if(r>=1){x/=r;y/=r;r=0.999;}
var z=Math.sqrt(1-r*r);this._lightDirection=[-x,-y,-z];this.ui.postDrawEvent();},enableLightTrackball:function(on){this._movingLight=on;},isLightTrackballEnabled:function(){return this._movingLight;},enableOnHover:function(on){this._onHover=on;},isOnHoverEnabled:function(){return this._onHover;}};
var Nexus={};Nexus.LITTLE_ENDIAN_DATA=true;Nexus.PADDING=256;Nexus.Debug={};Nexus.Debug.tag=0;Nexus.Debug.flags=new Array(10);for(var i=0;i<Nexus.Debug.flags.length;++i){Nexus.Debug.flags[i]=false;}
Nexus.Attribute=function(){this.size=0;this.type=Nexus.Attribute.NONE;this.glType=Nexus.Attribute._typeGLMap[this.type];this.normalized=Nexus.Attribute._typeNormalized[this.type];this.stride=0;this.offset=0;};Nexus.Attribute.NONE=0;Nexus.Attribute.BYTE=1;Nexus.Attribute.UNSIGNED_BYTE=2;Nexus.Attribute.SHORT=3;Nexus.Attribute.UNSIGNED_SHORT=4;Nexus.Attribute.INT=5;Nexus.Attribute.UNSIGNED_INT=6;Nexus.Attribute.FLOAT=7;Nexus.Attribute.DOUBLE=8;Nexus.Attribute._typeSizeMap={};Nexus.Attribute._typeSizeMap[Nexus.Attribute.NONE]=0;Nexus.Attribute._typeSizeMap[Nexus.Attribute.BYTE]=1;Nexus.Attribute._typeSizeMap[Nexus.Attribute.UNSIGNED_BYTE]=1;Nexus.Attribute._typeSizeMap[Nexus.Attribute.SHORT]=2;Nexus.Attribute._typeSizeMap[Nexus.Attribute.UNSIGNED_SHORT]=2;Nexus.Attribute._typeSizeMap[Nexus.Attribute.INT]=4;Nexus.Attribute._typeSizeMap[Nexus.Attribute.UNSIGNED_INT]=4;Nexus.Attribute._typeSizeMap[Nexus.Attribute.FLOAT]=4;Nexus.Attribute._typeSizeMap[Nexus.Attribute.DOUBLE]=8;Nexus.Attribute._typeGLMap={};Nexus.Attribute._typeGLMap[Nexus.Attribute.NONE]=WebGLRenderingContext.NONE;Nexus.Attribute._typeGLMap[Nexus.Attribute.BYTE]=WebGLRenderingContext.BYTE;Nexus.Attribute._typeGLMap[Nexus.Attribute.UNSIGNED_BYTE]=WebGLRenderingContext.UNSIGNED_BYTE;Nexus.Attribute._typeGLMap[Nexus.Attribute.SHORT]=WebGLRenderingContext.SHORT;Nexus.Attribute._typeGLMap[Nexus.Attribute.UNSIGNED_SHORT]=WebGLRenderingContext.UNSIGNED_SHORT;Nexus.Attribute._typeGLMap[Nexus.Attribute.INT]=WebGLRenderingContext.INT;Nexus.Attribute._typeGLMap[Nexus.Attribute.UNSIGNED_INT]=WebGLRenderingContext.UNSIGNED_INT;Nexus.Attribute._typeGLMap[Nexus.Attribute.FLOAT]=WebGLRenderingContext.FLOAT;Nexus.Attribute._typeGLMap[Nexus.Attribute.DOUBLE]=WebGLRenderingContext.DOUBLE;Nexus.Attribute._typeNormalized={};Nexus.Attribute._typeNormalized[Nexus.Attribute.NONE]=true;Nexus.Attribute._typeNormalized[Nexus.Attribute.BYTE]=true;Nexus.Attribute._typeNormalized[Nexus.Attribute.UNSIGNED_BYTE]=true;Nexus.Attribute._typeNormalized[Nexus.Attribute.SHORT]=true;Nexus.Attribute._typeNormalized[Nexus.Attribute.UNSIGNED_SHORT]=true;Nexus.Attribute._typeNormalized[Nexus.Attribute.INT]=true;Nexus.Attribute._typeNormalized[Nexus.Attribute.UNSIGNED_INT]=true;Nexus.Attribute._typeNormalized[Nexus.Attribute.FLOAT]=false;Nexus.Attribute._typeNormalized[Nexus.Attribute.DOUBLE]=false;Nexus.Attribute.prototype={get isNull(){return(this.type==Nexus.Attribute.NONE);},get byteLength(){return(Nexus.Attribute._typeSizeMap[this.type]*this.size);},import:function(view,offset,littleEndian){var s=0;this.type=view.getUint8(offset+s,littleEndian);s+=Uint8Array.BYTES_PER_ELEMENT;this.size=view.getUint8(offset+s,littleEndian);s+=Uint8Array.BYTES_PER_ELEMENT;this.glType=Nexus.Attribute._typeGLMap[this.type];this.normalized=Nexus.Attribute._typeNormalized[this.type];this.stride=Nexus.Attribute._typeSizeMap[this.type]*this.size;this.offset=0;return s;}};Nexus.Attribute.SIZEOF=2*Uint8Array.BYTES_PER_ELEMENT;Nexus.Element=function(){this.attributes=new Array(8);for(var i=0;i<8;++i){this.attributes[i]=new Nexus.Attribute();}
this.lastAttribute=-1;};Nexus.Element.prototype={get byteLength(){var s=0;for(var i=0;i<this.attributes.length;++i){s+=this.attributes[i].byteLength;}
return s;},import:function(view,offset,littleEndian){var s=0;for(var i=0;i<this.attributes.length;++i){var attrib=this.attributes[i];s+=attrib.import(view,offset+s,littleEndian);if(!attrib.isNull){this.lastAttribute=i;}}
return s;}};Nexus.Element.SIZEOF=8*Nexus.Attribute.SIZEOF;Nexus.VertexElement=function(){Nexus.Element.call(this);};Nexus.VertexElement.SIZEOF=Nexus.Element.SIZEOF;Nexus.VertexElement.POSITION=0;Nexus.VertexElement.NORMAL=1;Nexus.VertexElement.COLOR=2;Nexus.VertexElement.TEXCOORD=3;Nexus.VertexElement.DATA0=4;Nexus.VertexElement.prototype={get hasPosition(){return!this.attributes[Nexus.VertexElement.POSITION].isNull;},get hasNormal(){return!this.attributes[Nexus.VertexElement.NORMAL].isNull;},get hasColor(){return!this.attributes[Nexus.VertexElement.COLOR].isNull;},get hasTexCoord(){return!this.attributes[Nexus.VertexElement.TEXCOORD].isNull;},hasData:function(i){return!this.attributes[Nexus.VertexElement.DATA0+i].isNull;},import:function(view,offset,littleEndian){var r=Nexus.Element.prototype.import.apply(this,arguments);var color=this.attributes[Nexus.VertexElement.COLOR];if(!color.isNull){if(color.type==Nexus.Attribute.BYTE){color.type=Nexus.Attribute.UNSIGNED_BYTE;color.glType=Nexus.Attribute._typeGLMap[color.type];}}
return r;}};sglExtend(Nexus.VertexElement,Nexus.Element);Nexus.FaceElement=function(){Nexus.Element.call(this);};Nexus.FaceElement.SIZEOF=Nexus.Element.SIZEOF;Nexus.FaceElement.INDEX=0;Nexus.FaceElement.NORMAL=1;Nexus.FaceElement.COLOR=2;Nexus.FaceElement.TEXCOORD=3;Nexus.FaceElement.DATA0=4;Nexus.FaceElement.prototype={get hasIndex(){return!this.attributes[Nexus.FaceElement.INDEX].isNull;},get hasNormal(){return!this.attributes[Nexus.FaceElement.NORMAL].isNull;},get hasColor(){return!this.attributes[Nexus.FaceElement.COLOR].isNull;},get hasTexCoord(){return!this.attributes[Nexus.FaceElement.TEXCOORD].isNull;},hasData:function(i){return!this.attributes[Nexus.FaceElement.DATA0+i].isNull;},import:function(view,offset,littleEndian){var r=Nexus.Element.prototype.import.apply(this,arguments);var color=this.attributes[Nexus.FaceElement.COLOR];if(!color.isNull){if(color.type==Nexus.Attribute.BYTE){color.type=Nexus.Attribute.UNSIGNED_BYTE;color.glType=Nexus.Attribute._typeGLMap[color.type];}}
return r;}};sglExtend(Nexus.FaceElement,Nexus.Element);Nexus.Signature=function(){this.vertex=new Nexus.VertexElement();this.face=new Nexus.FaceElement();this.flags=Nexus.Signature.UNCOMPRESSED;};Nexus.Signature.SIZEOF=Nexus.VertexElement.SIZEOF+Nexus.FaceElement.SIZEOF+Uint32Array.BYTES_PER_ELEMENT;Nexus.Signature.PTEXTURE=(1<<0);Nexus.Signature.MECO=(1<<1);Nexus.Signature.CTM1=(1<<2);Nexus.Signature.CTM2=(1<<3);Nexus.Signature.prototype={import:function(view,offset,littleEndian){var s=0;s+=this.vertex.import(view,offset+s,littleEndian);s+=this.face.import(view,offset+s,littleEndian);this.flags=view.getUint32(offset+s,littleEndian);s+=Uint32Array.BYTES_PER_ELEMENT;return s;}};Nexus.Sphere3f=function(){this.center=[0.0,0.0,0.0];this.radius=1.0;};Nexus.Sphere3f.SIZEOF=4*Float32Array.BYTES_PER_ELEMENT;Nexus.Sphere3f.prototype={import:function(view,offset,littleEndian){var s=0;for(var i=0;i<3;++i){this.center[i]=view.getFloat32(offset+s,littleEndian);s+=Float32Array.BYTES_PER_ELEMENT;}
this.radius=view.getFloat32(offset+s,littleEndian);s+=Float32Array.BYTES_PER_ELEMENT;return s;}};Nexus.Header=function(){this.reset();};Nexus.Header.SIZEOF=5*Uint32Array.BYTES_PER_ELEMENT+2*2*Uint32Array.BYTES_PER_ELEMENT+Nexus.Signature.SIZEOF+Nexus.Sphere3f.SIZEOF;Nexus.Header.MAGIC=0x4E787320;Nexus.Header.prototype={_getUint64:function(view,offset,littleEndian){var s=0;var lo=view.getUint32(offset+s,littleEndian);s+=Uint32Array.BYTES_PER_ELEMENT;var hi=view.getUint32(offset+s,littleEndian);s+=Uint32Array.BYTES_PER_ELEMENT;return((hi*(1<<32))+lo);},get isValid(){return(this.version>0);},reset:function(){this.magic=0;this.version=0;this.verticesCount=0;this.facesCount=0;this.signature=new Nexus.Signature();this.nodesCount=0;this.patchesCount=0;this.texturesCount=0;this.sphere=new Nexus.Sphere3f();},import:function(view,offset,littleEndian){this.reset();var s=0;this.magic=view.getUint32(offset+s,littleEndian);s+=Uint32Array.BYTES_PER_ELEMENT;if(this.magic!=Nexus.Header.MAGIC)return 0;this.version=view.getUint32(offset+s,littleEndian);s+=Uint32Array.BYTES_PER_ELEMENT;this.verticesCount=this._getUint64(view,offset+s,littleEndian);s+=Uint32Array.BYTES_PER_ELEMENT*2;this.facesCount=this._getUint64(view,offset+s,littleEndian);s+=Uint32Array.BYTES_PER_ELEMENT*2;s+=this.signature.import(view,offset+s,littleEndian);this.nodesCount=view.getUint32(offset+s,littleEndian);s+=Uint32Array.BYTES_PER_ELEMENT;this.patchesCount=view.getUint32(offset+s,littleEndian);s+=Uint32Array.BYTES_PER_ELEMENT;this.texturesCount=view.getUint32(offset+s,littleEndian);s+=Uint32Array.BYTES_PER_ELEMENT;s+=this.sphere.import(view,offset+s,littleEndian);return s;}};Nexus.Cone3s=function(){this.n=[0,0,0,0];};Nexus.Cone3s.SIZEOF=4*Uint16Array.BYTES_PER_ELEMENT;Nexus.Cone3s.prototype={backFace:function(sphere,view){var n=this.n;var norm=[n[0]/32766.0,n[1]/32766.0,n[2]/32766.0];var d=[0.0,0.0,0.0];var f=0.0;var dd=0.0;for(var i=0;i<3;++i){d[i]=(sphere.center[i]-norm[i]*sphere.radius)-view[i];norm[i]*=n[3]/32766.0;f+=d[i]*norm[i];dd=d[i]*d[i];}
return!((f<0.001)||((f*f)<dd));},frontFace:function(sphere,view){var n=this.n;var norm=[n[0]/32766.0,n[1]/32766.0,n[2]/32766.0];var d=[0.0,0.0,0.0];var f=0.0;var dd=0.0;for(var i=0;i<3;++i){d[i]=(sphere.center[i]+norm[i]*sphere.radius)-view[i];norm[i]*=n[3]/32766.0;f+=-d[i]*norm[i];dd=d[i]*d[i];}
return!((f<0.001)||((f*f)<dd));},import:function(view,offset,littleEndian){var s=0;for(var i=0;i<4;++i){this.n[i]=view.getInt16(offset+s,littleEndian);s+=Uint16Array.BYTES_PER_ELEMENT;}
return s;}};Nexus.Node=function(){this.offset=0;this.verticesCount=0;this.facesCount=0;this.error=0.0;this.cone=new Nexus.Cone3s();this.sphere=new Nexus.Sphere3f();this.tightRadius=0.0;this.firstPatch=0;this.lastPatch=0;this.lastByte=0;};Nexus.Node.SIZEOF=2*Uint32Array.BYTES_PER_ELEMENT+2*Uint16Array.BYTES_PER_ELEMENT+2*Float32Array.BYTES_PER_ELEMENT+Nexus.Sphere3f.SIZEOF+Nexus.Cone3s.SIZEOF;Nexus.Node.prototype={get isEmpty(){return(this.end==this.outBegin);},import:function(view,offset,littleEndian){var s=0;this.offset=Nexus.PADDING*view.getUint32(offset+s,littleEndian);s+=Uint32Array.BYTES_PER_ELEMENT;this.verticesCount=view.getUint16(offset+s,littleEndian);s+=Uint16Array.BYTES_PER_ELEMENT;this.facesCount=view.getUint16(offset+s,littleEndian);s+=Uint16Array.BYTES_PER_ELEMENT;this.error=view.getFloat32(offset+s,littleEndian);s+=Float32Array.BYTES_PER_ELEMENT;s+=this.cone.import(view,offset+s,littleEndian);s+=this.sphere.import(view,offset+s,littleEndian);this.tightRadius=view.getFloat32(offset+s,littleEndian);s+=Float32Array.BYTES_PER_ELEMENT;this.firstPatch=view.getUint32(offset+s,littleEndian);s+=Uint32Array.BYTES_PER_ELEMENT;return s;}};Nexus.NodeIndex=function(){this.items=[];};Nexus.NodeIndex.prototype={get length(){return this.items.length;},get sink(){return(this.items.length-1);},import:function(nodesCount,view,offset,littleEndian){this.items=new Array(nodesCount);var s=0;for(var i=0;i<nodesCount;++i){var node=new Nexus.Node();s+=node.import(view,offset+s,littleEndian);this.items[i]=node;}
for(var i=0;i<(nodesCount-1);++i){var currNode=this.items[i];var nextNode=this.items[i+1];currNode.lastPatch=nextNode.firstPatch;currNode.lastByte=nextNode.offset-1;}
return s;}};Nexus.Patch=function(){this.node=0;this.lastTriangle=0;this.texture=0;};Nexus.Patch.SIZEOF=3*Uint32Array.BYTES_PER_ELEMENT;Nexus.Patch.prototype={import:function(view,offset,littleEndian){var s=0;this.node=view.getUint32(offset+s,littleEndian);s+=Uint32Array.BYTES_PER_ELEMENT;this.lastTriangle=view.getUint32(offset+s,littleEndian);s+=Uint32Array.BYTES_PER_ELEMENT;this.texture=view.getUint32(offset+s,littleEndian);s+=Uint32Array.BYTES_PER_ELEMENT;return s;}};Nexus.PatchIndex=function(){this.items=[];};Nexus.PatchIndex.prototype={get length(){return this.items.length;},import:function(patchesCount,view,offset,littleEndian){this.items=new Array(patchesCount);var s=0;for(var i=0;i<patchesCount;++i){var patch=new Nexus.Patch();s+=patch.import(view,offset+s,littleEndian);this.items[i]=patch;}
return s;}};Nexus.Texture=function(){this.offset=0;this.matrix=new Array(16);this.lastByte=0;};Nexus.Texture.SIZEOF=1*Uint32Array.BYTES_PER_ELEMENT+16*Float32Array.BYTES_PER_ELEMENT;Nexus.Texture.prototype={import:function(view,offset,littleEndian){var s=0;this.offset=view.getUint32(offset+s,littleEndian);s+=Uint32Array.BYTES_PER_ELEMENT;for(var i=0;i<16;++i){this.matrix[i]=view.getFloat32(offset+s,littleEndian);s+=Float32Array.BYTES_PER_ELEMENT;}
return s;}};Nexus.TextureIndex=function(){this.items=[];};Nexus.TextureIndex.prototype={get length(){return this.items.length;},import:function(texturesCount,view,offset,littleEndian){this.items=new Array(texturesCount);var s=0;for(var i=0;i<texturesCount;++i){var texture=new Nexus.Texture();s+=texture.import(view,offset+s,littleEndian);this.items[i]=texture;}
for(var i=0;i<(texturesCount-1);++i){var currTex=this.items[i];var nextTex=this.items[i+1];currTex.lastByte=nextTex.offset-1;}
return s;}};Nexus.BoolArray=function(size){this._size=size;this._buffer=new Uint8Array(this._size);};Nexus.BoolArray.prototype={get size(){return this._size;},resetAll:function(){this._buffer=new Uint8Array(this._size);},set:function(i){this._buffer[i]=1;},reset:function(i){this._buffer[i]=0;},test:function(i){return(this._buffer[i]!=0);}};Nexus.PriorityQueue=function(compareFunction){this._array=[];this._cmpFunc=compareFunction;};Nexus.PriorityQueue.prototype={_insert:function(x,a,b){var cmp=this._cmpFunc;var arr=this._array;var a=0;var b=arr.length-1;var y,h;while(a<b){h=sglFloor((a+b)/2);y=arr[h];if(cmp(x,y)>0){a=h+1;}
else{b=h-1;}}
y=arr[a];if(cmp(x,y)>0){a++;}
arr.splice(a,0,x);},get length(){return this._array.length;},get isEmpty(){return(this._array.length<=0);},push:function(x){var len=this._array.length;if(len<=0){this._array.push(x);}
else{this._insert(x,0,len-1);}},pop:function(){if(this._size<=0)return;return this._array.pop();}};Nexus.Plane3f=function(p0,p1,p2){this._normal=SglVec3.normalize(SglVec3.cross(SglVec3.sub(p1,p0),SglVec3.sub(p2,p0)));this._offset=SglVec3.dot(p0,this._normal);};Nexus.Plane3f.prototype={get normal(){return this._normal.slice();},get offset(){return this._offset;},signedDistanceToPoint:function(p){return(SglVec3.dot(this._normal,p)-this._offset);}};Nexus.Renderer=function(gl){this._gl=gl;this._targetError=Nexus.Renderer.DEFAULT_TARGET_ERROR;this._maxPendingRequests=Nexus.Renderer.DEFAULT_MAX_PENDING_REQUESTS;this._maxCacheSize=Nexus.Renderer.DEFAULT_CACHE_SIZE;this._onUpdate=null;this._onSceneReady=null;this._mmat=SglMat4.identity();this._vmat=SglMat4.identity();this._pmat=SglMat4.identity();this._vp=[0.0,0.0,1.0,1.0];this._reset();this._updateView();};Nexus.Renderer.STATUS_NONE=0;Nexus.Renderer.STATUS_OPENING=1;Nexus.Renderer.STATUS_OPEN=2;Nexus.Renderer.DEFAULT_TARGET_ERROR=3.0;Nexus.Renderer.DEFAULT_MAX_PENDING_REQUESTS=3;Nexus.Renderer.DEFAULT_CACHE_SIZE=228*1024*1024;3
Nexus.Renderer._NODE_NONE=0;Nexus.Renderer._NODE_PENDING=1;Nexus.Renderer._NODE_READY=2;Nexus.Renderer._sortPatchesFunction=function(a,b){return((a.frame!=b.frame)?(b.frame-a.frame):(b.error-a.error));};Nexus.Renderer._sortNodesFunction=function(a,b){return a.node.renderError-b.node.renderError;};Nexus.Renderer._sortNodeCacheFunction=function(a,b){return((a.renderFrame!=b.renderFrame)?(b.renderFrame-a.renderFrame):(b.renderError-a.renderError));};Nexus.Renderer.prototype={_reset:function(){this._status=Nexus.Renderer.STATUS_NONE;this._inBegin=false;this._url=null;this._header=null;this._nodes=null;this._patches=null;this._textures=null;this._visitedNodes=null;this._blockedNodes=null;this._selectedNodes=null;this._cacheSize=0;this._cachedNodes=null;this._readyNodes=null;this._frame=0;this._pendingRequests=0;this._candidateNodes=null;},_requestHeader:function(){var offset=0;var size=Nexus.Header.SIZEOF;var that=this;var r=new SglBinaryRequest(this._url,{range:[offset,offset+size-1],onSuccess:function(){that._handleHeader(r.buffer);that._requestIndex();}});},_handleHeader:function(buffer){var view=new DataView(buffer);var offset=0;var littleEndian=Nexus.LITTLE_ENDIAN_DATA;var header=new Nexus.Header();header.import(view,offset,littleEndian);this._header=header;},_requestIndex:function(){var header=this._header;var offset=Nexus.Header.SIZEOF;var size=header.nodesCount*Nexus.Node.SIZEOF+header.patchesCount*Nexus.Patch.SIZEOF+header.texturesCount*Nexus.Texture.SIZEOF;var that=this;var r=new SglBinaryRequest(this._url,{range:[offset,offset+size-1],onSuccess:function(){that._handleIndex(r.buffer);that._openReady();}});},_handleIndex:function(buffer){var header=this._header;var view=new DataView(buffer);var offset=0;var littleEndian=Nexus.LITTLE_ENDIAN_DATA;var offset=0;this._nodes=new Nexus.NodeIndex();offset+=this._nodes.import(header.nodesCount,view,offset,littleEndian);this._patches=new Nexus.PatchIndex();offset+=this._patches.import(header.patchesCount,view,offset,littleEndian);this._textures=new Nexus.TextureIndex();offset+=this._textures.import(header.texturesCount,view,offset,littleEndian);},_openReady:function(){var nodesCount=this._nodes.length;var nodes=this._nodes.items;for(var i=0;i<nodesCount;++i){var node=nodes[i];node.status=Nexus.Renderer._NODE_NONE;node.request=null;node.vbo=null;node.ibo=null;node.color=[sglRandom01(),sglRandom01(),sglRandom01(),1.0];node.renderError=0.0;node.renderFrame=0;}
this._cachedNodes=[];this._readyNodes=[];this._pendingNodes=[];var nodesCount=this._header.nodesCount;this._visitedNodes=new Nexus.BoolArray(nodesCount);this._blockedNodes=new Nexus.BoolArray(nodesCount);this._selectedNodes=new Nexus.BoolArray(nodesCount);this._status=Nexus.Renderer.STATUS_OPEN;if(this._onSceneReady){this._onSceneReady();}},_signalUpdate:function(){var upd=this._onUpdate;if(upd){upd();}},get gl(){return this._gl;},get isValid(){return!!this._gl;},get onSceneReady(){return this._onSceneReady;},set onSceneReady(f){this._onSceneReady=f;},get onUpdate(){return this._onUpdate;},set onUpdate(f){this._onUpdate=f;},get status(){return this._status;},get isClosed(){return(this._status==Nexus.Renderer.STATUS_NONE);},get isOpening(){return(this._status==Nexus.Renderer.STATUS_OPENING);},get isOpen(){return(this._status==Nexus.Renderer.STATUS_OPEN);},get url(){return this._url;},get isReady(){return this.isOpen;},get datasetCenter(){if(!this.isReady)return[0,0,0];return this._header.sphere.center.slice(0,3);},get datasetRadius(){if(!this.isReady)return 1.0;return this._header.sphere.radius;},get inBegin(){return this._inBegin;},get maxPendingRequests(){return this._maxPendingRequests;},set maxPendingRequests(r){this._maxPendingRequests=r;},get targetError(){return this._targetError;},set targetError(e){return this._targetError=e;},get modelMatrix(){return this._mmat.slice(0,16);},set modelMatrix(m){if(this.inBegin)return;this._mmat=m.slice(0,16);},get viewMatrix(){return this._vmat.slice(0,16);},set viewMatrix(m){if(this.inBegin)return;this._vmat=m.slice(0,16);},get projectionMatrix(){return this._pmat.slice(0,16);},set projectionMatrix(m){if(this.inBegin)return;this._pmat=m.slice(0,16);},get viewport(){return this._vp.slice(0,4);},set viewport(v){if(this.inBegin)return;this._vp=v.slice(0,4);},destroy:function(){this.close();},open:function(url){if(!this.isValid)return;this.close();this._status=Nexus.Renderer.STATUS_OPENING;this._url=url;this._requestHeader();},close:function(){if(this.isClosed)return;if(this.isOpening){}
else if(this.isOpen){}
this._reset();},_updateCache:function(){var readyNodes=this._readyNodes;if(readyNodes.length<=0)return;var cachedNodes=this._cachedNodes;var newCache=cachedNodes.concat(readyNodes);newCache.sort(Nexus.Renderer._sortNodeCacheFunction);var maxSize=this._maxCacheSize;var size=0;var firstVictim=-1;var newNodes=[];for(var i=0,n=newCache.length;i<n;++i){var node=newCache[i];var nsize=node.lastByte-node.offset+1;if((size+nsize)>maxSize){firstVictim=i;break;}
if(node.request){newNodes.push(node);}
else{size+=nsize}}
if(firstVictim>=0){for(var i=firstVictim,n=newCache.length;i<n;++i){var node=newCache[i];if(node.vbo){node.vbo.destroy();node.vbo=null;}
if(node.ibo){node.ibo.destroy();node.ibo=null;}
node.request=null;node.status=Nexus.Renderer._NODE_NONE;}
newCache=newCache.slice(0,firstVictim);}
var vertexStride=this._header.signature.vertex.byteLength;var faceStride=this._header.signature.face.byteLength;var littleEndian=Nexus.LITTLE_ENDIAN_DATA;var gl=this._gl;for(var i=0,n=newNodes.length;i<n;++i){var node=newNodes[i];var request=node.request;var buffer=request.buffer;var view=new DataView(buffer,0,2*Uint16Array.BYTES_PER_ELEMENT);var offset=0;var nv=node.verticesCount;var nf=node.facesCount;var vertexOffset=offset;var vertexSize=nv*vertexStride;var faceOffset=vertexOffset+vertexSize;var faceSize=nf*faceStride;var vertices=new Uint8Array(buffer,vertexOffset,vertexSize);var indices=new Uint8Array(buffer,faceOffset,faceSize);node.vbo=new SglVertexBuffer(gl,{data:vertices});node.ibo=new SglIndexBuffer(gl,{data:indices});node.request=null;node.status=Nexus.Renderer._NODE_READY;var nsize=node.lastByte-node.offset+1;size+=nsize;}
this._readyNodes=[];this._cachedNodes=newCache;this._cacheSize=size;},_hierarchyVisit_isVisible:function(sphere){if(Nexus.Debug.flags[2])return true;var planes=this._planes;for(var i=0;i<6;++i){if((planes[i].signedDistanceToPoint(sphere.center)+sphere.radius)<0.0)return false;}
return true;},_hierarchyVisit_nodeError:function(n){var node=this._nodes.items[n];var sphere=node.sphere;var dist=SglVec3.length(SglVec3.sub(sphere.center,this._viewPoint))-sphere.radius;if(dist<0.1)dist=0.1;var res=this._resolution*dist;var error=node.error/res;if(!this._hierarchyVisit_isVisible(sphere)){error/=1000.0;}
return error;},_hierarchyVisit_insertNode:function(n,visitQueue){if(n==this._nodes.sink)return;if(this._visitedNodes.test(n))return;this._visitedNodes.set(n);var error=this._hierarchyVisit_nodeError(n);var node=this._nodes.items[n];node.renderError=error;node.renderFrame=this._frame;var nodeData={node:node,index:n};visitQueue.push(nodeData);},_hierarchyVisit_expandNode:function(nodeData){var node=nodeData.node;if(node.renderError<this._targetError)return false;return(node.status==Nexus.Renderer._NODE_READY);},_hierarchyVisit_insertChildren:function(n,visitQueue,block){var nodes=this._nodes.items;var node=nodes[n];var patches=this._patches.items;var blockedNodes=this._blockedNodes;for(var i=node.firstPatch;i<node.lastPatch;++i){var patch=patches[i];var child=patch.node;if(block)blockedNodes.set(child);this._hierarchyVisit_insertNode(child,visitQueue);}},_hierarchyVisit:function(){var visitQueue=new Nexus.PriorityQueue(Nexus.Renderer._sortNodesFunction);var visitedNodes=this._visitedNodes;var blockedNodes=this._blockedNodes;var selectedNodes=this._selectedNodes;visitedNodes.resetAll();blockedNodes.resetAll();selectedNodes.resetAll();this._hierarchyVisit_insertNode(0,visitQueue);var nodes=this._nodes.items;var candidatesCount=0;this._candidateNodes=[];var candidateNodes=this._candidateNodes;var count=0;while(!visitQueue.isEmpty&&(count<100)){var nodeData=visitQueue.pop();var n=nodeData.index;var node=nodeData.node;if((candidatesCount<this._maxPendingRequests)&&(node.status==Nexus.Renderer._NODE_NONE)){candidatesCount++;candidateNodes.push(node);}
var blocked=blockedNodes.test(n)||!this._hierarchyVisit_expandNode(nodeData);if(blocked){count++;}
else{selectedNodes.set(n);}
this._hierarchyVisit_insertChildren(n,visitQueue,blocked);}},_createNodeHandler:function(node){var that=this;return function(){that._readyNodes.push(node);that._signalUpdate();};},_requestNodes:function(){var candidateNodes=this._candidateNodes;if(candidateNodes.length<=0)return;var cachedNodes=this._cachedNodes.slice();cachedNodes.sort(Nexus.Renderer._sortNodeCacheFunction);var nodesToRequest=0;var cacheSize=this._cacheSize;for(var i=0,n=candidateNodes.length;i<n;++i){var c=candidateNodes[i];var s=this._maxCacheSize-cacheSize;var freed=0;var csize=c.lastByte-c.offset+1;var k=cachedNodes.length;if(s<csize){for(var j=cachedNodes.length-1;j>=0;--j){var p=cachedNodes[j];var psize=p.lastByte-p.offset+1;k=j;if(Nexus.Renderer._sortNodeCacheFunction(c,p)>=0)break;s+=psize;freed+=psize;if(s>=csize)break;}}
if(s>=csize){nodesToRequest++;cachedNodes=cachedNodes.slice(0,k);cachedNodes.push(c);cacheSize-=freed;cacheSize+=csize;}
else{break;}}
for(var i=0;i<nodesToRequest;++i){var node=candidateNodes[i];node.status=Nexus.Renderer._NODE_PENDING;node.request=new SglBinaryRequest(this._url,{range:[node.offset,node.lastByte],onSuccess:this._createNodeHandler(node)});}},_unproject:function(p){var a=[((p[0]-this._vp[0])/(this._vp[2]/2.0)-1.0),((p[1]-this._vp[1])/(this._vp[3]/2.0)-1.0),(2.0*p[2]-1.0),1.0];a=SglMat4.mul4(this._mvpmati,a);a=SglVec3.divs(SglVec4.to3(a),a[3]);return a;},_updateView:function(){this._mvmat=SglMat4.mul(this._vmat,this._mmat);this._mvpmat=SglMat4.mul(this._pmat,this._mvmat);this._mvpmati=SglMat4.inverse(this._mvpmat);this._viewPoint=SglVec4.to3(SglMat4.col(SglMat4.inverse(this._mvmat),3));var l=this._vp[0];var r=this._vp[0]+this._vp[2];var b=this._vp[1];var t=this._vp[1]+this._vp[3];var nsw=this._unproject([l,b,0.0]);var nse=this._unproject([r,b,0.0]);var nnw=this._unproject([l,t,0.0]);var nne=this._unproject([r,t,0.0]);var fsw=this._unproject([l,b,1.0]);var fse=this._unproject([r,b,1.0]);var fnw=this._unproject([l,t,1.0]);var fne=this._unproject([r,t,1.0]);var planes=new Array(6);this._planes=planes;planes[0]=new Nexus.Plane3f(nnw,nsw,fnw);planes[1]=new Nexus.Plane3f(nse,nne,fse);planes[2]=new Nexus.Plane3f(nsw,nse,fsw);planes[3]=new Nexus.Plane3f(nne,nnw,fne);planes[4]=new Nexus.Plane3f(fsw,fse,fnw);planes[5]=new Nexus.Plane3f(nse,nsw,nne);this._resolution=SglVec3.length(SglVec3.sub(SglVec3.divs(SglVec3.add(nse,fse),2.0),SglVec3.divs(SglVec3.add(nsw,fsw),2.0)))/(this._vp[2]*SglVec3.length(SglVec3.sub(SglVec3.divs(SglVec3.add(nse,SglVec3.add(fse,SglVec3.add(nsw,fsw))),4.0),this._viewPoint)));},_prepare:function(){this._updateView();this._updateCache();this._hierarchyVisit();this._requestNodes();},_beginRender:function(){},_endRender:function(){},_render:function(){var gl=this._gl;gl.glDrawElements=gl._spidergl.wn._ext.glFunctions.drawElements;var vertexStride=this._header.signature.vertex.byteLength;var vertexAttributes=this._header.signature.vertex.attributes;var vertexAttribsCount=this._header.signature.vertex.lastAttribute+1;for(var i=0;i<vertexAttribsCount;++i){if(vertexAttributes[i].isNull)continue;gl.enableVertexAttribArray(i);}
gl.vertexAttrib4fv(Nexus.VertexElement.COLOR,[0.8,0.8,0.8,1.0]);if(Nexus.Debug.flags[1]){if(!vertexAttributes[Nexus.VertexElement.COLOR].isNull){gl.disableVertexAttribArray(Nexus.VertexElement.COLOR);}}
var nodes=this._nodes.items;var patches=this._patches.items;var selectedNodes=this._selectedNodes;var nodesCount=nodes.length;for(var i=0;i<nodesCount;++i){if(!selectedNodes.test(i))continue;var node=nodes[i];var skipped=true;for(var p=node.firstPatch;p<node.lastPatch;++p){var patch=patches[p];if(!selectedNodes.test(patch.node)){skipped=false;break;}}
if(skipped)continue;if(Nexus.Debug.flags[3])continue;node.vbo.bind();node.ibo.bind();var attribOffset=0;for(var j=0;j<vertexAttribsCount;++j){var attrib=vertexAttributes[j];if(attrib.isNull)continue;gl.vertexAttribPointer(j,attrib.size,attrib.glType,attrib.normalized,attrib.stride,attrib.offset+attribOffset);attribOffset+=attrib.offset+attrib.stride*node.verticesCount;}
if(Nexus.Debug.flags[1]){gl.vertexAttrib4fv(Nexus.VertexElement.COLOR,node.color);}
var firstTriangle=0;for(var p=node.firstPatch;p<node.lastPatch;++p){var patch=patches[p];if(!selectedNodes.test(patch.node)){if(!Nexus.Debug.flags[4]){gl.glDrawElements(gl.TRIANGLES,(patch.lastTriangle-firstTriangle)*3,gl.UNSIGNED_SHORT,firstTriangle*3*Uint16Array.BYTES_PER_ELEMENT);}}
firstTriangle=patch.lastTriangle;}}
for(var i=0;i<vertexAttribsCount;++i){if(vertexAttributes[i].isNull)continue;gl.disableVertexAttribArray(i);}
SglVertexBuffer.unbind(gl);SglIndexBuffer.unbind(gl);},begin:function(){if(!this.isOpen)return;if(this.inBegin)return;this._inBegin=true;if(this._header.nodesCount<=0)return;this._prepare();},end:function(){if(!this.inBegin)return;this._frame++;this._inBegin=false;},render:function(){if(!this.inBegin)return;this._beginRender();this._render();this._endRender();}};
var parsePly=(function(){var canonicTypes={"char":"int8","int8":"int8","uchar":"uint8","uint8":"uint8","short":"int16","int16":"int16","ushort":"uint16","uint16":"uint16","int":"int32","int32":"int32","uint":"uint32","uint32":"uint32","float":"float32","float32":"float32","double":"float64","float64":"float64"};function trim(s){var r=s;var n=r.length;var i=0;var blanks=" \n\r\t";while((i<n)&&(blanks.indexOf(r.charAt(i))>=0)){i++;}
r=r.substring(i,r.length);i=r.length-1;while((i>0)&&(blanks.indexOf(r.charAt(i))>=0)){i--;}
r=r.substring(0,i+1);return r;}
function extractHeader(data){if(!data||!data.view||!data.view.buffer)return null;var u8=new Uint8Array(data.view.buffer);var endHeaderToken="end_header";var header="";var found=false;var currC=null;var prevC=null;var pos=data.pos;var p=0;var n=0;for(pos=0,n=u8.byteLength;pos<n;++pos){currC=String.fromCharCode(u8[pos]);header+=currC;if(currC==="\n"){if(pos>=endHeaderToken.length){p=pos-endHeaderToken.length;if(prevC=="\r")p--;if(header.substring(p,p+endHeaderToken.length)==endHeaderToken){found=true;break;}}}
prevC=currC;}
data.pos=pos;if(!found){return null;}
data.pos++;return header;}
function splitHeader(header){var lines=header.split("\n");var trimmed=[];var tokens=null;var s=null;for(var i=0,n=lines.length;i<n;++i){s=trim(lines[i]);if(s){tokens=s.split(" ");if(tokens.length>0){for(var j=0,m=tokens.length;j<m;++j){tokens[j]=trim(tokens[j]);}
trimmed.push(tokens);}}}
return trimmed;}
function parseHeader(header){if(!header||header.length<=0)return null;if(header[0][0]!="ply")return null;var elem=null;var prop=null;var tokens=null;var token=null;var tn=0;var info={format:null,elements:[],elementMap:{},comments:[],others:[]};for(var i=1;i<header.length-1;++i){tokens=header[i];tn=tokens.length;token=tokens[0].toLowerCase();switch(token){case"format":if(tn>=3){info.format={name:tokens[1],version:tokens[2],binary:(tokens[1].toLowerCase().indexOf("binary")>=0),littleEndian:((tokens[1].toLowerCase())=="binary_little_endian")};}
break;case"comment":info.comments.push(tokens.slice(1));break;case"element":if(tn>=3){elem={name:tokens[1],count:parseInt(tokens[2]),properties:[],propertyMap:{}};info.elements.push(elem);info.elementMap[elem.name.toLowerCase()]=elem;}
break;case"property":if(elem&&(tn>=3)){prop={name:tokens[tn-1],type:tokens.slice(1,tn-1)};elem.properties.push(prop);elem.propertyMap[prop.name.toLowerCase()]=prop;}
break;default:info.others.push(tokens.slice());break;}}
if(!info.format){return false;}
return info;}
var tabStr="\t";function setupLines(lines,tabs){for(var i=0,n=lines.length;i<n;++i){lines[i]=tabs+lines[i];}
return lines;}
function generateReadValue(assignExpr,types,index,binary,littleEndian,tabs,level,newIdentifiers){var lines=[];var type=types[index];if(type.toLowerCase()=="list"){var nIde="n"+level;var vIde="v"+level;var iIde="i"+level;newIdentifiers[nIde]=true;newIdentifiers[vIde]=true;newIdentifiers[iIde]=true;level++;index++;lines=lines.concat(lines,generateReadValue(""+nIde,types,index,binary,littleEndian,"",level,newIdentifiers));index++;lines.push(vIde+" = new Array("+nIde+");");lines.push("for ("+iIde+"=0; "+iIde+"<"+nIde+"; ++"+iIde+") {");lines=lines.concat(generateReadValue(vIde+"["+iIde+"]",types,index,binary,littleEndian,tabStr,level,newIdentifiers));lines.push("}");lines.push(assignExpr+" = "+vIde+";");}
else{if(binary){switch(type){case"char":case"int8":lines.push(assignExpr+" = view.getInt8(pos, "+littleEndian+");");lines.push("pos += 1;");break;case"uchar":case"uint8":lines.push(assignExpr+" = view.getUint8(pos, "+littleEndian+");");lines.push("pos += 1;");break;case"short":case"int16":lines.push(assignExpr+" = view.getInt16(pos, "+littleEndian+");");lines.push("pos += 2;");break;case"ushort":case"uint16":lines.push(assignExpr+" = view.getUint16(pos, "+littleEndian+");");lines.push("pos += 2;");break;case"int":case"int32":lines.push(assignExpr+" = view.getInt32(pos, "+littleEndian+");");lines.push("pos += 4;");break;case"uint":case"uint32":lines.push(assignExpr+" = view.getUint32(pos, "+littleEndian+");");lines.push("pos += 4;");break;case"float":case"float32":lines.push(assignExpr+" = view.getFloat32(pos, "+littleEndian+");");lines.push("pos += 4;");break;case"double":case"float64":lines.push(assignExpr+" = view.getFloat64(pos, "+littleEndian+");");lines.push("pos += 8;");break;default:break;}}
else{switch(type){case"char":case"int8":case"uchar":case"uint8":case"short":case"int16":case"ushort":case"uint16":case"int":case"int32":case"uint":case"uint32":lines.push(assignExpr+" = parseInt(view[pos]);");lines.push("pos += 1;");break;case"float":case"float32":case"double":case"float64":lines.push(assignExpr+" = parseFloat(view[pos]);");lines.push("pos += 1;");break;default:break;}}}
setupLines(lines,tabs);return lines;}
function generateReadProperty(assignExpr,types,binary,littleEndian,tabs,level,newIdentifiers){var lines=generateReadValue(assignExpr,types,0,binary,littleEndian,"",level,newIdentifiers);return lines;}
function generateReadElement(assignExpr,props,binary,littleEndian,tabs,level,newIdentifiers){var p=null;var lines=[];for(var i=0,n=props.length;i<n;++i){p=props[i];lines=lines.concat(generateReadProperty(assignExpr+"[\""+p.name+"\"]",p.type,binary,littleEndian,"",level,newIdentifiers));lines.push("");}
setupLines(lines,tabs);return lines;}
function generateReadElements(elemIndex,elem,binary,littleEndian,tabs,level,newIdentifiers){var lines=[];var nIde="n"+level;var iIde="i"+level;level++;newIdentifiers[nIde]=true;newIdentifiers[iIde]=true;newIdentifiers["element"]=true;newIdentifiers["elem"]=true;newIdentifiers["args"]=true;lines.push("element = info.elements["+elemIndex+"];");lines.push(nIde+" = element.count;");lines.push("elem = { };");lines.push("args = [ info, element, 0, elem];");lines.push("callbacks.onBeginElements.call(handler, info, element);");lines.push("for ("+iIde+"=0; "+iIde+"<"+nIde+"; ++"+iIde+") {");lines=lines.concat(generateReadElement("elem",elem.properties,binary,littleEndian,tabStr,level,newIdentifiers));lines.push(tabStr+"args[2] = "+iIde+";");lines.push(tabStr+"callbacks.onElement.apply(handler, args);");lines.push("}");lines.push("callbacks.onEndElements.call(handler, info, element);");setupLines(lines,tabs);return lines;}
function generateReadMesh(elems,binary,littleEndian){var lines=[];lines.push("function (data, info, callbacks, handler) {");lines.push(tabStr+"var view = data.view;");lines.push(tabStr+"var pos  = data.pos;");lines.push("");var newIdentifiers={};var elementLines=[];for(var i=0,n=elems.length;i<n;++i){elementLines=elementLines.concat(generateReadElements(i,elems[i],binary,littleEndian,tabStr,0,newIdentifiers));elementLines.push("");}
var ides=[];for(var ide in newIdentifiers){ides.push(ide);}
ides.sort();lines.push(tabStr+"var "+ides.join(", ")+";");lines.push("");lines.push(tabStr+"callbacks.onBeginContent.call(handler, info);");lines=lines.concat(elementLines);lines.push(tabStr+"callbacks.onEndContent.call(handler, info);");lines.push(tabStr+"data.pos = pos;");lines.push("}");setupLines(lines,"");var s="";for(var i=0,n=lines.length;i<n;++i){s+=lines[i]+"\n";}
return s;}
function getMeshInfo(data){if(!data)return null;var header=extractHeader(data);if(!header)return null;var tokens=splitHeader(header);if(!tokens)return null;var info=parseHeader(tokens);if(!info)return null;return info;}
function mainParsePly(buffer,handler){if(!buffer)return null;function emptyFunc(){};handler=handler||{};var callbacks={onBegin:(handler.onBegin||emptyFunc),onHeader:(handler.onHeader||emptyFunc),onBeginContent:(handler.onBeginContent||emptyFunc),onBeginElements:(handler.onBeginElements||emptyFunc),onElement:(handler.onElement||emptyFunc),onEndElements:(handler.onEndElements||emptyFunc),onEndContent:(handler.onEndContent||emptyFunc),onEnd:(handler.onEnd||emptyFunc)};var dataView=new DataView(buffer);var data={view:dataView,pos:0};var info=getMeshInfo(data);if(!info)return false;if(!info.format.binary){data.view=Array.prototype.map.call(new Uint8Array(buffer,data.pos),function(x){return String.fromCharCode(x);}).join("").split(" ");data.pos=0;}
var readMeshStr=generateReadMesh(info.elements,info.format.binary,info.format.littleEndian);var readMeshFunc=eval("("+readMeshStr+")");for(var e in info.elements){for(var p in info.elements[e].propertyMap){info.elements[e].propertyMap[p].canonicType=canonicTypes[info.elements[e].propertyMap[p].type];}}
callbacks.onBegin.call(handler);callbacks.onHeader.call(handler,info);readMeshFunc(data,info,callbacks,handler);callbacks.onEnd.call(handler);return true;}
return mainParsePly;})();var importPly=(function(){function emptyFunction(){}
function propertiesTypes(){var r=[];var m={};var a=null;for(var i=0;i<arguments.length;++i){a=arguments[i];if(!a)return r;m[a.canonicType]=1;}
for(var t in m){r.push(t);}
return r;}
function PlyHandler(buffer){this._buffer=buffer;this._modelDescriptor=null;this._verticesCount=0;this._vertexAttributes=null;this._vertexStride=0;this._vertexBuffer=null;this._handleVertex=emptyFunction;this._facesCount=0;this._indexBuffer=null;this._handleFace=emptyFunction;this._view=null;this._boundingBox={min:[1000000.0,1000000.0,1000000.0],max:[-1000000.0,-1000000.0,-1000000.0]};}
PlyHandler.prototype={get modelDescriptor(){return this._modelDescriptor;},onBegin:function(){},onHeader:function(header){var tabStr="\t";var elem=null;var props=null;var ptypes=null;var verticesCount=0;var vertexLines=null;var vertexAttributes={};var vertexStride=0;elem=header.elementMap["vertex"];if(elem&&elem.count>0){verticesCount=elem.count;props=elem.propertyMap;vertexLines=[];vertexLines.push("function (header, elementInfo, index, element) {");vertexLines.push(tabStr+"var littleEndian = SpiderGL.Type.LITTLE_ENDIAN;");vertexLines.push(tabStr+"var sf32         = SpiderGL.Type.SIZEOF_FLOAT32;");vertexLines.push(tabStr+"var sui8         = SpiderGL.Type.SIZEOF_UINT8;");vertexLines.push(tabStr+"var offset       = index * this._vertexStride;");vertexLines.push(tabStr+"var view         = this._view;");vertexLines.push("");ptypes=propertiesTypes(props["x"],props["y"],props["z"]);if(ptypes.length==1){switch(ptypes[0]){case"float32":vertexLines.push(tabStr+"view.setFloat32(offset, element.x, littleEndian); offset += sf32;");vertexLines.push(tabStr+"view.setFloat32(offset, element.y, littleEndian); offset += sf32;");vertexLines.push(tabStr+"view.setFloat32(offset, element.z, littleEndian); offset += sf32;");vertexLines.push("");vertexAttributes["position"]={size:3,type:SpiderGL.Type.FLOAT32,offset:vertexStride};vertexStride+=3*SpiderGL.Type.SIZEOF_FLOAT32;break;default:break;}}
ptypes=propertiesTypes(props["nx"],props["ny"],props["nz"]);if(ptypes.length==1){switch(ptypes[0]){case"float32":vertexLines.push(tabStr+"view.setFloat32(offset, element.nx, littleEndian); offset += sf32;");vertexLines.push(tabStr+"view.setFloat32(offset, element.ny, littleEndian); offset += sf32;");vertexLines.push(tabStr+"view.setFloat32(offset, element.nz, littleEndian); offset += sf32;");vertexLines.push("");vertexAttributes["normal"]={size:3,type:SpiderGL.Type.FLOAT32,offset:vertexStride};vertexStride+=3*SpiderGL.Type.SIZEOF_FLOAT32;break;default:break;}}
ptypes=propertiesTypes(props["red"],props["green"],props["blue"]);if(ptypes.length==1){switch(ptypes[0]){case"uint8":vertexLines.push(tabStr+"view.setUint8(offset, element.red  ); offset += sui8;");vertexLines.push(tabStr+"view.setUint8(offset, element.green); offset += sui8;");vertexLines.push(tabStr+"view.setUint8(offset, element.blue ); offset += sui8;");vertexLines.push(tabStr+"view.setUint8(offset, 255          ); offset += sui8;");vertexLines.push("");vertexAttributes["color"]={size:4,type:SpiderGL.Type.UINT8,offset:vertexStride,normalized:true};vertexStride+=4*SpiderGL.Type.SIZEOF_UINT8;break;case"float32":vertexLines.push(tabStr+"view.setFloat32(offset, element.red,   littleEndian); offset += sf32;");vertexLines.push(tabStr+"view.setFloat32(offset, element.green, littleEndian); offset += sf32;");vertexLines.push(tabStr+"view.setFloat32(offset, element.blue,  littleEndian); offset += sf32;");vertexLines.push(tabStr+"view.setFloat32(offset, 1.0,           littleEndian); offset += sf32;");vertexLines.push("");vertexAttributes["color"]={size:4,type:SpiderGL.Type.FLOAT32,offset:vertexStride};vertexStride+=4*SpiderGL.Type.SIZEOF_FLOAT32;break;default:break;}}
ptypes=propertiesTypes(props["texture_u"],props["texture_v"]);if(ptypes.length==1){switch(ptypes[0]){case"float32":vertexLines.push(tabStr+"view.setFloat32(offset, element.texture_u, littleEndian); offset += sf32;");vertexLines.push(tabStr+"view.setFloat32(offset, element.texture_v, littleEndian); offset += sf32;");vertexLines.push("");vertexAttributes["texcoord"]={size:2,type:SpiderGL.Type.FLOAT32,offset:vertexStride};vertexStride+=2*SpiderGL.Type.SIZEOF_FLOAT32;break;default:break;}}
vertexLines.push("}");}
var facesCount=0;var faceLines=null;elem=header.elementMap["face"];if(elem&&elem.count>0){facesCount=elem.count;props=elem.propertyMap;faceLines=[];faceLines.push("function (header, elementInfo, index, element) {");faceLines.push(tabStr+"var littleEndian = SpiderGL.Type.LITTLE_ENDIAN;");faceLines.push(tabStr+"var sui32        = SpiderGL.Type.SIZEOF_UINT32;");faceLines.push(tabStr+"var offset       = index * 3 * sui32;");faceLines.push(tabStr+"var view         = this._view;");faceLines.push("");if(props["vertex_indices"]){faceLines.push(tabStr+"view.setUint32(offset, element.vertex_indices[0], littleEndian); offset += sui32;");faceLines.push(tabStr+"view.setUint32(offset, element.vertex_indices[1], littleEndian); offset += sui32;");faceLines.push(tabStr+"view.setUint32(offset, element.vertex_indices[2], littleEndian); offset += sui32;");}
else{facesCount=0;}
faceLines.push("}");}
this._mesh=null;this._verticesCount=verticesCount;this._vertexAttributes=vertexAttributes;this._vertexStride=vertexStride;this._vertexBuffer=null;this._handleVertex=emptyFunction;if(vertexStride>0){var vertexFuncStr=vertexLines.join("\n");this._handleVertex=eval("("+vertexFuncStr+")");}
this._facesCount=facesCount;this._indexBuffer=null;this._handleFace=emptyFunction;if(facesCount>0){var faceFuncStr=faceLines.join("\n");this._handleFace=eval("("+faceFuncStr+")");}},onBeginContent:function(header){},onBeginElements:function(header,elementInfo){switch(elementInfo.name){case"vertex":this._vertexBuffer=new ArrayBuffer(this._verticesCount*this._vertexStride);this._view=new DataView(this._vertexBuffer);this._handleElement=this._handleVertex;break;case"face":this._indexBuffer=new ArrayBuffer(this._facesCount*3*SpiderGL.Type.SIZEOF_UINT32);this._view=new DataView(this._indexBuffer);this._handleElement=this._handleFace;break;default:this._view=null;this._handleElement=emptyFunction;break;}},onElement:function(header,elementInfo,index,element){if(elementInfo.name=="vertex"){if(element.x<this._boundingBox.min[0])
this._boundingBox.min[0]=element.x;if(element.y<this._boundingBox.min[1])
this._boundingBox.min[1]=element.y;if(element.z<this._boundingBox.min[2])
this._boundingBox.min[2]=element.z;if(element.x>this._boundingBox.max[0])
this._boundingBox.max[0]=element.x;if(element.y>this._boundingBox.max[1])
this._boundingBox.max[1]=element.y;if(element.z>this._boundingBox.max[2])
this._boundingBox.max[2]=element.z;}
this._handleElement(header,elementInfo,index,element);},onEndElements:function(header,elementInfo){this._view=null;this._handleElement=emptyFunction;},onEndContent:function(){},onEnd:function(){if((this._verticesCount<=0)&&(this._facesCount<=0))return;var gl=this._gl;var modelDescriptor={version:"0.0.1.0 EXP",meta:{},data:{vertexBuffers:{},indexBuffers:{}},access:{vertexStreams:{},primitiveStreams:{}},semantic:{bindings:{},chunks:{}},logic:{parts:{}},control:{},extra:{}};var modelVertexBuffers=modelDescriptor.data.vertexBuffers;var modelIndexBuffers=modelDescriptor.data.indexBuffers;var modelVertexStreams=modelDescriptor.access.vertexStreams;var modelPrimitiveStreams=modelDescriptor.access.primitiveStreams;var modelBindings=modelDescriptor.semantic.bindings;var modelChunks=modelDescriptor.semantic.chunks;var modelParts=modelDescriptor.logic.parts;modelDescriptor.extra.boundingBox=this._boundingBox;var maxVerticesCount=(1<<16)-1;var baseVertexBufferName="mainVertexBuffer";var baseIndexBufferName="mainIndexBuffer";var baseBindingName="mainBinding";var baseChunkName="mainChunk";var basePointStreamName="vertices";var baseTriStreamName="triangles";var basePartName="mainPart";if(this._facesCount>0){var littleEndian=SpiderGL.Type.LITTLE_ENDIAN;var indexStride=SpiderGL.Type.SIZEOF_UINT32;var wholeSize=Float64Array.BYTES_PER_ELEMENT;var stride=this._vertexStride;var partCount=stride%wholeSize;var wholeCount=(stride-partCount)/wholeSize;var vertexBufferView=new Uint8Array(this._vertexBuffer);var indexBufferView=new Uint32Array(this._indexBuffer);var chunksCount=0;var chunkVertexBuffers=[];var chunkVerticesCount=[];var chunkIndexBuffers=[];var chunkIndicesCount=[];var facesLeft=this._facesCount;var currFaceIndex=0;var indicesBuffer=new Uint32Array(this._facesCount*3);while(facesLeft>0){var verticesMap=new Uint32Array(this._verticesCount);var verticesNew=new Uint32Array(maxVerticesCount);var verticesCount=0;var indicesCount=0;var facesCount=0;while((verticesCount<=(maxVerticesCount-3))&&(facesLeft>0)){for(var k=0;k<3;++k,++currFaceIndex){var v=indexBufferView[currFaceIndex];var r=verticesMap[v];if(!r){verticesNew[verticesCount++]=v;verticesMap[v]=verticesCount;}
indicesBuffer[indicesCount++]=v;}
facesLeft--;facesCount++;}
if(facesCount<=0)continue;var chunkVertexBuffer=new ArrayBuffer(verticesCount*stride);var chunkVertexBufferView=new Uint8Array(chunkVertexBuffer);var chunkIndexBuffer=new Uint16Array(indicesCount);for(var i=0;i<indicesCount;++i){chunkIndexBuffer[i]=verticesMap[indicesBuffer[i]]-1;}
var s=0;for(var i=0,d=0;i<verticesCount;++i,d+=stride){s=verticesNew[i]*stride;chunkVertexBufferView.set(vertexBufferView.subarray(s,s+stride),d);}
chunkVertexBuffers.push(chunkVertexBuffer);chunkVerticesCount.push(verticesCount);chunkIndexBuffers.push(chunkIndexBuffer);chunkIndicesCount.push(indicesCount);chunksCount++;}
var partChunks=new Array(chunksCount);for(var i=0;i<chunksCount;++i){var vertexBufferName=baseVertexBufferName+i;var indexBufferName=baseIndexBufferName+i;var bindingName=baseBindingName+i;var chunkName=baseChunkName+i;modelVertexBuffers[vertexBufferName]={typedArray:chunkVertexBuffers[i]};var binding={vertexStreams:{},primitiveStreams:{}};modelBindings[bindingName]=binding;for(var a in this._vertexAttributes){var attr=this._vertexAttributes[a];var vertexStreamName=a+i;modelVertexStreams[vertexStreamName]={buffer:vertexBufferName,size:attr.size,type:attr.type,stride:this._vertexStride,offset:attr.offset,normalized:!!attr.normalized};binding.vertexStreams[a.toUpperCase()]=[vertexStreamName];}
modelIndexBuffers[indexBufferName]={typedArray:chunkIndexBuffers[i]};var pointStreamName=basePointStreamName+i;modelPrimitiveStreams[pointStreamName]={mode:SpiderGL.Type.POINTS,count:chunkVerticesCount[i]};binding.primitiveStreams["POINT"]=[pointStreamName];var triStreamName=baseTriStreamName+i;modelPrimitiveStreams[triStreamName]={buffer:indexBufferName,mode:SpiderGL.Type.TRIANGLES,count:chunkIndicesCount[i],type:SpiderGL.Type.UINT16,offset:0};binding.primitiveStreams["FILL"]=[triStreamName];var chunk={techniques:{"common":{binding:bindingName}}};modelChunks[chunkName]=chunk;partChunks[i]=chunkName;}
modelParts[basePartName]={chunks:partChunks};}
else{var binding={vertexStreams:{},primitiveStreams:{}};modelBindings[baseBindingName]=binding;if(this._verticesCount>0){var vertexBufferName=baseVertexBufferName;modelVertexBuffers[vertexBufferName]={typedArray:this._vertexBuffer};for(var a in this._vertexAttributes){var attr=this._vertexAttributes[a];modelVertexStreams[a]={buffer:vertexBufferName,size:attr.size,type:attr.type,stride:this._vertexStride,offset:attr.offset,normalized:!!attr.normalized};binding.vertexStreams[a.toUpperCase()]=[a];}
modelPrimitiveStreams[basePointStreamName]={mode:SpiderGL.Type.POINTS,count:this._verticesCount};binding.primitiveStreams["POINT"]=[basePointStreamName];}
if((this._verticesCount>0)||(this._facesCount>0)){modelChunks[baseChunkName]={techniques:{"common":{binding:baseBindingName}}};modelParts[basePartName]={chunks:[baseChunkName]};}}
this._modelDescriptor=modelDescriptor;}};function mainImportPly(buffer,gl){var handler=new PlyHandler(buffer,gl);parsePly(buffer,handler);var modelDescriptor=handler.modelDescriptor;return modelDescriptor;};return mainImportPly;})();
function SphereTrackball(){}
SphereTrackball.prototype={setup:function(options){options=options||{};var opt=sglGetDefaultObject({startCenter:[0.0,0.0,0.0],startDistance:2.0,minMaxDist:[0.2,4.0],},options);this._action=SGL_TRACKBALL_NO_ACTION;this._new_action=true;this._startDistance=opt.startDistance;this._distance=this._startDistance;this._minMaxDist=opt.minMaxDist;this._matrix=SglMat4.identity();this._sphereMatrix=SglMat4.identity();this._pts=[[0.0,0.0],[0.0,0.0]];this._start=[0.0,0.0];this.reset();},_computeMatrix:function(){var m=SglMat4.identity();m=SglMat4.mul(m,SglMat4.translation([0.0,0.0,-this._distance]));m=SglMat4.mul(m,this._sphereMatrix);this._matrix=m;},_projectOnSphere:function(x,y){var r=1.0;var z=0.0;var d=sglSqrt(x*x+y*y);if(d<(r*0.70710678118654752440)){z=sglSqrt(r*r-d*d);}
else{t=r/1.41421356237309504880;z=t*t/d;}
return z;},_transform:function(m,x,y,z){return SglMat4.mul4(m,[x,y,z,0.0]);},_transformOnSphere:function(m,x,y){var z=this._projectOnSphere(x,y);return this._transform(m,x,y,z);},_translate:function(offset,f){var invMat=SglMat4.inverse(this._sphereMatrix);var t=SglVec3.to4(offset,0.0);t=SglMat4.mul4(invMat,t);t=SglVec4.muls(t,f);var trMat=SglMat4.translation(t);this._sphereMatrix=SglMat4.mul(this._sphereMatrix,trMat);},getState:function(){return this._sphereMatrix;},setState:function(newstate){this._sphereMatrix=newstate;this._computeMatrix();},animateToState:function(newstate){this._sphereMatrix=newstate;this._computeMatrix();},get action(){return this._action;},set action(a){if(this._action!=a)this._new_action=true;this._action=a;},get matrix(){return this._matrix;},reset:function(){this._matrix=SglMat4.identity();this._sphereMatrix=SglMat4.identity();this._distance=this._startDistance;this._pts=[[0.0,0.0],[0.0,0.0]];this._action=SGL_TRACKBALL_NO_ACTION;this._new_action=true;this._computeMatrix();},track:function(m,x,y,z){if(this._new_action){this._start[0]=x;this._start[1]=y;this._new_action=false;}
var dx=this._start[0]-x;var dy=this._start[1]-y;this._start[0]=x;this._start[1]=y;this._pts[0][0]=this._pts[1][0]+dx;this._pts[0][1]=this._pts[1][1]+dy;this._pts[1][0]=dx;this._pts[1][1]=dy;switch(this._action){case SGL_TRACKBALL_ROTATE:this.rotate(m);break;case SGL_TRACKBALL_PAN:this.pan(m);break;case SGL_TRACKBALL_DOLLY:this.dolly(m,z);break;case SGL_TRACKBALL_SCALE:this.scale(m,z);break;default:break;}},rotate:function(m){if((this._pts[0][0]==this._pts[1][0])&&(this._pts[0][1]==this._pts[1][1]))return;var mInv=SglMat4.inverse(m);var v0=this._transformOnSphere(mInv,this._pts[0][0],this._pts[0][1]);var v1=this._transformOnSphere(mInv,this._pts[1][0],this._pts[1][1]);var v1=this._transformOnSphere(mInv,this._pts[1][0],this._pts[1][1]);var v1=this._transformOnSphere(mInv,this._pts[1][0],this._pts[1][1]);var axis=SglVec3.cross(v0,v1);var angle=SglVec3.length(axis);var rotMat=SglMat4.rotationAngleAxis(angle,axis);this._sphereMatrix=SglMat4.mul(rotMat,this._sphereMatrix);this._computeMatrix();},pan:function(m){var mInv=SglMat4.inverse(m);var v0=this._transform(mInv,this._pts[0][0],this._pts[0][1],-1.0);var v1=this._transform(mInv,this._pts[1][0],this._pts[1][1],-1.0);var offset=SglVec3.sub(v1,v0);this._translate(offset,2.0);this._computeMatrix();},dolly:function(m,dz){var mInv=SglMat4.inverse(m);var offset=this._transform(mInv,0.0,0.0,dz);this._translate(offset,1.0);this._computeMatrix();},scale:function(m,s){var scaleMat=SglMat4.scaling([s,s,s]);this._sphereMatrix=SglMat4.mul(scaleMat,this._sphereMatrix);this._computeMatrix();}};
function TurnTableTrackball(){}
TurnTableTrackball.prototype={setup:function(options){options=options||{};var opt=sglGetDefaultObject({startCenter:[0.0,0.0,0.0],startPhi:0.0,startTheta:0.0,startDistance:2.0,minMaxDist:[0.2,4.0],minMaxPhi:[-180,180],minMaxTheta:[-80.0,80.0],},options);this._action=SGL_TRACKBALL_NO_ACTION;this._new_action=true;this._matrix=SglMat4.identity();this._center=opt.startCenter;this._startPhi=sglDegToRad(opt.startPhi);this._startTheta=sglDegToRad(opt.startTheta);this._startDistance=opt.startDistance;this._phi=this._startPhi;this._theta=this._startTheta;this._distance=this._startDistance;this._targetPhi=this._startPhi;this._targetTheta=this._startTheta;this._targetDistance=this._startDistance;this._isAnimating=false;this._speedPhi=0.0;this._speedTheta=0.0;this._speedDistance=0.0;this._minMaxDist=opt.minMaxDist;if((opt.minMaxPhi[0]==-180)&&(opt.minMaxPhi[1]==180))
this._limitPhi=false;else
this._limitPhi=true;this._minMaxPhi=opt.minMaxPhi;this._minMaxPhi[0]=sglDegToRad(this._minMaxPhi[0]);this._minMaxPhi[1]=sglDegToRad(this._minMaxPhi[1]);this._minMaxTheta=opt.minMaxTheta;this._minMaxTheta[0]=sglDegToRad(this._minMaxTheta[0]);this._minMaxTheta[1]=sglDegToRad(this._minMaxTheta[1]);this._start=[0.0,0.0];this.reset();},clamp:function(value,low,high){if(value<low)return low;if(value>high)return high;return value;},_computeMatrix:function(){var m=SglMat4.identity();m=SglMat4.mul(m,SglMat4.translation([-this._center[0],-this._center[1],-this._center[2]]));m=SglMat4.mul(m,SglMat4.translation([0.0,0.0,-this._distance]));m=SglMat4.mul(m,SglMat4.rotationAngleAxis(this._theta,[1.0,0.0,0.0]));m=SglMat4.mul(m,SglMat4.rotationAngleAxis(this._phi,[0.0,-1.0,0.0]));this._matrix=m;},getState:function(){return[sglRadToDeg(this._phi),sglRadToDeg(this._theta),this._distance];},setState:function(newstate){this._isAnimating=false;this._phi=sglDegToRad(newstate[0]);this._theta=sglDegToRad(newstate[1]);this._distance=newstate[2];if(this._limitPhi)
this._phi=this.clamp(this._phi,this._minMaxPhi[0],this._minMaxPhi[1]);this._theta=this.clamp(this._theta,this._minMaxTheta[0],this._minMaxTheta[1]);this._distance=this.clamp(this._distance,this._minMaxDist[0],this._minMaxDist[1]);this._computeMatrix();},animateToState:function(newstate){this._isAnimating=false;this._targetPhi=sglDegToRad(newstate[0]);this._targetTheta=sglDegToRad(newstate[1]);this._targetDistance=newstate[2];if(this._limitPhi)
this._targetPhi=this.clamp(this._targetPhi,this._minMaxPhi[0],this._minMaxPhi[1]);this._targetTheta=this.clamp(this._targetTheta,this._minMaxTheta[0],this._minMaxTheta[1]);this._targetDistance=this.clamp(this._targetDistance,this._minMaxDist[0],this._minMaxDist[1]);this._speedPhi=Math.PI;this._speedTheta=Math.PI;this._speedDistance=2.0;if(!this._limitPhi){while(this._phi>2*Math.PI)
this._phi-=2*Math.PI;while(this._phi<0)
this._phi+=2*Math.PI;var clampedangle=this._targetPhi;while(clampedangle>2*Math.PI)
clampedangle-=2*Math.PI;while(clampedangle<0)
clampedangle+=2*Math.PI;if(Math.abs(clampedangle-this._phi)<Math.PI){if(clampedangle>this._phi){this.speedphi=Math.PI;}
else{this.speedphi=-Math.PI;}}
else{if(clampedangle>this._phi){clampedangle=(clampedangle-2*Math.PI)
this.speedphi=-Math.PI;}
else{clampedangle=(clampedangle+2*Math.PI)
this.speedphi=Math.PI;}}
this._targetPhi=clampedangle;}
var timePhi=Math.abs((this._targetPhi-this._phi)/this._speedPhi);var timeTheta=Math.abs((this._targetTheta-this._theta)/this._speedTheta);var timeDistance=Math.abs((this._targetDistance-this._distance)/this._speedDistance);var maxtime=Math.max(timePhi,Math.max(timeTheta,timeDistance));if(maxtime>1.0)
maxtime=1.0;this._speedPhi*=timePhi/maxtime;this._speedTheta*=timeTheta/maxtime;this._speedDistance*=timeDistance/maxtime;this._isAnimating=true;},tick:function(dt){if(!this._isAnimating)return false;var deltaPhi=this._speedPhi*dt;var deltaTheta=this._speedTheta*dt;var deltaDistance=this._speedDistance*dt;var diffPhi=this._targetPhi-this._phi;var diffTheta=this._targetTheta-this._theta;var diffDistance=this._targetDistance-this._distance;if(diffPhi>deltaPhi)
this._phi+=deltaPhi;else if(diffPhi<-deltaPhi)
this._phi-=deltaPhi;else
this._phi=this._targetPhi;if(diffTheta>deltaTheta)
this._theta+=deltaTheta;else if(diffTheta<-deltaTheta)
this._theta-=deltaTheta;else
this._theta=this._targetTheta;if(diffDistance>deltaDistance)
this._distance+=deltaDistance;else if(diffDistance<-deltaDistance)
this._distance-=deltaDistance;else
this._distance=this._targetDistance;if(this._phi==this._targetPhi)
if(this._theta==this._targetTheta)
if(this._distance==this._targetDistance)
this._isAnimating=false;this._computeMatrix();return true;},get action(){return this._action;},set action(a){if(this._action!=a)this._new_action=true;this._action=a;},get matrix(){return this._matrix;},reset:function(){this._matrix=SglMat4.identity();this._action=SGL_TRACKBALL_NO_ACTION
this._phi=this._startPhi;this._theta=this._startTheta;this._distance=this._startDistance;this._isAnimating=false;},track:function(m,x,y,z){if(this._new_action){this._start[0]=x;this._start[1]=y;this._new_action=false;}
var dx=this._start[0]-x;var dy=this._start[1]-y;this._start[0]=x;this._start[1]=y;switch(this._action){case SGL_TRACKBALL_ROTATE:this._isAnimating=false;this.rotate(m,dx,dy);break;case SGL_TRACKBALL_PAN:break;case SGL_TRACKBALL_SCALE:this._isAnimating=false;this.scale(m,z);break;default:break;}
return this._computeMatrix();},rotate:function(m,dx,dy){this._phi+=dx;if(this._limitPhi)
this._phi=this.clamp(this._phi,this._minMaxPhi[0],this._minMaxPhi[1]);if(this._phi>20.0)this._phi=this._phi-20.0;if(this._phi<-20.0)this._phi=this._phi+20.0;this._theta+=dy;this._theta=this.clamp(this._theta,this._minMaxTheta[0],this._minMaxTheta[1]);},scale:function(m,s){this._distance*=s;this._distance=this.clamp(this._distance,this._minMaxDist[0],this._minMaxDist[1]);}};
function PanTiltTrackball(){}
PanTiltTrackball.prototype={setup:function(options){options=options||{};var opt=sglGetDefaultObject({startCenter:[0.0,0.0,0.0],startPanX:0.0,startPanY:0.0,startAngleX:0.0,startAngleY:0.0,startDistance:2.0,minMaxDist:[0.2,4.0],minMaxPanX:[-0.7,0.7],minMaxPanY:[-0.7,0.7],minMaxAngleX:[-70.0,70.0],minMaxAngleY:[-70.0,70.0],},options);this._action=SGL_TRACKBALL_NO_ACTION;this._new_action=true;this._matrix=SglMat4.identity();this._center=opt.startCenter;this._startPanX=opt.startPanX;this._startPanY=opt.startPanY;this._startAngleX=sglDegToRad(opt.startAngleX);this._startAngleY=sglDegToRad(opt.startAngleY);this._startDistance=opt.startDistance;this._panX=this._startPanX;this._panY=this._startPanY;this._angleX=this._startAngleX;this._angleY=this._startAngleY;this._distance=this._startDistance;this._targetPanX=this._startPanX;this._targetPanY=this._startPanY;this._targetAngleX=this._startAngleX;this._targetAngleY=this._startAngleY;this._targetDistance=this._startDistance;this._isAnimating=false;this._speedPanX=0.0;this._speedPanY=0.0;this._speedAngleX=0.0;this._speedAngleY=0.0;this._speedDistance=0.0;this._minMaxDist=opt.minMaxDist;this._minMaxPanX=opt.minMaxPanX;this._minMaxPanY=opt.minMaxPanY;this._minMaxAngleX=opt.minMaxAngleX;this._minMaxAngleX[0]=sglDegToRad(this._minMaxAngleX[0]);this._minMaxAngleX[1]=sglDegToRad(this._minMaxAngleX[1]);this._minMaxAngleY=opt.minMaxAngleY;this._minMaxAngleY[0]=sglDegToRad(this._minMaxAngleY[0]);this._minMaxAngleY[1]=sglDegToRad(this._minMaxAngleY[1]);this._start=[0.0,0.0];this.reset();},clamp:function(value,low,high){if(value<low)return low;if(value>high)return high;return value;},_computeMatrix:function(){var m=SglMat4.identity();m=SglMat4.mul(m,SglMat4.translation([-this._center[0],-this._center[1],-this._center[2]]));m=SglMat4.mul(m,SglMat4.translation([0.0,0.0,-this._distance]));m=SglMat4.mul(m,SglMat4.rotationAngleAxis(this._angleY,[1.0,0.0,0.0]));m=SglMat4.mul(m,SglMat4.rotationAngleAxis(this._angleX,[0.0,-1.0,0.0]));m=SglMat4.mul(m,SglMat4.translation([this._panX,this._panY,0.0]));this._matrix=m;},getState:function(){return[this._panX,this._panY,sglRadToDeg(this._angleX),sglRadToDeg(this._angleY),this._distance];},setState:function(newstate){this._panX=newstate[0];this._panY=newstate[1];this._angleX=sglDegToRad(newstate[2]);this._angleY=sglDegToRad(newstate[3]);this._distance=newstate[4];this._panX=this.clamp(this._panX,this._minMaxPanX[0],this._minMaxPanX[1]);this._panY=this.clamp(this._panY,this._minMaxPanY[0],this._minMaxPanY[1]);this._angleX=this.clamp(this._angleX,this._minMaxAngleX[0],this._minMaxAngleX[1]);this._angleY=this.clamp(this._angleY,this._minMaxAngleY[0],this._minMaxAngleY[1]);this._distance=this.clamp(this._distance,this._minMaxDist[0],this._minMaxDist[1]);this._computeMatrix();},animateToState:function(newstate){this._isAnimating=false;this._targetPanX=newstate[0];this._targetPanY=newstate[1];this._targetAngleX=sglDegToRad(newstate[2]);this._targetAngleY=sglDegToRad(newstate[3]);this._targetDistance=newstate[4];this._targetPanX=this.clamp(this._targetPanX,this._minMaxPanX[0],this._minMaxPanX[1]);this._targetPanY=this.clamp(this._targetPanY,this._minMaxPanY[0],this._minMaxPanY[1]);this._targetAngleX=this.clamp(this._targetAngleX,this._minMaxAngleX[0],this._minMaxAngleX[1]);this._targetAngleY=this.clamp(this._targetAngleY,this._minMaxAngleY[0],this._minMaxAngleY[1]);this._targetDistance=this.clamp(this._targetDistance,this._minMaxDist[0],this._minMaxDist[1]);this._speedPanX=2.0;this._speedPanY=2.0;this._speedAngleX=Math.PI;this._speedAngleY=Math.PI;this._speedDistance=2.0;var timePanX=Math.abs((this._targetPanX-this._panX)/this._speedPanX);var timePanY=Math.abs((this._targetPanY-this._panY)/this._speedPanY);var timeAngleX=Math.abs((this._targetAngleX-this._angleX)/this._speedAngleX);var timeAngleY=Math.abs((this._targetAngleY-this._angleY)/this._speedAngleY);var timeDistance=Math.abs((this._targetDistance-this._distance)/this._speedDistance);var maxtime=Math.max(timePanX,Math.max(timePanY,Math.max(timeAngleX,Math.max(timeAngleY,timeDistance))));if(maxtime>1.0)
maxtime=1.0;this._speedPanX*=timePanX/maxtime;this._speedPanY*=timePanY/maxtime;this._speedAngleX*=timeAngleX/maxtime;this._speedAngleY*=timeAngleY/maxtime;this._speedDistance*=timeDistance/maxtime;this._isAnimating=true;},tick:function(dt){if(!this._isAnimating)return false;var deltaPanX=this._speedPanX*dt;var deltaPanY=this._speedPanY*dt;var deltaAngleX=this._speedAngleX*dt;var deltaAngleY=this._speedAngleY*dt;var deltaDistance=this._speedDistance*dt;var diffPanX=this._targetPanX-this._panX;var diffPanY=this._targetPanY-this._panY;var diffAngleX=this._targetAngleX-this._angleX;var diffAngleY=this._targetAngleY-this._angleY;var diffDistance=this._targetDistance-this._distance;if(diffPanX>deltaPanX)
this._panX+=deltaPanX;else if(diffPanX<-deltaPanX)
this._panX-=deltaPanX;else
this._panX=this._targetPanX;if(diffPanY>deltaPanY)
this._panY+=deltaPanY;else if(diffPanY<-deltaPanY)
this._panY-=deltaPanY;else
this._panY=this._targetPanY;if(diffAngleX>deltaAngleX)
this._angleX+=deltaAngleX;else if(diffAngleX<-deltaAngleX)
this._angleX-=deltaAngleX;else
this._angleX=this._targetAngleX;if(diffAngleY>deltaAngleY)
this._angleY+=deltaAngleY;else if(diffAngleY<-deltaAngleY)
this._angleY-=deltaAngleY;else
this._angleY=this._targetAngleY;if(diffDistance>deltaDistance)
this._distance+=deltaDistance;else if(diffDistance<-deltaDistance)
this._distance-=deltaDistance;else
this._distance=this._targetDistance;if(this._panX==this._targetPanX)
if(this._panX==this._targetPanX)
if(this._angleX==this._targetAngleX)
if(this._angleY==this._targetAngleY)
if(this._distance==this._targetDistance)
this._isAnimating=false;this._computeMatrix();return true;},get action(){return this._action;},set action(a){if(this._action!=a)this._new_action=true;this._action=a;},get matrix(){return this._matrix;},reset:function(){this._matrix=SglMat4.identity();this._action=SGL_TRACKBALL_NO_ACTION
this._panX=this._startPanX;this._panY=this._startPanY;this._angleX=this._startAngleX;this._angleY=this._startAngleY;this._distance=this._startDistance;this._isAnimating=false;},track:function(m,x,y,z){if(this._new_action){this._start[0]=x;this._start[1]=y;this._new_action=false;}
var dx=this._start[0]-x;var dy=this._start[1]-y;this._start[0]=x;this._start[1]=y;switch(this._action){case SGL_TRACKBALL_ROTATE:this._isAnimating=false;this.rotate(m,dx,dy);break;case SGL_TRACKBALL_PAN:this._isAnimating=false;this.pan(m,dx,dy);break;case SGL_TRACKBALL_SCALE:this._isAnimating=false;this.scale(m,z);break;default:break;}
return this._computeMatrix();},rotate:function(m,dx,dy){this._angleX+=dx;this._angleY+=dy;this._angleX=this.clamp(this._angleX,this._minMaxAngleX[0],this._minMaxAngleX[1]);this._angleY=this.clamp(this._angleY,this._minMaxAngleY[0],this._minMaxAngleY[1]);},pan:function(m,dx,dy){this._panX-=dx/2.0;this._panY-=dy/2.0;this._panX=this.clamp(this._panX,this._minMaxPanX[0],this._minMaxPanX[1]);this._panY=this.clamp(this._panY,this._minMaxPanY[0],this._minMaxPanY[1]);},scale:function(m,s){this._distance*=s;this._distance=this.clamp(this._distance,this._minMaxDist[0],this._minMaxDist[1]);}};
function init3dhop(){var interval,id,ismousedown;var button=0;$('#toolbar img').mouseenter(function(e){id=$(this).attr('id');if(!ismousedown)$(this).css("opacity","0.8");else $(this).css("opacity","1.0");}).mouseout(function(e){clearInterval(interval);$(this).css("opacity","0.5");}).mousedown(function(e){ismousedown=true;if(e.button==button){actionsToolbar(id);if(id=="zoomin"||id=="zoomout"){interval=setInterval(function(){actionsToolbar(id);},100);}
else{clearInterval(interval);}
$(this).css("opacity","1.0");button=0;}}).mouseup(function(e){ismousedown=false;if(e.button==button){clearInterval(interval);$(this).css("opacity","0.8");button=0;}}).on('touchstart',function(e){button=2;}).on('touchend',function(e){button=0;});$('#3dhop').on('contextmenu',function(e){return false;}).on('touchstart',function(e){$('#toolbar img').css("opacity","0.5");}).on('touchend',function(e){clearInterval(interval);}).on('touchmove',function(e){clearInterval(interval);$('#toolbar img').css("opacity","0.5");});if(window.navigator.userAgent.indexOf('Trident/')>0){$('#full').click(function(e){enterFullscreen();});$('#full_on').click(function(e){exitFullscreen();});}
resizeCanvas($('#3dhop').parent().width(),$('#3dhop').parent().height());set3dhlg();}
function lightSwitch(){var on=presenter.isLightTrackballEnabled();if(on){$('#light').css("visibility","hidden");$('#light_on').css("visibility","visible");$('#light_on').css("opacity","1.0");}
else{$('#light_on').css("visibility","hidden");$('#light').css("visibility","visible");$('#light').css("opacity","1.0");}}
function hotspotSwitch(){var on=presenter.isSpotVisibilityEnabled();if(on){$('#hotspot').css("visibility","hidden");$('#hotspot_on').css("visibility","visible");$('#hotspot_on').css("opacity","1.0");}
else{$('#hotspot_on').css("visibility","hidden");$('#hotspot').css("visibility","visible");$('#hotspot').css("opacity","1.0");}}
function fullscreenSwitch(){if($('#full').css("visibility")=="visible"){if(window.navigator.userAgent.indexOf('Trident/')<0)enterFullscreen();}
else{if(window.navigator.userAgent.indexOf('Trident/')<0)exitFullscreen();}}
function enterFullscreen(){var el=document.getElementById('3dhop');presenter.native_width=presenter.ui.width;presenter.native_height=presenter.ui.height;$('#full').css("visibility","hidden");$('#full_on').css("visibility","visible");$('#full_on').css("opacity","0.5");resizeCanvas(screen.width,screen.height);if(el.msRequestFullscreen)el.msRequestFullscreen();else if(el.mozRequestFullScreen)el.mozRequestFullScreen();else if(el.webkitRequestFullscreen)el.webkitRequestFullscreen();presenter.ui.postDrawEvent();}
function exitFullscreen(){$('#full_on').css("visibility","hidden");$('#full').css("visibility","visible");$('#full').css("opacity","0.5");resizeCanvas(presenter.native_width,presenter.native_height);if(document.msExitFullscreen)document.msExitFullscreen();else if(document.mozCancelFullScreen)document.mozCancelFullScreen();else if(document.webkitExitFullscreen)document.webkitExitFullscreen();presenter.ui.postDrawEvent();}
function moveToolbar(l,t){$('#toolbar').css('margin-left',l);$('#toolbar').css('margin-top',t);}
function resizeCanvas(w,h){$('#draw-canvas').attr('width',w);$('#draw-canvas').attr('height',h);$('#3dhop').css('width',w);$('#3dhop').css('height',h);}
function set3dhlg(){$('#tdhlg').html("Powered by 3DHOP</br>&nbsp;C.N.R. &nbsp;&ndash;&nbsp; I.S.T.I.");$('#tdhlg').mouseover(function(){$('#tdhlg').animate({height:"25px"},"fast");}).mouseout(function(){$('#tdhlg').animate({height:"15px"},"slow");});$('#tdhlg').click(function(){window.open('http://vcg.isti.cnr.it/3dhop/','_blank')});}
document.addEventListener("MSFullscreenChange",function(){if(!document.msFullscreenElement)exitFullscreen();},false);document.addEventListener("mozfullscreenchange",function(){if(!document.mozFullScreen)exitFullscreen();},false);document.addEventListener("webkitfullscreenchange",function(){if(!document.webkitIsFullScreen)exitFullscreen();},false);
var presenter=null;function setup3dhop(){presenter=new Presenter("draw-canvas");presenter.setScene({meshes:{"Axis":{url:sideurl}},modelInstances:{"Model1":{mesh:"Axis"}},trackball:{type:TurnTableTrackball},space:{centerMode:"explicit",radiusMode:"explicit",explicitCenter:[0.0,0.0,0.0],explicitRadius:100.0}});}
function actionsToolbar(action){if(action=='home')presenter.resetTrackball();else if(action=='zoomin')presenter.zoomIn();else if(action=='zoomout')presenter.zoomOut();else if(action=='light'||action=='light_on'){presenter.enableLightTrackball(!presenter.isLightTrackballEnabled());lightSwitch();}
else if(action=='full'||action=='full_on')fullscreenSwitch();}
$(document).ready(function(){init3dhop();setup3dhop();enterFullscreen();});